/*!
 jodit - Jodit is awesome and usefully wysiwyg editor with filebrowser
 Author: Chupurnov <chupurnov@gmail.com> (https://xdsoft.net/)
 Version: v3.4.1
 Url: https://xdsoft.net/jodit/
 License(s): MIT
*/

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 69);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(15), exports);
tslib_1.__exportStar(__webpack_require__(107), exports);
tslib_1.__exportStar(__webpack_require__(110), exports);
tslib_1.__exportStar(__webpack_require__(27), exports);
tslib_1.__exportStar(__webpack_require__(5), exports);
tslib_1.__exportStar(__webpack_require__(30), exports);
tslib_1.__exportStar(__webpack_require__(113), exports);
tslib_1.__exportStar(__webpack_require__(32), exports);
tslib_1.__exportStar(__webpack_require__(128), exports);
tslib_1.__exportStar(__webpack_require__(11), exports);
tslib_1.__exportStar(__webpack_require__(133), exports);
tslib_1.__exportStar(__webpack_require__(134), exports);
tslib_1.__exportStar(__webpack_require__(135), exports);
tslib_1.__exportStar(__webpack_require__(136), exports);
tslib_1.__exportStar(__webpack_require__(137), exports);
tslib_1.__exportStar(__webpack_require__(138), exports);
tslib_1.__exportStar(__webpack_require__(38), exports);
tslib_1.__exportStar(__webpack_require__(139), exports);
tslib_1.__exportStar(__webpack_require__(43), exports);
tslib_1.__exportStar(__webpack_require__(140), exports);
tslib_1.__exportStar(__webpack_require__(26), exports);
tslib_1.__exportStar(__webpack_require__(37), exports);
tslib_1.__exportStar(__webpack_require__(44), exports);
tslib_1.__exportStar(__webpack_require__(141), exports);
tslib_1.__exportStar(__webpack_require__(142), exports);
tslib_1.__exportStar(__webpack_require__(31), exports);
tslib_1.__exportStar(__webpack_require__(29), exports);
tslib_1.__exportStar(__webpack_require__(143), exports);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dom = void 0;
var consts = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var helpers_2 = __webpack_require__(48);
var Dom = (function () {
    function Dom() {
    }
    Dom.detach = function (node) {
        while (node.firstChild) {
            node.removeChild(node.firstChild);
        }
    };
    Dom.wrapInline = function (current, tag, editor) {
        var tmp, first = current, last = current;
        var selInfo = editor.s.save();
        var needFindNext = false;
        do {
            needFindNext = false;
            tmp = first.previousSibling;
            if (tmp && !Dom.isBlock(tmp, editor.ew)) {
                needFindNext = true;
                first = tmp;
            }
        } while (needFindNext);
        do {
            needFindNext = false;
            tmp = last.nextSibling;
            if (tmp && !Dom.isBlock(tmp, editor.ew)) {
                needFindNext = true;
                last = tmp;
            }
        } while (needFindNext);
        var wrapper = helpers_1.isString(tag) ? editor.createInside.element(tag) : tag;
        if (first.parentNode) {
            first.parentNode.insertBefore(wrapper, first);
        }
        var next = first;
        while (next) {
            next = first.nextSibling;
            wrapper.appendChild(first);
            if (first === last || !next) {
                break;
            }
            first = next;
        }
        editor.s.restore(selInfo);
        return wrapper;
    };
    Dom.wrap = function (current, tag, editor) {
        var selInfo = editor.s.save();
        var wrapper = helpers_1.isString(tag) ? editor.createInside.element(tag) : tag;
        if (!current.parentNode) {
            return null;
        }
        current.parentNode.insertBefore(wrapper, current);
        wrapper.appendChild(current);
        editor.s.restore(selInfo);
        return wrapper;
    };
    Dom.unwrap = function (node) {
        var parent = node.parentNode;
        if (parent) {
            while (node.firstChild) {
                parent.insertBefore(node.firstChild, node);
            }
            Dom.safeRemove(node);
        }
    };
    Dom.each = function (elm, callback) {
        var node = elm.firstChild;
        if (node) {
            while (node) {
                var next = Dom.next(node, Boolean, elm);
                if (callback(node) === false) {
                    return false;
                }
                if (node.parentNode && !Dom.each(node, callback)) {
                    return false;
                }
                node = next;
            }
        }
        return true;
    };
    Dom.replace = function (elm, newTagName, create, withAttributes, notMoveContent) {
        if (withAttributes === void 0) { withAttributes = false; }
        if (notMoveContent === void 0) { notMoveContent = false; }
        var tag = helpers_1.isString(newTagName)
            ? create.element(newTagName)
            : newTagName;
        if (!notMoveContent) {
            while (elm.firstChild) {
                tag.appendChild(elm.firstChild);
            }
        }
        if (withAttributes) {
            Array.from(elm.attributes).forEach(function (attr) {
                tag.setAttribute(attr.name, attr.value);
            });
        }
        if (elm.parentNode) {
            elm.parentNode.replaceChild(tag, elm);
        }
        return tag;
    };
    Dom.isEmptyTextNode = function (node) {
        return (Dom.isText(node) &&
            (!node.nodeValue ||
                node.nodeValue.replace(consts.INVISIBLE_SPACE_REG_EXP(), '')
                    .length === 0));
    };
    Dom.isEmpty = function (node, condNoEmptyElement) {
        if (condNoEmptyElement === void 0) { condNoEmptyElement = /^(img|svg|canvas|input|textarea|form)$/; }
        if (!node) {
            return true;
        }
        if (Dom.isText(node)) {
            return node.nodeValue === null || helpers_1.trim(node.nodeValue).length === 0;
        }
        return (!condNoEmptyElement.test(node.nodeName.toLowerCase()) &&
            Dom.each(node, function (elm) {
                if ((Dom.isText(elm) &&
                    elm.nodeValue !== null &&
                    helpers_1.trim(elm.nodeValue).length !== 0) ||
                    (Dom.isElement(elm) &&
                        condNoEmptyElement.test(elm.nodeName.toLowerCase()))) {
                    return false;
                }
            }));
    };
    Dom.isNode = function (object, win) {
        if (!object) {
            return false;
        }
        if (typeof win === 'object' &&
            win &&
            (typeof win.Node === 'function' ||
                typeof win.Node === 'object')) {
            return object instanceof win.Node;
        }
        return false;
    };
    Dom.isCell = function (elm, win) {
        return Dom.isNode(elm, win) && /^(td|th)$/i.test(elm.nodeName);
    };
    Dom.isImage = function (elm, win) {
        return (Dom.isNode(elm, win) &&
            /^(img|svg|picture|canvas)$/i.test(elm.nodeName));
    };
    Dom.isBlock = function (node, win) {
        return (node &&
            typeof node === 'object' &&
            Dom.isNode(node, win) &&
            consts.IS_BLOCK.test(node.nodeName));
    };
    Dom.isText = function (node) {
        return Boolean(node && node.nodeType === Node.TEXT_NODE);
    };
    Dom.isElement = function (node) {
        return Boolean(node && node.nodeType === Node.ELEMENT_NODE);
    };
    Dom.isHTMLElement = function (node, win) {
        return (Dom.isNode(node, win) && node instanceof win.HTMLElement);
    };
    Dom.isInlineBlock = function (node) {
        return (Dom.isElement(node) &&
            !/^(BR|HR)$/i.test(node.tagName) &&
            ['inline', 'inline-block'].indexOf(helpers_1.css(node, 'display').toString()) !== -1);
    };
    Dom.canSplitBlock = function (node, win) {
        return (node &&
            node instanceof win.HTMLElement &&
            Dom.isBlock(node, win) &&
            !/^(TD|TH|CAPTION|FORM)$/.test(node.nodeName) &&
            node.style !== undefined &&
            !/^(fixed|absolute)/i.test(node.style.position));
    };
    Dom.prev = function (node, condition, root, withChild) {
        if (withChild === void 0) { withChild = true; }
        return Dom.find(node, condition, root, false, 'previousSibling', withChild ? 'lastChild' : false);
    };
    Dom.next = function (node, condition, root, withChild) {
        if (withChild === void 0) { withChild = true; }
        return Dom.find(node, condition, root, undefined, undefined, withChild ? 'firstChild' : false);
    };
    Dom.prevWithClass = function (node, className) {
        return Dom.prev(node, function (node) {
            return (Dom.isElement(node) && node.classList.contains(className));
        }, node.parentNode);
    };
    Dom.nextWithClass = function (node, className) {
        return Dom.next(node, function (elm) { return Dom.isElement(elm) && elm.classList.contains(className); }, node.parentNode);
    };
    Dom.find = function (node, condition, root, recurse, sibling, child) {
        if (recurse === void 0) { recurse = false; }
        if (sibling === void 0) { sibling = 'nextSibling'; }
        if (child === void 0) { child = 'firstChild'; }
        if (recurse && condition(node)) {
            return node;
        }
        var start = node, next;
        do {
            next = start[sibling];
            if (condition(next)) {
                return next ? next : null;
            }
            if (child && next && next[child]) {
                var nextOne = Dom.find(next[child], condition, next, true, sibling, child);
                if (nextOne) {
                    return nextOne;
                }
            }
            if (!next) {
                next = start.parentNode;
            }
            start = next;
        } while (start && start !== root);
        return null;
    };
    Dom.findWithCurrent = function (node, condition, root, sibling, child) {
        if (sibling === void 0) { sibling = 'nextSibling'; }
        if (child === void 0) { child = 'firstChild'; }
        var next = node;
        do {
            if (condition(next)) {
                return next || null;
            }
            if (child && next && next[child]) {
                var nextOne = Dom.findWithCurrent(next[child], condition, next, sibling, child);
                if (nextOne) {
                    return nextOne;
                }
            }
            while (next && !next[sibling] && next !== root) {
                next = next.parentNode;
            }
            if (next && next[sibling] && next !== root) {
                next = next[sibling];
            }
        } while (next && next !== root);
        return null;
    };
    Dom.getNormalSibling = function (node, left, normal) {
        if (left === void 0) { left = true; }
        if (normal === void 0) { normal = function (n) { return !Dom.isEmptyTextNode(n); }; }
        var start = helpers_2.getSibling(node, left);
        while (start && !normal(start)) {
            start = helpers_2.getSibling(start, left);
        }
        return start && normal(start) ? start : null;
    };
    Dom.up = function (node, condition, root, checkRoot) {
        if (checkRoot === void 0) { checkRoot = false; }
        var start = node;
        if (!node) {
            return null;
        }
        do {
            if (condition(start)) {
                return start;
            }
            if (start === root || !start.parentNode) {
                break;
            }
            start = start.parentNode;
        } while (start && start !== root);
        if (start === root && checkRoot && condition(start)) {
            return start;
        }
        return null;
    };
    Dom.closest = function (node, tagsOrCondition, root) {
        var condition;
        if (helpers_1.isFunction(tagsOrCondition)) {
            condition = tagsOrCondition;
        }
        else if (helpers_1.isArray(tagsOrCondition)) {
            condition = function (tag) {
                return tag &&
                    tagsOrCondition.includes(tag.nodeName.toLowerCase());
            };
        }
        else {
            condition = function (tag) {
                return tag && tagsOrCondition === tag.nodeName.toLowerCase();
            };
        }
        return Dom.up(node, condition, root);
    };
    Dom.appendChildFirst = function (root, newElement) {
        var child = root.firstChild;
        if (child) {
            if (child !== newElement) {
                root.insertBefore(newElement, child);
            }
        }
        else {
            root.appendChild(newElement);
        }
    };
    Dom.after = function (elm, newElement) {
        var parentNode = elm.parentNode;
        if (!parentNode) {
            return;
        }
        if (parentNode.lastChild === elm) {
            parentNode.appendChild(newElement);
        }
        else {
            parentNode.insertBefore(newElement, elm.nextSibling);
        }
    };
    Dom.before = function (elm, newElement) {
        var parentNode = elm.parentNode;
        if (!parentNode) {
            return;
        }
        parentNode.insertBefore(newElement, elm);
    };
    Dom.prepend = function (root, newElement) {
        root.insertBefore(newElement, root.firstChild);
    };
    Dom.append = function (root, newElement) {
        root.appendChild(newElement);
    };
    Dom.moveContent = function (from, to, inStart) {
        if (inStart === void 0) { inStart = false; }
        var fragment = (from.ownerDocument || document).createDocumentFragment();
        Array.from(from.childNodes).forEach(function (node) {
            fragment.appendChild(node);
        });
        if (!inStart || !to.firstChild) {
            to.appendChild(fragment);
        }
        else {
            to.insertBefore(fragment, to.firstChild);
        }
    };
    Dom.all = function (node, condition, prev) {
        if (prev === void 0) { prev = false; }
        var nodes = node.childNodes ? Array.from(node.childNodes) : [];
        if (condition(node)) {
            return node;
        }
        if (prev) {
            nodes = nodes.reverse();
        }
        nodes.forEach(function (child) {
            Dom.all(child, condition, prev);
        });
        return null;
    };
    Dom.isOrContains = function (root, child, onlyContains) {
        if (onlyContains === void 0) { onlyContains = false; }
        if (root === child) {
            return !onlyContains;
        }
        return Boolean(child && root && this.up(child, function (nd) { return nd === root; }, root, true));
    };
    Dom.safeRemove = function (node) {
        node && node.parentNode && node.parentNode.removeChild(node);
    };
    Dom.hide = function (node) {
        if (!node) {
            return;
        }
        helpers_1.dataBind(node, '__old_display', node.style.display);
        node.style.display = 'none';
    };
    Dom.show = function (node) {
        if (!node) {
            return;
        }
        var display = helpers_1.dataBind(node, '__old_display');
        if (node.style.display === 'none') {
            node.style.display = display || '';
        }
    };
    Dom.isTag = function (node, tagNames) {
        var tags = helpers_1.asArray(tagNames).map(String);
        for (var i = 0; i < tags.length; i += 1) {
            if (this.isElement(node) &&
                node.tagName.toLowerCase() === tags[i].toLowerCase()) {
                return true;
            }
        }
        return false;
    };
    Dom.findInline = function (node, toLeft, root) {
        var prevElement = node, nextElement = null;
        do {
            if (prevElement) {
                nextElement = toLeft
                    ? prevElement.previousSibling
                    : prevElement.nextSibling;
                if (!nextElement &&
                    prevElement.parentNode &&
                    prevElement.parentNode !== root &&
                    Dom.isInlineBlock(prevElement.parentNode)) {
                    prevElement = prevElement.parentNode;
                }
                else {
                    break;
                }
            }
            else {
                break;
            }
        } while (!nextElement);
        while (nextElement &&
            Dom.isInlineBlock(nextElement) &&
            (!toLeft ? nextElement.firstChild : nextElement.lastChild)) {
            nextElement = !toLeft
                ? nextElement.firstChild
                : nextElement.lastChild;
        }
        return nextElement;
    };
    return Dom;
}());
exports.Dom = Dom;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BASE_PATH = exports.KEY_ALIASES = exports.IS_MAC = exports.SAFE_COUNT_CHANGE_CALL = exports.INSERT_ONLY_TEXT = exports.INSERT_AS_TEXT = exports.INSERT_CLEAR_HTML = exports.INSERT_AS_HTML = exports.EMULATE_DBLCLICK_TIMEOUT = exports.MARKER_CLASS = exports.TEXT_HTML = exports.TEXT_PLAIN = exports.URL_LIST = exports.IS_IE = exports.MODE_SPLIT = exports.MODE_SOURCE = exports.MODE_WYSIWYG = exports.PARAGRAPH = exports.BR = exports.COMMAND_KEYS = exports.ACCURACY = exports.NEARBY = exports.KEY_F3 = exports.KEY_DELETE = exports.KEY_DOWN = exports.KEY_RIGHT = exports.KEY_UP = exports.KEY_LEFT = exports.KEY_ESC = exports.KEY_ENTER = exports.KEY_TAB = exports.KEY_BACKSPACE = exports.MAY_BE_REMOVED_WITH_KEY = exports.INSEPARABLE_TAGS = exports.IS_INLINE = exports.IS_BLOCK = exports.SPACE_REG_EXP_END = exports.SPACE_REG_EXP_START = exports.SPACE_REG_EXP = exports.INVISIBLE_SPACE_REG_EXP_START = exports.INVISIBLE_SPACE_REG_EXP_END = exports.INVISIBLE_SPACE_REG_EXP = exports.INVISIBLE_SPACE = void 0;
exports.INVISIBLE_SPACE = '\uFEFF';
exports.INVISIBLE_SPACE_REG_EXP = function () { return /[\uFEFF]/g; };
exports.INVISIBLE_SPACE_REG_EXP_END = function () { return /[\uFEFF]+$/g; };
exports.INVISIBLE_SPACE_REG_EXP_START = function () { return /^[\uFEFF]+/g; };
exports.SPACE_REG_EXP = function () { return /[\s\n\t\r\uFEFF\u200b]+/g; };
exports.SPACE_REG_EXP_START = function () { return /^[\s\n\t\r\uFEFF\u200b]+/g; };
exports.SPACE_REG_EXP_END = function () { return /[\s\n\t\r\uFEFF\u200b]+$/g; };
exports.IS_BLOCK = /^(SCRIPT|IFRAME|JODIT|JODIT-MEDIA|PRE|DIV|P|LI|UL|OL|H[1-6]|BLOCKQUOTE|TD|TH|TABLE|BODY|HTML|FIGCAPTION|FIGURE|DT|DD)$/i;
exports.IS_INLINE = /^(STRONG|SPAN|I|EM|B|SUP|SUB)$/i;
exports.INSEPARABLE_TAGS = [
    'img',
    'br',
    'iframe',
    'script',
    'input',
    'textarea',
    'hr',
    'jodit',
    'jodit-media'
];
exports.MAY_BE_REMOVED_WITH_KEY = RegExp("^" + exports.INSEPARABLE_TAGS.join('|') + "$", 'i');
exports.KEY_BACKSPACE = 'Backspace';
exports.KEY_TAB = 'Tab';
exports.KEY_ENTER = 'Enter';
exports.KEY_ESC = 'Escape';
exports.KEY_LEFT = 'ArrowLeft';
exports.KEY_UP = 'ArrowUp';
exports.KEY_RIGHT = 'ArrowRight';
exports.KEY_DOWN = 'ArrowDown';
exports.KEY_DELETE = 'Delete';
exports.KEY_F3 = 'F3';
exports.NEARBY = 5;
exports.ACCURACY = 10;
exports.COMMAND_KEYS = [
    exports.KEY_BACKSPACE,
    exports.KEY_DELETE,
    exports.KEY_UP,
    exports.KEY_DOWN,
    exports.KEY_RIGHT,
    exports.KEY_LEFT,
    exports.KEY_ENTER,
    exports.KEY_ESC,
    exports.KEY_F3,
    exports.KEY_TAB
];
exports.BR = 'br';
exports.PARAGRAPH = 'p';
exports.MODE_WYSIWYG = 1;
exports.MODE_SOURCE = 2;
exports.MODE_SPLIT = 3;
exports.IS_IE = typeof navigator !== 'undefined' &&
    (navigator.userAgent.indexOf('MSIE') !== -1 ||
        /rv:11.0/i.test(navigator.userAgent));
exports.URL_LIST = exports.IS_IE ? 'url' : 'text/uri-list';
exports.TEXT_PLAIN = exports.IS_IE ? 'text' : 'text/plain';
exports.TEXT_HTML = exports.IS_IE ? 'text' : 'text/html';
exports.MARKER_CLASS = 'jodit-selection_marker';
exports.EMULATE_DBLCLICK_TIMEOUT = 300;
exports.INSERT_AS_HTML = 'insert_as_html';
exports.INSERT_CLEAR_HTML = 'insert_clear_html';
exports.INSERT_AS_TEXT = 'insert_as_text';
exports.INSERT_ONLY_TEXT = 'insert_only_text';
exports.SAFE_COUNT_CHANGE_CALL = 10;
exports.IS_MAC = typeof window !== 'undefined' &&
    /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
exports.KEY_ALIASES = {
    add: '+',
    break: 'pause',
    cmd: 'meta',
    command: 'meta',
    ctl: 'control',
    ctrl: 'control',
    del: 'delete',
    down: 'arrowdown',
    esc: 'escape',
    ins: 'insert',
    left: 'arrowleft',
    mod: exports.IS_MAC ? 'meta' : 'control',
    opt: 'alt',
    option: 'alt',
    return: 'enter',
    right: 'arrowright',
    space: ' ',
    spacebar: ' ',
    up: 'arrowup',
    win: 'meta',
    windows: 'meta'
};
exports.BASE_PATH = (function () {
    if (typeof document === 'undefined') {
        return '';
    }
    var script = document.currentScript, removeScriptName = function (s) { return s.replace(/\/[^\/]+.js$/, '/'); };
    if (script) {
        return removeScriptName(script.src);
    }
    var scripts = document.querySelectorAll('script[src]');
    if (scripts && scripts.length) {
        return removeScriptName(scripts[scripts.length - 1].src);
    }
    return window.location.href;
})();


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.configFactory = exports.OptionsDefault = exports.Config = void 0;
var tslib_1 = __webpack_require__(0);
var consts = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var widget_1 = __webpack_require__(18);
var Config = (function () {
    function Config() {
        this.iframe = false;
        this.license = '';
        this.preset = 'custom';
        this.presets = {
            inline: {
                inline: true,
                toolbar: false,
                toolbarInline: true,
                toolbarInlineForSelection: true,
                showXPathInStatusbar: false,
                showCharsCounter: false,
                showWordsCounter: false,
                showPlaceholder: false
            }
        };
        this.ownerDocument = (typeof document !== 'undefined'
            ? document
            : null);
        this.ownerWindow = (typeof window !== 'undefined'
            ? window
            : null);
        this.shadowRoot = null;
        this.zIndex = 0;
        this.readonly = false;
        this.disabled = false;
        this.activeButtonsInReadOnly = [
            'source',
            'fullsize',
            'print',
            'about',
            'dots',
            'selectall'
        ];
        this.toolbarButtonSize = 'middle';
        this.allowTabNavigation = false;
        this.inline = false;
        this.theme = 'default';
        this.saveModeInStorage = false;
        this.saveHeightInStorage = false;
        this.spellcheck = true;
        this.editorCssClass = false;
        this.style = false;
        this.triggerChangeEvent = true;
        this.width = 'auto';
        this.minWidth = '200px';
        this.maxWidth = '100%';
        this.height = 'auto';
        this.minHeight = 200;
        this.direction = '';
        this.language = 'auto';
        this.debugLanguage = false;
        this.i18n = false;
        this.tabIndex = -1;
        this.toolbar = true;
        this.showTooltip = true;
        this.showTooltipDelay = 1000;
        this.useNativeTooltip = false;
        this.enter = consts.PARAGRAPH;
        this.enterBlock = this.enter !== 'br' ? this.enter : consts.PARAGRAPH;
        this.defaultMode = consts.MODE_WYSIWYG;
        this.useSplitMode = false;
        this.colors = {
            greyscale: [
                '#000000',
                '#434343',
                '#666666',
                '#999999',
                '#B7B7B7',
                '#CCCCCC',
                '#D9D9D9',
                '#EFEFEF',
                '#F3F3F3',
                '#FFFFFF'
            ],
            palette: [
                '#980000',
                '#FF0000',
                '#FF9900',
                '#FFFF00',
                '#00F0F0',
                '#00FFFF',
                '#4A86E8',
                '#0000FF',
                '#9900FF',
                '#FF00FF'
            ],
            full: [
                '#E6B8AF',
                '#F4CCCC',
                '#FCE5CD',
                '#FFF2CC',
                '#D9EAD3',
                '#D0E0E3',
                '#C9DAF8',
                '#CFE2F3',
                '#D9D2E9',
                '#EAD1DC',
                '#DD7E6B',
                '#EA9999',
                '#F9CB9C',
                '#FFE599',
                '#B6D7A8',
                '#A2C4C9',
                '#A4C2F4',
                '#9FC5E8',
                '#B4A7D6',
                '#D5A6BD',
                '#CC4125',
                '#E06666',
                '#F6B26B',
                '#FFD966',
                '#93C47D',
                '#76A5AF',
                '#6D9EEB',
                '#6FA8DC',
                '#8E7CC3',
                '#C27BA0',
                '#A61C00',
                '#CC0000',
                '#E69138',
                '#F1C232',
                '#6AA84F',
                '#45818E',
                '#3C78D8',
                '#3D85C6',
                '#674EA7',
                '#A64D79',
                '#85200C',
                '#990000',
                '#B45F06',
                '#BF9000',
                '#38761D',
                '#134F5C',
                '#1155CC',
                '#0B5394',
                '#351C75',
                '#733554',
                '#5B0F00',
                '#660000',
                '#783F04',
                '#7F6000',
                '#274E13',
                '#0C343D',
                '#1C4587',
                '#073763',
                '#20124D',
                '#4C1130'
            ]
        };
        this.colorPickerDefaultTab = 'background';
        this.imageDefaultWidth = 300;
        this.removeButtons = [];
        this.disablePlugins = [];
        this.extraPlugins = [];
        this.extraButtons = [];
        this.createAttributes = {};
        this.sizeLG = 900;
        this.sizeMD = 700;
        this.sizeSM = 400;
        this.buttons = [
            'source',
            '|',
            'bold',
            'strikethrough',
            'underline',
            'italic',
            'eraser',
            '|',
            'superscript',
            'subscript',
            '|',
            'ul',
            'ol',
            '|',
            'outdent',
            'indent',
            '|',
            'font',
            'fontsize',
            'brush',
            'paragraph',
            '|',
            'image',
            'file',
            'video',
            'table',
            'link',
            '|',
            'align',
            'undo',
            'redo',
            '\n',
            'selectall',
            'cut',
            'copy',
            'paste',
            'copyformat',
            '|',
            'hr',
            'symbol',
            'fullsize',
            'print',
            'about'
        ];
        this.buttonsMD = [
            'source',
            '|',
            'bold',
            'italic',
            '|',
            'ul',
            'ol',
            'eraser',
            '|',
            'font',
            'fontsize',
            'brush',
            'paragraph',
            '|',
            'image',
            'table',
            'link',
            '|',
            'align',
            '\n',
            'undo',
            'redo',
            '|',
            'hr',
            'copyformat',
            'fullsize',
            'dots'
        ];
        this.buttonsSM = [
            'source',
            '|',
            'bold',
            'italic',
            '|',
            'ul',
            'ol',
            'eraser',
            '|',
            'fontsize',
            'brush',
            'paragraph',
            '|',
            'image',
            'table',
            '\n',
            'link',
            '|',
            'align',
            '|',
            'undo',
            'redo',
            '|',
            'copyformat',
            'fullsize',
            'dots'
        ];
        this.buttonsXS = [
            'bold',
            'image',
            '|',
            'brush',
            'paragraph',
            'eraser',
            '\n',
            'align',
            '|',
            'undo',
            'redo',
            '|',
            'dots'
        ];
        this.events = {};
        this.textIcons = false;
        this.showBrowserColorPicker = true;
    }
    Object.defineProperty(Config, "defaultOptions", {
        get: function () {
            if (!Config.__defaultOptions) {
                Config.__defaultOptions = new Config();
            }
            return Config.__defaultOptions;
        },
        enumerable: false,
        configurable: true
    });
    return Config;
}());
exports.Config = Config;
exports.OptionsDefault = function (options, def) {
    var _this = this;
    if (def === void 0) { def = Config.defaultOptions; }
    var self = this;
    self.plainOptions = options;
    if (options !== undefined && typeof options === 'object') {
        var extendKey_1 = function (opt, key) {
            if (key === 'preset') {
                if (def.presets[opt.preset] !== undefined) {
                    var preset = def.presets[opt.preset];
                    Object.keys(preset).forEach(extendKey_1.bind(_this, preset));
                }
            }
            var defValue = def[key], isObject = typeof defValue === 'object' && defValue !== null;
            if (isObject &&
                !['ownerWindow', 'ownerDocument'].includes(key) &&
                !helpers_1.isArray(defValue)) {
                self[key] = helpers_1.extend(true, {}, defValue, opt[key]);
            }
            else {
                self[key] = opt[key];
            }
        };
        Object.keys(options).forEach(extendKey_1.bind(this, options));
    }
};
Config.prototype.controls = {
    print: {
        exec: function (editor) {
            var mywindow = window.open('', 'PRINT');
            if (mywindow) {
                if (editor.o.iframe) {
                    editor.e.fire('generateDocumentStructure.iframe', mywindow.document, editor);
                    mywindow.document.body.innerHTML = editor.value;
                }
                else {
                    mywindow.document.write('<!doctype html><html lang="' +
                        helpers_1.defaultLanguage(editor.o.language) +
                        '"><head><title></title></head>' +
                        '<body>' +
                        editor.value +
                        '</body></html>');
                    mywindow.document.close();
                }
                mywindow.focus();
                mywindow.print();
                mywindow.close();
            }
        },
        mode: consts.MODE_SOURCE + consts.MODE_WYSIWYG,
        tooltip: 'Print'
    },
    hr: {
        command: 'insertHorizontalRule',
        tags: ['hr'],
        tooltip: 'Insert Horizontal Line'
    },
    image: {
        popup: function (editor, current, self, close) {
            var sourceImage = null;
            if (current &&
                !dom_1.Dom.isText(current) &&
                dom_1.Dom.isHTMLElement(current, editor.ew) &&
                (dom_1.Dom.isTag(current, 'img') || helpers_1.$$('img', current).length)) {
                sourceImage = dom_1.Dom.isTag(current, 'img')
                    ? current
                    : helpers_1.$$('img', current)[0];
            }
            var selInfo = editor.s.save();
            return widget_1.FileSelectorWidget(editor, {
                filebrowser: function (data) {
                    editor.s.restore(selInfo);
                    data.files &&
                        data.files.forEach(function (file) {
                            return editor.s.insertImage(data.baseurl + file, null, editor.o.imageDefaultWidth);
                        });
                    close();
                },
                upload: true,
                url: function (url, text) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                    var image;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                editor.s.restore(selInfo);
                                image = sourceImage || editor.createInside.element('img');
                                image.setAttribute('src', url);
                                image.setAttribute('alt', text);
                                if (!!sourceImage) return [3, 2];
                                return [4, editor.s.insertImage(image, null, editor.o.imageDefaultWidth)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                close();
                                return [2];
                        }
                    });
                }); }
            }, sourceImage, close);
        },
        tags: ['img'],
        tooltip: 'Insert Image'
    },
    file: {
        popup: function (editor, current, self, close) {
            var insert = function (url, title) {
                if (title === void 0) { title = ''; }
                editor.s.insertNode(editor.createInside.fromHTML("<a href=\"" + url + "\" title=\"" + title + "\">" + (title || url) + "</a>"));
            };
            var sourceAnchor = null;
            if (current &&
                (dom_1.Dom.isTag(current, 'a') ||
                    dom_1.Dom.closest(current, 'a', editor.editor))) {
                sourceAnchor = dom_1.Dom.isTag(current, 'a')
                    ? current
                    : dom_1.Dom.closest(current, 'a', editor.editor);
            }
            return widget_1.FileSelectorWidget(editor, {
                filebrowser: function (data) {
                    data.files &&
                        data.files.forEach(function (file) {
                            return insert(data.baseurl + file);
                        });
                    close();
                },
                upload: true,
                url: function (url, text) {
                    if (sourceAnchor) {
                        sourceAnchor.setAttribute('href', url);
                        sourceAnchor.setAttribute('title', text);
                    }
                    else {
                        insert(url, text);
                    }
                    close();
                }
            }, sourceAnchor, close, false);
        },
        tags: ['a'],
        tooltip: 'Insert file'
    },
    video: {
        popup: function (editor, current, control, close) {
            var bylink = editor.c.fromHTML("<form class=\"jodit-form\">\n\t\t\t\t\t<div class=\"jodit jodit-form__group\">\n\t\t\t\t\t\t<input class=\"jodit-input\" required name=\"code\" placeholder=\"http://\" type=\"url\"/>\n\t\t\t\t\t\t<button class=\"jodit-button\" type=\"submit\">" + editor.i18n('Insert') + "</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>"), bycode = editor.c.fromHTML("<form class=\"jodit-form\">\n\t\t\t\t\t\t\t\t\t<div class=\"jodit-form__group\">\n\t\t\t\t\t\t\t\t\t\t<textarea class=\"jodit-textarea\" required name=\"code\" placeholder=\"" + editor.i18n('Embed code') + "\"></textarea>\n\t\t\t\t\t\t\t\t\t\t<button class=\"jodit-button\" type=\"submit\">" + editor.i18n('Insert') + "</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>"), tabs = [], selinfo = editor.s.save(), insertCode = function (code) {
                editor.s.restore(selinfo);
                editor.s.insertHTML(code);
                close();
            };
            tabs.push({
                icon: 'link',
                name: 'Link',
                content: bylink
            }, {
                icon: 'source',
                name: 'Code',
                content: bycode
            });
            editor.e.on(bycode, 'submit', function (event) {
                event.preventDefault();
                if (!helpers_1.trim(helpers_1.val(bycode, 'textarea[name=code]'))) {
                    bycode.querySelector('textarea[name=code]').focus();
                    bycode.querySelector('textarea[name=code]').classList.add('jodit_error');
                    return false;
                }
                insertCode(helpers_1.val(bycode, 'textarea[name=code]'));
                return false;
            });
            editor.e.on(bylink, 'submit', function (event) {
                event.preventDefault();
                if (!helpers_1.isURL(helpers_1.val(bylink, 'input[name=code]'))) {
                    bylink.querySelector('input[name=code]').focus();
                    bylink.querySelector('input[name=code]').classList.add('jodit_error');
                    return false;
                }
                insertCode(helpers_1.convertMediaUrlToVideoEmbed(helpers_1.val(bylink, 'input[name=code]')));
                return false;
            });
            return widget_1.TabsWidget(editor, tabs);
        },
        tags: ['iframe'],
        tooltip: 'Insert youtube/vimeo video'
    }
};
function configFactory(options) {
    return new exports.OptionsDefault(options);
}
exports.configFactory = configFactory;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(81), exports);
tslib_1.__exportStar(__webpack_require__(82), exports);
tslib_1.__exportStar(__webpack_require__(83), exports);
tslib_1.__exportStar(__webpack_require__(92), exports);
tslib_1.__exportStar(__webpack_require__(28), exports);
tslib_1.__exportStar(__webpack_require__(93), exports);
tslib_1.__exportStar(__webpack_require__(94), exports);
tslib_1.__exportStar(__webpack_require__(95), exports);
tslib_1.__exportStar(__webpack_require__(96), exports);
tslib_1.__exportStar(__webpack_require__(97), exports);
tslib_1.__exportStar(__webpack_require__(98), exports);
tslib_1.__exportStar(__webpack_require__(99), exports);
tslib_1.__exportStar(__webpack_require__(41), exports);
tslib_1.__exportStar(__webpack_require__(100), exports);
tslib_1.__exportStar(__webpack_require__(21), exports);
tslib_1.__exportStar(__webpack_require__(101), exports);
tslib_1.__exportStar(__webpack_require__(102), exports);
tslib_1.__exportStar(__webpack_require__(103), exports);
tslib_1.__exportStar(__webpack_require__(42), exports);
tslib_1.__exportStar(__webpack_require__(104), exports);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = void 0;
var tslib_1 = __webpack_require__(0);
var autobind_decorator_1 = __webpack_require__(10);
var component_1 = __webpack_require__(7);
var Plugin = (function (_super) {
    tslib_1.__extends(Plugin, _super);
    function Plugin(jodit) {
        var _this = _super.call(this, jodit) || this;
        jodit.e
            .on('afterInit', _this.afterInit.bind(_this, jodit))
            .on('beforeDestruct', _this.destruct);
        _this.setStatus(component_1.STATUSES.ready);
        return _this;
    }
    Plugin.prototype.init = function (jodit) {
    };
    Plugin.prototype.destruct = function () {
        var _a, _b;
        if (!this.isInDestruct) {
            this.setStatus(component_1.STATUSES.beforeDestruct);
            (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.off('beforeDestruct', this.destruct);
            this.beforeDestruct(this.j);
            _super.prototype.destruct.call(this);
        }
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Plugin.prototype, "destruct", null);
    return Plugin;
}(component_1.ViewComponent));
exports.Plugin = Plugin;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(45), exports);
tslib_1.__exportStar(__webpack_require__(46), exports);
tslib_1.__exportStar(__webpack_require__(47), exports);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(22), exports);
tslib_1.__exportStar(__webpack_require__(16), exports);
tslib_1.__exportStar(__webpack_require__(23), exports);
tslib_1.__exportStar(__webpack_require__(51), exports);
tslib_1.__exportStar(__webpack_require__(52), exports);
tslib_1.__exportStar(__webpack_require__(154), exports);
tslib_1.__exportStar(__webpack_require__(33), exports);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helpers = void 0;
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(20), exports);
var ajax_1 = __webpack_require__(34);
Object.defineProperty(exports, "Ajax", { enumerable: true, get: function () { return ajax_1.Ajax; } });
var component_1 = __webpack_require__(7);
Object.defineProperty(exports, "Component", { enumerable: true, get: function () { return component_1.Component; } });
Object.defineProperty(exports, "ViewComponent", { enumerable: true, get: function () { return component_1.ViewComponent; } });
Object.defineProperty(exports, "STATUSES", { enumerable: true, get: function () { return component_1.STATUSES; } });
var context_menu_1 = __webpack_require__(53);
Object.defineProperty(exports, "ContextMenu", { enumerable: true, get: function () { return context_menu_1.ContextMenu; } });
var dialog_1 = __webpack_require__(14);
Object.defineProperty(exports, "Alert", { enumerable: true, get: function () { return dialog_1.Alert; } });
Object.defineProperty(exports, "Confirm", { enumerable: true, get: function () { return dialog_1.Confirm; } });
Object.defineProperty(exports, "Prompt", { enumerable: true, get: function () { return dialog_1.Prompt; } });
Object.defineProperty(exports, "Dialog", { enumerable: true, get: function () { return dialog_1.Dialog; } });
var dom_1 = __webpack_require__(2);
Object.defineProperty(exports, "Dom", { enumerable: true, get: function () { return dom_1.Dom; } });
var plugin_1 = __webpack_require__(6);
Object.defineProperty(exports, "Plugin", { enumerable: true, get: function () { return plugin_1.Plugin; } });
var create_1 = __webpack_require__(172);
Object.defineProperty(exports, "Create", { enumerable: true, get: function () { return create_1.Create; } });
tslib_1.__exportStar(__webpack_require__(8), exports);
var view_1 = __webpack_require__(54);
Object.defineProperty(exports, "View", { enumerable: true, get: function () { return view_1.View; } });
var view_with_toolbar_1 = __webpack_require__(25);
Object.defineProperty(exports, "ViewWithToolbar", { enumerable: true, get: function () { return view_with_toolbar_1.ViewWithToolbar; } });
var file_browser_1 = __webpack_require__(173);
Object.defineProperty(exports, "FileBrowser", { enumerable: true, get: function () { return file_browser_1.FileBrowser; } });
var Helpers = __webpack_require__(1);
exports.Helpers = Helpers;
var image_editor_1 = __webpack_require__(181);
Object.defineProperty(exports, "ImageEditor", { enumerable: true, get: function () { return image_editor_1.ImageEditor; } });
var observer_1 = __webpack_require__(184);
Object.defineProperty(exports, "Observer", { enumerable: true, get: function () { return observer_1.Observer; } });
var progress_bar_1 = __webpack_require__(187);
Object.defineProperty(exports, "ProgressBar", { enumerable: true, get: function () { return progress_bar_1.ProgressBar; } });
var selection_1 = __webpack_require__(189);
Object.defineProperty(exports, "Select", { enumerable: true, get: function () { return selection_1.Select; } });
Object.defineProperty(exports, "Style", { enumerable: true, get: function () { return selection_1.Style; } });
var snapshot_1 = __webpack_require__(62);
Object.defineProperty(exports, "Snapshot", { enumerable: true, get: function () { return snapshot_1.Snapshot; } });
var status_bar_1 = __webpack_require__(192);
Object.defineProperty(exports, "StatusBar", { enumerable: true, get: function () { return status_bar_1.StatusBar; } });
var table_1 = __webpack_require__(194);
Object.defineProperty(exports, "Table", { enumerable: true, get: function () { return table_1.Table; } });
var icon_1 = __webpack_require__(33);
Object.defineProperty(exports, "Icon", { enumerable: true, get: function () { return icon_1.Icon; } });
var editor_collection_1 = __webpack_require__(57);
Object.defineProperty(exports, "ToolbarEditorCollection", { enumerable: true, get: function () { return editor_collection_1.ToolbarEditorCollection; } });
var collection_1 = __webpack_require__(36);
Object.defineProperty(exports, "ToolbarCollection", { enumerable: true, get: function () { return collection_1.ToolbarCollection; } });
tslib_1.__exportStar(__webpack_require__(195), exports);
var uploader_1 = __webpack_require__(196);
Object.defineProperty(exports, "Uploader", { enumerable: true, get: function () { return uploader_1.Uploader; } });
var plugin_system_1 = __webpack_require__(39);
Object.defineProperty(exports, "PluginSystem", { enumerable: true, get: function () { return plugin_system_1.PluginSystem; } });


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boundMethod", function() { return boundMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boundClass", function() { return boundClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return autobind; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Return a descriptor removing the value and returning a getter
 * The getter will return a .bind version of the function
 * and memoize the result against a symbol on the instance
 */
function boundMethod(target, key, descriptor) {
  var fn = descriptor.value;

  if (typeof fn !== 'function') {
    throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof(fn)));
  } // In IE11 calling Object.defineProperty has a side-effect of evaluating the
  // getter for the property which is being replaced. This causes infinite
  // recursion and an "Out of stack space" error.


  var definingProperty = false;
  return {
    configurable: true,
    get: function get() {
      // eslint-disable-next-line no-prototype-builtins
      if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== 'function') {
        return fn;
      }

      var boundFn = fn.bind(this);
      definingProperty = true;
      Object.defineProperty(this, key, {
        configurable: true,
        get: function get() {
          return boundFn;
        },
        set: function set(value) {
          fn = value;
          delete this[key];
        }
      });
      definingProperty = false;
      return boundFn;
    },
    set: function set(value) {
      fn = value;
    }
  };
}
/**
 * Use boundMethod to bind all methods on the target.prototype
 */

function boundClass(target) {
  // (Using reflect to get all keys including symbols)
  var keys; // Use Reflect if exists

  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
    keys = Reflect.ownKeys(target.prototype);
  } else {
    keys = Object.getOwnPropertyNames(target.prototype); // Use symbols if support is provided

    if (typeof Object.getOwnPropertySymbols === 'function') {
      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
    }
  }

  keys.forEach(function (key) {
    // Ignore special case target method
    if (key === 'constructor') {
      return;
    }

    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key); // Only methods need binding

    if (typeof descriptor.value === 'function') {
      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
    }
  });
  return target;
}
function autobind() {
  if (arguments.length === 1) {
    return boundClass.apply(void 0, arguments);
  }

  return boundMethod.apply(void 0, arguments);
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(84), exports);
tslib_1.__exportStar(__webpack_require__(85), exports);
tslib_1.__exportStar(__webpack_require__(86), exports);
tslib_1.__exportStar(__webpack_require__(87), exports);
tslib_1.__exportStar(__webpack_require__(88), exports);
tslib_1.__exportStar(__webpack_require__(89), exports);


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventEmitter = exports.getContainer = exports.lang = exports.modules = exports.pluginSystem = exports.uniqueUid = exports.instances = void 0;
var plugin_system_1 = __webpack_require__(39);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var events_1 = __webpack_require__(20);
exports.instances = {};
var counter = 1;
function uniqueUid() {
    counter += 10 * (Math.random() + 1);
    return Math.round(counter).toString(16);
}
exports.uniqueUid = uniqueUid;
exports.pluginSystem = new plugin_system_1.PluginSystem();
exports.modules = {};
exports.lang = {};
var boxes = new WeakMap();
function getContainer(jodit, classFunc, tag, inside) {
    if (tag === void 0) { tag = 'div'; }
    if (inside === void 0) { inside = false; }
    var name = helpers_1.getClassName(classFunc.prototype);
    var data = boxes.get(jodit) || {};
    if (!data[name]) {
        var view = helpers_1.isViewObject(jodit) ? jodit : jodit.j;
        var c = view.c, body = jodit.od.body;
        if (inside && helpers_1.isJoditObject(jodit) && jodit.od !== jodit.ed) {
            c = jodit.createInside;
            body = tag === 'style' ? jodit.ed.head : jodit.ed.body;
        }
        var box_1 = c.element(tag, {
            className: "jodit jodit-" + helpers_1.kebabCase(name) + "-container jodit-box"
        });
        box_1.classList.add("jodit_theme_" + (view.o.theme || 'default'));
        body.appendChild(box_1);
        data[name] = box_1;
        jodit.hookStatus('beforeDestruct', function () {
            dom_1.Dom.safeRemove(box_1);
            delete data[name];
            if (Object.keys(data).length) {
                boxes.delete(jodit);
            }
        });
        boxes.set(jodit, data);
    }
    return data[name];
}
exports.getContainer = getContainer;
exports.eventEmitter = new events_1.EventsNative();


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(50), exports);
tslib_1.__exportStar(__webpack_require__(150), exports);
tslib_1.__exportStar(__webpack_require__(151), exports);
tslib_1.__exportStar(__webpack_require__(152), exports);
tslib_1.__exportStar(__webpack_require__(153), exports);


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var dialog_1 = __webpack_require__(24);
Object.defineProperty(exports, "Dialog", { enumerable: true, get: function () { return dialog_1.Dialog; } });
var alert_1 = __webpack_require__(169);
Object.defineProperty(exports, "Alert", { enumerable: true, get: function () { return alert_1.Alert; } });
var prompt_1 = __webpack_require__(170);
Object.defineProperty(exports, "Prompt", { enumerable: true, get: function () { return prompt_1.Prompt; } });
var confirm_1 = __webpack_require__(171);
Object.defineProperty(exports, "Confirm", { enumerable: true, get: function () { return confirm_1.Confirm; } });


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(79), exports);
tslib_1.__exportStar(__webpack_require__(80), exports);
tslib_1.__exportStar(__webpack_require__(105), exports);
tslib_1.__exportStar(__webpack_require__(106), exports);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(49), exports);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeButton = exports.makeCollection = void 0;
var helpers_1 = __webpack_require__(1);
var collection_1 = __webpack_require__(36);
var editor_collection_1 = __webpack_require__(57);
var button_1 = __webpack_require__(58);
var content_1 = __webpack_require__(59);
function makeCollection(jodit, parentElement) {
    var collection = helpers_1.isJoditObject(jodit)
        ? new editor_collection_1.ToolbarEditorCollection(jodit)
        : new collection_1.ToolbarCollection(jodit);
    if (jodit.o.textIcons) {
        collection.container.classList.add('jodit_text_icons');
    }
    if (parentElement) {
        collection.parentElement = parentElement;
    }
    if (jodit.o.toolbarButtonSize) {
        collection.buttonSize = jodit.o.toolbarButtonSize;
    }
    return collection;
}
exports.makeCollection = makeCollection;
function makeButton(jodit, control, target) {
    if (target === void 0) { target = null; }
    if (helpers_1.isFunction(control.getContent)) {
        return new content_1.ToolbarContent(jodit, control, target);
    }
    return new button_1.ToolbarButton(jodit, control, target);
}
exports.makeButton = makeButton;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(144), exports);
tslib_1.__exportStar(__webpack_require__(158), exports);
tslib_1.__exportStar(__webpack_require__(160), exports);


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ICON_LOADER = exports.ITEM_CLASS = exports.F_CLASS = void 0;
exports.F_CLASS = 'jodit-filebrowser';
exports.ITEM_CLASS = exports.F_CLASS + '__files-item';
exports.ICON_LOADER = '<i class="jodit-icon_loader"></i>';


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(90), exports);
tslib_1.__exportStar(__webpack_require__(91), exports);
tslib_1.__exportStar(__webpack_require__(40), exports);


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isString = void 0;
function isString(value) {
    return typeof value === 'string';
}
exports.isString = isString;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIElement = void 0;
var tslib_1 = __webpack_require__(0);
var component_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(15);
var UIElement = (function (_super) {
    tslib_1.__extends(UIElement, _super);
    function UIElement(jodit) {
        var _this = _super.call(this, jodit) || this;
        _this.__parentElement = null;
        _this.mods = {};
        _this.container = _this.createContainer();
        Object.defineProperty(_this.container, 'component', {
            value: _this
        });
        if (utils_1.getClassName(_this) === utils_1.getClassName(UIElement.prototype)) {
            _this.setStatus(component_1.STATUSES.ready);
        }
        return _this;
    }
    Object.defineProperty(UIElement.prototype, "parentElement", {
        get: function () {
            return this.__parentElement;
        },
        set: function (parentElement) {
            var _this = this;
            this.__parentElement = parentElement;
            if (parentElement) {
                parentElement.hookStatus('beforeDestruct', function () { return _this.destruct(); });
            }
            this.updateParentElement(this);
        },
        enumerable: false,
        configurable: true
    });
    UIElement.prototype.updateParentElement = function (target) {
        var _a;
        (_a = this.__parentElement) === null || _a === void 0 ? void 0 : _a.updateParentElement(target);
        return this;
    };
    UIElement.prototype.closest = function (type) {
        var c = typeof type === 'object'
            ? function (pe) { return pe === type; }
            : function (pe) { return pe instanceof type; };
        var pe = this.__parentElement;
        while (pe) {
            if (c(pe)) {
                return pe;
            }
            pe = pe.parentElement;
        }
        return null;
    };
    UIElement.closestElement = function (node, type) {
        var elm = dom_1.Dom.up(node, function (node) {
            if (node) {
                var component = node.component;
                return component && component instanceof type;
            }
            return false;
        });
        return elm ? elm === null || elm === void 0 ? void 0 : elm.component : null;
    };
    UIElement.prototype.setMod = function (name, value, container) {
        if (container === void 0) { container = this.container; }
        name = name.toLowerCase();
        if (this.mods[name] === value) {
            return this;
        }
        var mod = this.componentName + "_" + name, cl = container.classList;
        Array.from(cl).forEach(function (className) {
            if (className.indexOf(mod) === 0) {
                cl.remove(className);
            }
        });
        value !== null &&
            value !== '' &&
            cl.add(mod + "_" + value.toString().toLowerCase());
        this.mods[name] = value;
        return this;
    };
    UIElement.prototype.update = function () {
    };
    UIElement.prototype.appendTo = function (element) {
        element.appendChild(this.container);
        return this;
    };
    UIElement.prototype.clearName = function (name) {
        return name.replace(/[^a-zA-Z0-9]/g, '_');
    };
    UIElement.prototype.createContainer = function () {
        return this.j.c.div(this.componentName);
    };
    UIElement.prototype.destruct = function () {
        dom_1.Dom.safeRemove(this.container);
        this.parentElement = null;
        return _super.prototype.destruct.call(this);
    };
    return UIElement;
}(component_1.ViewComponent));
exports.UIElement = UIElement;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(147), exports);


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(162);
var autobind_decorator_1 = __webpack_require__(10);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var view_with_toolbar_1 = __webpack_require__(25);
var dom_1 = __webpack_require__(2);
var component_1 = __webpack_require__(7);
var global_1 = __webpack_require__(12);
config_1.Config.prototype.dialog = {
    extraButtons: [],
    resizable: true,
    draggable: true,
    buttons: ['dialog.close'],
    removeButtons: []
};
config_1.Config.prototype.controls.dialog = {
    close: {
        icon: 'cancel',
        exec: function (dialog) {
            dialog.close();
        }
    }
};
var Dialog = (function (_super) {
    tslib_1.__extends(Dialog, _super);
    function Dialog(options) {
        var _this = _super.call(this, options) || this;
        _this.destination = document.body;
        _this.destroyAfterClose = false;
        _this.moved = false;
        _this.iSetMaximization = false;
        _this.resizable = false;
        _this.draggable = false;
        _this.startX = 0;
        _this.startY = 0;
        _this.startPoint = { x: 0, y: 0, w: 0, h: 0 };
        _this.lockSelect = function () {
            _this.container.classList.add('jodit-dialog__box-moved');
        };
        _this.unlockSelect = function () {
            _this.container.classList.remove('jodit-dialog__box-moved');
        };
        _this.onResize = function () {
            if (_this.options &&
                _this.o.resizable &&
                !_this.moved &&
                _this.isOpened &&
                !_this.offsetX &&
                !_this.offsetY) {
                _this.setPosition();
            }
        };
        _this.isOpened = false;
        var self = _this;
        self.options = new config_1.OptionsDefault(helpers_1.extend(true, {
            toolbarButtonSize: 'middle'
        }, config_1.Config.prototype.dialog, options));
        dom_1.Dom.safeRemove(self.container);
        self.container = _this.c.fromHTML('<div style="z-index:' +
            self.o.zIndex +
            '" class="jodit jodit-dialog__box">' +
            '<div class="jodit-dialog__overlay"></div>' +
            '<div class="jodit-dialog">' +
            '<div class="jodit-dialog__header non-selected">' +
            '<div class="jodit-dialog__header-title"></div>' +
            '<div class="jodit-dialog__header-toolbar"></div>' +
            '</div>' +
            '<div class="jodit-dialog__content"></div>' +
            '<div class="jodit-dialog__footer"></div>' +
            (self.o.resizable
                ? '<div class="jodit-dialog__resizer"></div>'
                : '') +
            '</div>' +
            '</div>');
        helpers_1.attr(self.container, 'role', 'dialog');
        Object.defineProperty(self.container, 'component', {
            value: _this
        });
        self.container.classList.add("jodit_theme_" + (_this.o.theme || 'default'));
        self.dialog = self.container.querySelector('.jodit-dialog');
        self.resizer = self.container.querySelector('.jodit-dialog__resizer');
        self.dialogbox_header = self.container.querySelector('.jodit-dialog__header>.jodit-dialog__header-title');
        self.dialogbox_content = self.container.querySelector('.jodit-dialog__content');
        self.dialogbox_footer = self.container.querySelector('.jodit-dialog__footer');
        self.dialogbox_toolbar = self.container.querySelector('.jodit-dialog__header>.jodit-dialog__header-toolbar');
        self.o.buttons &&
            self.toolbar
                .build(helpers_1.splitArray(self.o.buttons))
                .appendTo(self.dialogbox_toolbar);
        var headerBox = self.container.querySelector('.jodit-dialog__header');
        headerBox && self.e.on(headerBox, 'mousedown', self.onHeaderMouseDown);
        if (self.o.resizable) {
            self.e.on(self.resizer, 'mousedown', self.onResizerMouseDown);
        }
        var fullSize = Jodit.plugins.get('fullsize');
        helpers_1.isFunction(fullSize) && fullSize(self);
        self.setStatus(component_1.STATUSES.ready);
        _this.e
            .on(_this.ow, 'keydown', _this.onEsc)
            .on(_this.ow, 'resize', _this.onResize);
        return _this;
    }
    Dialog.prototype.setElements = function (root, elements) {
        var _this = this;
        var elements_list = [];
        helpers_1.asArray(elements).forEach(function (elm) {
            if (helpers_1.isArray(elm)) {
                var div = _this.c.div('jodit-dialog__column');
                elements_list.push(div);
                root.appendChild(div);
                return _this.setElements(div, elm);
            }
            var element;
            if (helpers_1.isString(elm)) {
                element = _this.c.fromHTML(elm);
            }
            else {
                element = helpers_1.hasContainer(elm) ? elm.container : elm;
            }
            elements_list.push(element);
            if (element.parentNode !== root) {
                root.appendChild(element);
            }
        });
        Array.from(root.childNodes).forEach(function (elm) {
            if (elements_list.indexOf(elm) === -1) {
                root.removeChild(elm);
            }
        });
    };
    Dialog.prototype.onMouseUp = function () {
        if (this.draggable || this.resizable) {
            this.e.off(this.ow, 'mousemove', this.onMouseMove);
            this.draggable = false;
            this.resizable = false;
            this.unlockSelect();
            if (this.e) {
                this.removeGlobalListeners();
                this.e.fire(this, 'endResize endMove');
            }
        }
    };
    Dialog.prototype.onHeaderMouseDown = function (e) {
        var target = e.target;
        if (!this.o.draggable ||
            (target && target.nodeName.match(/^(INPUT|SELECT)$/))) {
            return;
        }
        this.draggable = true;
        this.startX = e.clientX;
        this.startY = e.clientY;
        this.startPoint.x = helpers_1.css(this.dialog, 'left');
        this.startPoint.y = helpers_1.css(this.dialog, 'top');
        this.setMaxZIndex();
        e.preventDefault();
        this.lockSelect();
        this.addGlobalListeners();
        if (this.e) {
            this.e.fire(this, 'startMove');
        }
    };
    Dialog.prototype.onMouseMove = function (e) {
        if (this.draggable && this.o.draggable) {
            this.setPosition(this.startPoint.x + e.clientX - this.startX, this.startPoint.y + e.clientY - this.startY);
            if (this.e) {
                this.e.fire(this, 'move', e.clientX - this.startX, e.clientY - this.startY);
            }
            e.stopImmediatePropagation();
            e.preventDefault();
        }
        if (this.resizable && this.o.resizable) {
            this.setSize(this.startPoint.w + e.clientX - this.startX, this.startPoint.h + e.clientY - this.startY);
            if (this.e) {
                this.e.fire(this, 'resizeDialog', e.clientX - this.startX, e.clientY - this.startY);
            }
            e.stopImmediatePropagation();
            e.preventDefault();
        }
    };
    Dialog.prototype.onEsc = function (e) {
        if (this.isOpened && e.key === constants_1.KEY_ESC) {
            var me = this.getMaxZIndexDialog();
            if (me) {
                me.close();
            }
            else {
                this.close();
            }
            e.stopImmediatePropagation();
        }
    };
    Dialog.prototype.onResizerMouseDown = function (e) {
        this.resizable = true;
        this.startX = e.clientX;
        this.startY = e.clientY;
        this.startPoint.w = this.dialog.offsetWidth;
        this.startPoint.h = this.dialog.offsetHeight;
        this.lockSelect();
        this.addGlobalListeners();
        if (this.e) {
            this.e.fire(this, 'startResize');
        }
    };
    Dialog.prototype.addGlobalListeners = function () {
        var self = this;
        self.e
            .on(self.ow, 'mousemove', self.onMouseMove)
            .on(self.container, 'close_dialog', self.close)
            .on(self.ow, 'mouseup', self.onMouseUp);
    };
    Dialog.prototype.removeGlobalListeners = function () {
        var self = this;
        self.e
            .off(self.ow, 'mousemove', self.onMouseMove)
            .off(self.container, 'close_dialog', self.close)
            .off(self.ow, 'mouseup', self.onMouseUp);
    };
    Dialog.prototype.setSize = function (w, h) {
        if (w) {
            helpers_1.css(this.dialog, 'width', w);
        }
        if (h) {
            helpers_1.css(this.dialog, 'height', h);
        }
        return this;
    };
    Dialog.prototype.setPosition = function (x, y) {
        var w = this.ow.innerWidth, h = this.ow.innerHeight;
        var left = w / 2 - this.dialog.offsetWidth / 2, top = h / 2 - this.dialog.offsetHeight / 2;
        if (left < 0) {
            left = 0;
        }
        if (top < 0) {
            top = 0;
        }
        if (x !== undefined && y !== undefined) {
            this.offsetX = x;
            this.offsetY = y;
            this.moved = Math.abs(x - left) > 100 || Math.abs(y - top) > 100;
        }
        this.dialog.style.left = (x || left) + 'px';
        this.dialog.style.top = (y || top) + 'px';
        return this;
    };
    Dialog.prototype.setHeader = function (content) {
        this.setElements(this.dialogbox_header, content);
        return this;
    };
    Dialog.prototype.setContent = function (content) {
        this.setElements(this.dialogbox_content, content);
        return this;
    };
    Dialog.prototype.setFooter = function (content) {
        this.setElements(this.dialogbox_footer, content);
        this.dialog.classList.toggle('jodit-dialog_footer_true', !!content);
        return this;
    };
    Dialog.prototype.getMaxZIndexDialog = function () {
        var maxZi = 0, dlg, zIndex, res = this;
        helpers_1.$$('.jodit-dialog__box', this.destination).forEach(function (dialog) {
            dlg = dialog.component;
            zIndex = parseInt(helpers_1.css(dialog, 'zIndex'), 10);
            if (dlg.isOpened && !isNaN(zIndex) && zIndex > maxZi) {
                res = dlg;
                maxZi = zIndex;
            }
        });
        return res;
    };
    Dialog.prototype.setMaxZIndex = function () {
        var maxzi = 0, zIndex = 0;
        helpers_1.$$('.jodit-dialog__box', this.destination).forEach(function (dialog) {
            zIndex = parseInt(helpers_1.css(dialog, 'zIndex'), 10);
            maxzi = Math.max(isNaN(zIndex) ? 0 : zIndex, maxzi);
        });
        this.container.style.zIndex = (maxzi + 1).toString();
    };
    Dialog.prototype.maximization = function (condition) {
        if (typeof condition !== 'boolean') {
            condition = !this.container.classList.contains('jodit-dialog__box_fullsize');
        }
        this.container.classList.toggle('jodit-dialog__box_fullsize', condition);
        [this.destination, this.destination.parentNode].forEach(function (box) {
            box &&
                box.classList &&
                box.classList.toggle('jodit-fullsize_box', condition);
        });
        this.iSetMaximization = condition;
        return condition;
    };
    Dialog.prototype.open = function (contentOrClose, titleOrModal, destroyAfterClose, modal) {
        global_1.eventEmitter.fire('closeAllPopups hideHelpers');
        if (this.e.fire(this, 'beforeOpen') === false) {
            return this;
        }
        if (helpers_1.isBoolean(contentOrClose)) {
            destroyAfterClose = contentOrClose;
        }
        if (helpers_1.isBoolean(titleOrModal)) {
            modal = titleOrModal;
        }
        this.destroyAfterClose = destroyAfterClose === true;
        var content = helpers_1.isBoolean(contentOrClose) ? undefined : contentOrClose;
        var title = helpers_1.isBoolean(titleOrModal) ? undefined : titleOrModal;
        if (title !== undefined) {
            this.setHeader(title);
        }
        if (content) {
            this.setContent(content);
        }
        this.container.classList.add('jodit-dialog_active');
        this.isOpened = true;
        this.setModal(modal);
        this.destination.appendChild(this.container);
        this.setPosition(this.offsetX, this.offsetY);
        this.setMaxZIndex();
        if (this.o.fullsize) {
            this.maximization(true);
        }
        this.e.fire('afterOpen', this);
        return this;
    };
    Dialog.prototype.setModal = function (modal) {
        this.container.classList.toggle('jodit-modal', Boolean(modal));
        return this;
    };
    Dialog.prototype.close = function (e) {
        var _a, _b, _c;
        if (this.isDestructed || !this.isOpened) {
            return this;
        }
        if (e) {
            e.stopImmediatePropagation();
            e.preventDefault();
        }
        if (this.e) {
            this.e.fire('beforeClose', this);
        }
        dom_1.Dom.safeRemove(this.container);
        (_a = this === null || this === void 0 ? void 0 : this.container) === null || _a === void 0 ? void 0 : _a.classList.remove('jodit-dialog_active');
        this.isOpened = false;
        if (this.iSetMaximization) {
            this.maximization(false);
        }
        this.removeGlobalListeners();
        if (this.destroyAfterClose) {
            this.destruct();
        }
        (_b = this.e) === null || _b === void 0 ? void 0 : _b.fire(this, 'afterClose');
        (_c = this.e) === null || _c === void 0 ? void 0 : _c.fire(this.ow, 'joditCloseDialog');
        return this;
    };
    Dialog.prototype.destruct = function () {
        if (this.isInDestruct) {
            return;
        }
        this.setStatus(component_1.STATUSES.beforeDestruct);
        if (this.isOpened) {
            this.close();
        }
        if (this.events) {
            this.removeGlobalListeners();
            this.events
                .on(this.ow, 'keydown', this.onEsc)
                .on(this.ow, 'resize', this.onResize);
        }
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "onMouseUp", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "onHeaderMouseDown", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "onMouseMove", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "onEsc", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "onResizerMouseDown", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Dialog.prototype, "close", null);
    return Dialog;
}(view_with_toolbar_1.ViewWithToolbar));
exports.Dialog = Dialog;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewWithToolbar = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(163);
var view_1 = __webpack_require__(54);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var factory_1 = __webpack_require__(17);
var component_1 = __webpack_require__(7);
var ViewWithToolbar = (function (_super) {
    tslib_1.__extends(ViewWithToolbar, _super);
    function ViewWithToolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toolbar = factory_1.makeCollection(_this);
        _this.defaultToolbarContainer = _this.c.div('jodit-toolbar__box');
        return _this;
    }
    Object.defineProperty(ViewWithToolbar.prototype, "toolbarContainer", {
        get: function () {
            if (!this.o.fullsize &&
                (helpers_1.isString(this.o.toolbar) ||
                    dom_1.Dom.isHTMLElement(this.o.toolbar, this.ow))) {
                return helpers_1.resolveElement(this.o.toolbar, this.o.shadowRoot || this.od);
            }
            this.o.toolbar &&
                dom_1.Dom.appendChildFirst(this.container, this.defaultToolbarContainer);
            return this.defaultToolbarContainer;
        },
        enumerable: false,
        configurable: true
    });
    ViewWithToolbar.prototype.setPanel = function (element) {
        this.o.toolbar = element;
        this.buildToolbar();
    };
    ViewWithToolbar.prototype.buildToolbar = function () {
        if (!this.o.toolbar) {
            return;
        }
        var buttons = this.o.buttons
            ? helpers_1.splitArray(this.o.buttons)
            : [];
        this.toolbar
            .setRemoveButtons(this.o.removeButtons)
            .build(buttons.concat(this.o.extraButtons || []))
            .appendTo(this.toolbarContainer);
    };
    ViewWithToolbar.prototype.destruct = function () {
        if (this.isDestructed) {
            return;
        }
        this.setStatus(component_1.STATUSES.beforeDestruct);
        this.toolbar.destruct();
        delete this.toolbar;
        _super.prototype.destruct.call(this);
    };
    return ViewWithToolbar;
}(view_1.View));
exports.ViewWithToolbar = ViewWithToolbar;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoditArray = void 0;
var extend_1 = __webpack_require__(27);
var JoditArray = (function () {
    function JoditArray(data) {
        var _this = this;
        extend_1.extend(true, this, data);
        Object.defineProperty(this, 'length', {
            value: data.length,
            enumerable: false,
            configurable: false
        });
        Object.defineProperty(this, 'toString', {
            value: function () {
                var out = [];
                for (var i = 0; i < _this.length; i += 1) {
                    out[i] = _this[i];
                }
                return out.toString();
            },
            enumerable: false,
            configurable: false
        });
        var proto = Array.prototype;
        [
            'map',
            'forEach',
            'reduce',
            'push',
            'pop',
            'shift',
            'unshift',
            'slice',
            'splice'
        ].forEach(function (method) {
            Object.defineProperty(_this, method, {
                value: proto[method],
                enumerable: false,
                configurable: false
            });
        });
    }
    return JoditArray;
}());
exports.JoditArray = JoditArray;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.extend = void 0;
var jodit_object_1 = __webpack_require__(37);
var jodit_array_1 = __webpack_require__(26);
var checker_1 = __webpack_require__(5);
function extend() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var length = args.length;
    var options, name, src, copy, copyIsArray, clone, target = args[0] || {}, i = 1, j, keys, deep = false;
    if (typeof target === 'boolean') {
        deep = target;
        target = args[i] || {};
        i += 1;
    }
    if (typeof target !== 'object' && checker_1.isFunction(target)) {
        target = {};
    }
    if (i === length) {
        target = this;
        i += 1;
    }
    for (i; i < length; i += 1) {
        options = args[i];
        if (options !== null && options !== undefined) {
            keys = Object.keys(options);
            for (j = 0; j < keys.length; j += 1) {
                name = keys[j];
                src = target[name];
                copy = options[name];
                if (target === copy) {
                    continue;
                }
                if (deep &&
                    copy &&
                    ((checker_1.isPlainObject(copy) && !(copy instanceof jodit_object_1.JoditObject)) ||
                        (Array.isArray(copy) && !(copy instanceof jodit_array_1.JoditArray)))) {
                    copyIsArray = Array.isArray(copy);
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    }
                    else {
                        clone = src && checker_1.isPlainObject(src) ? src : {};
                    }
                    target[name] = extend(deep, clone, copy);
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    return target;
}
exports.extend = extend;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFunction = void 0;
function isFunction(value) {
    return typeof value === 'function';
}
exports.isFunction = isFunction;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.error = exports.type = exports.hasOwn = void 0;
var class2type = {};
var toString = class2type.toString;
exports.hasOwn = class2type.hasOwnProperty;
[
    'Boolean',
    'Number',
    'String',
    'Function',
    'Array',
    'Date',
    'RegExp',
    'Object',
    'Error',
    'Symbol',
    'HTMLDocument',
    'Window',
    'HTMLElement',
    'HTMLBodyElement',
    'Text',
    'DocumentFragment',
    'DOMStringList',
    'HTMLCollection'
].forEach(function (name) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
});
exports.type = function (obj) {
    if (obj === null) {
        return 'null';
    }
    return typeof obj === 'object' || typeof obj === 'function'
        ? class2type[toString.call(obj)] || 'object'
        : typeof obj;
};
function error(message) {
    return new TypeError(message);
}
exports.error = error;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(112), exports);


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveElement = exports.cssPath = exports.refs = exports.getXPathByElement = exports.$$ = void 0;
var constants_1 = __webpack_require__(3);
var checker_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(15);
var type_1 = __webpack_require__(29);
var dom_1 = __webpack_require__(2);
var string_1 = __webpack_require__(11);
var temp = 1;
var $$temp = function () {
    temp++;
    return temp;
};
function $$(selector, root) {
    var result;
    if (/:scope/.test(selector) &&
        constants_1.IS_IE &&
        !(root && root.nodeType === Node.DOCUMENT_NODE)) {
        var id = root.id, temp_id = id ||
            '_selector_id_' + ('' + Math.random()).slice(2) + $$temp();
        selector = selector.replace(/:scope/g, '#' + temp_id);
        !id && root.setAttribute('id', temp_id);
        result = root.parentNode.querySelectorAll(selector);
        if (!id) {
            root.removeAttribute('id');
        }
    }
    else {
        result = root.querySelectorAll(selector);
    }
    return [].slice.call(result);
}
exports.$$ = $$;
exports.getXPathByElement = function (element, root) {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
        return '';
    }
    if (!element.parentNode || root === element) {
        return '';
    }
    if (element.id) {
        return "//*[@id='" + element.id + "']";
    }
    var sames = [].filter.call(element.parentNode.childNodes, function (x) { return x.nodeName === element.nodeName; });
    return (exports.getXPathByElement(element.parentNode, root) +
        '/' +
        element.nodeName.toLowerCase() +
        (sames.length > 1
            ? '[' + (Array.from(sames).indexOf(element) + 1) + ']'
            : ''));
};
exports.refs = function (root) {
    return $$('[ref],[data-ref]', root).reduce(function (def, child) {
        var key = utils_1.attr(child, '-ref');
        if (key && checker_1.isString(key)) {
            def[string_1.camelCase(key)] = child;
            def[key] = child;
        }
        return def;
    }, {});
};
exports.cssPath = function (el) {
    if (!dom_1.Dom.isElement(el)) {
        return null;
    }
    var path = [];
    var start = el;
    while (start && start.nodeType === Node.ELEMENT_NODE) {
        var selector = start.nodeName.toLowerCase();
        if (start.id) {
            selector += '#' + start.id;
            path.unshift(selector);
            break;
        }
        else {
            var sib = start, nth = 1;
            do {
                sib = sib.previousElementSibling;
                if (sib && sib.nodeName.toLowerCase() === selector) {
                    nth++;
                }
            } while (sib);
            selector += ':nth-of-type(' + nth + ')';
        }
        path.unshift(selector);
        start = start.parentNode;
    }
    return path.join(' > ');
};
function resolveElement(element, od) {
    var resolved = element;
    if (checker_1.isString(element)) {
        try {
            resolved = od.querySelector(element);
        }
        catch (_a) {
            throw type_1.error('String "' + element + '" should be valid HTML selector');
        }
    }
    if (!resolved ||
        typeof resolved !== 'object' ||
        !dom_1.Dom.isElement(resolved) ||
        !resolved.cloneNode) {
        throw type_1.error('Element "' + element + '" should be string or HTMLElement instance');
    }
    return resolved;
}
exports.resolveElement = resolveElement;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(119), exports);
tslib_1.__exportStar(__webpack_require__(120), exports);
tslib_1.__exportStar(__webpack_require__(121), exports);
tslib_1.__exportStar(__webpack_require__(122), exports);
tslib_1.__exportStar(__webpack_require__(123), exports);
tslib_1.__exportStar(__webpack_require__(124), exports);
tslib_1.__exportStar(__webpack_require__(125), exports);
tslib_1.__exportStar(__webpack_require__(126), exports);
tslib_1.__exportStar(__webpack_require__(127), exports);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIcon = exports.Icon = void 0;
var helpers_1 = __webpack_require__(1);
var Icon = (function () {
    function Icon() {
    }
    Icon.getIcon = function (name) {
        return (Icon.icons[name] ||
            Icon.icons[name.replace(/-/g, '_')] ||
            Icon.icons[name.toLowerCase()]);
    };
    Icon.exists = function (name) {
        return this.getIcon(name) !== undefined;
    };
    Icon.get = function (name, defaultValue) {
        if (defaultValue === void 0) { defaultValue = '<span></span>'; }
        return this.getIcon(name) || defaultValue;
    };
    Icon.set = function (name, value) {
        this.icons[name.replace('_', '-')] = value;
    };
    Icon.icons = {};
    return Icon;
}());
exports.Icon = Icon;
function createIcon(jodit, clearName, control) {
    var icon = control ? control.icon || control.name : clearName;
    var iconSVG = jodit.e.fire('getIcon', icon, control, clearName);
    var iconElement;
    if (control && control.iconURL && iconSVG === undefined) {
        iconElement = jodit.c.element('span');
        helpers_1.css(iconElement, 'backgroundImage', 'url(' + control.iconURL.replace('{basePath}', jodit.basePath) + ')');
    }
    else {
        if (iconSVG === undefined) {
            iconSVG = Icon.get(Icon.exists(icon) ? icon : 'empty');
        }
        iconElement = helpers_1.isString(iconSVG)
            ? jodit.c.fromHTML(helpers_1.trim(iconSVG))
            : iconSVG;
    }
    iconElement.classList.add('jodit_icon', 'jodit_icon_' + clearName);
    return iconElement;
}
exports.createIcon = createIcon;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ajax = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.defaultAjaxOptions = {
    dataType: 'json',
    method: 'GET',
    url: '',
    data: null,
    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
    headers: {
        'X-REQUESTED-WITH': 'XMLHttpRequest'
    },
    withCredentials: false,
    xhr: function () {
        return new XMLHttpRequest();
    }
};
var Ajax = (function () {
    function Ajax(jodit, options) {
        var _this = this;
        this.jodit = jodit;
        this.success_response_codes = [200, 201, 202];
        this.resolved = false;
        this.activated = false;
        this.options = helpers_1.extend(true, {}, config_1.Config.prototype.defaultAjaxOptions, options);
        if (this.o.xhr) {
            this.xhr = this.o.xhr();
        }
        jodit &&
            jodit.events &&
            jodit.e.on('beforeDestruct', function () {
                _this.abort();
            });
    }
    Ajax.prototype.__buildParams = function (obj, prefix) {
        if (helpers_1.isFunction(this.o.queryBuild)) {
            return this.o.queryBuild.call(this, obj, prefix);
        }
        if (helpers_1.isString(obj) ||
            (this.j.ow.FormData &&
                obj instanceof this.j.ow.FormData)) {
            return obj;
        }
        return helpers_1.buildQuery(obj);
    };
    Object.defineProperty(Ajax.prototype, "o", {
        get: function () {
            return this.options;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Ajax.prototype, "j", {
        get: function () {
            return this.jodit;
        },
        enumerable: false,
        configurable: true
    });
    Ajax.prototype.abort = function () {
        try {
            this.xhr.abort();
        }
        catch (_a) { }
        return this;
    };
    Ajax.prototype.send = function () {
        var _this = this;
        this.activated = true;
        return new Promise(function (resolve, reject) {
            var __parse = function (resp) {
                var result = null;
                if (_this.o.dataType === 'json') {
                    result = JSON.parse(resp);
                }
                if (!result) {
                    throw helpers_1.error('No JSON format');
                }
                return result;
            };
            _this.xhr.onabort = function () {
                reject(helpers_1.error(_this.xhr.statusText));
            };
            _this.xhr.onerror = function () {
                reject(helpers_1.error(_this.xhr.statusText));
            };
            _this.xhr.ontimeout = function () {
                reject(helpers_1.error(_this.xhr.statusText));
            };
            _this.xhr.onload = function () {
                _this.response = _this.xhr.responseText;
                _this.status = _this.xhr.status;
                _this.resolved = true;
                resolve.call(_this.xhr, __parse(_this.response) || {});
            };
            _this.xhr.onreadystatechange = function () {
                if (_this.xhr.readyState === XMLHttpRequest.DONE) {
                    var resp = _this.xhr.responseText;
                    _this.response = resp;
                    _this.status = _this.xhr.status;
                    _this.resolved = true;
                    if (_this.success_response_codes.indexOf(_this.xhr.status) > -1) {
                        resolve.call(_this.xhr, __parse(resp));
                    }
                    else {
                        reject.call(_this.xhr, helpers_1.error(_this.xhr.statusText ||
                            _this.j.i18n('Connection error!')));
                    }
                }
            };
            _this.xhr.withCredentials = _this.o.withCredentials || false;
            var _a = _this.prepareRequest(), url = _a.url, data = _a.data, method = _a.method;
            _this.xhr.open(method, url, true);
            if (_this.o.contentType && _this.xhr.setRequestHeader) {
                _this.xhr.setRequestHeader('Content-type', _this.o.contentType);
            }
            if (_this.o.headers && _this.xhr.setRequestHeader) {
                helpers_1.each(_this.o.headers, function (key, value) {
                    _this.xhr.setRequestHeader(key, value);
                });
            }
            setTimeout(function () {
                _this.xhr.send(data ? _this.__buildParams(data) : undefined);
            }, 0);
        });
    };
    Ajax.prototype.prepareRequest = function () {
        if (!this.o.url) {
            throw helpers_1.error('Need URL for AJAX request');
        }
        var url = this.o.url;
        var data = this.o.data;
        var method = (this.o.method || 'get').toLowerCase();
        if (method === 'get' && data && helpers_1.isPlainObject(data)) {
            var qIndex = url.indexOf('?');
            if (qIndex !== -1) {
                var urlData = helpers_1.parseQuery(url);
                url =
                    url.substr(0, qIndex) +
                        '?' +
                        helpers_1.buildQuery(tslib_1.__assign(tslib_1.__assign({}, urlData), data));
            }
            else {
                url += '?' + helpers_1.buildQuery(this.o.data);
            }
        }
        var request = {
            url: url,
            method: method,
            data: data
        };
        Ajax.log.splice(100);
        Ajax.log.push(request);
        return request;
    };
    Ajax.prototype.destruct = function () {
        if (this.activated && !this.resolved) {
            this.abort();
            this.resolved = true;
        }
    };
    Ajax.log = [];
    return Ajax;
}());
exports.Ajax = Ajax;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(55), exports);
tslib_1.__exportStar(__webpack_require__(56), exports);
tslib_1.__exportStar(__webpack_require__(164), exports);


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarCollection = void 0;
var tslib_1 = __webpack_require__(0);
var autobind_decorator_1 = __webpack_require__(10);
__webpack_require__(166);
var helpers_1 = __webpack_require__(1);
var ui_1 = __webpack_require__(8);
var factory_1 = __webpack_require__(17);
var component_1 = __webpack_require__(7);
var ToolbarCollection = (function (_super) {
    tslib_1.__extends(ToolbarCollection, _super);
    function ToolbarCollection(jodit) {
        var _this = _super.call(this, jodit) || this;
        _this.listenEvents = 'changeStack mousedown mouseup keydown change afterInit readonly afterResize ' +
            'selectionchange changeSelection focus afterSetMode touchstart focus blur';
        _this.update = _this.j.async.debounce(_this.immediateUpdate, _this.j.defaultTimeout);
        _this.initEvents();
        _this.setStatus(component_1.STATUSES.ready);
        return _this;
    }
    Object.defineProperty(ToolbarCollection.prototype, "firstButton", {
        get: function () {
            var button = this.buttons[0];
            return button || null;
        },
        enumerable: false,
        configurable: true
    });
    ToolbarCollection.prototype.makeButton = function (control, target) {
        if (target === void 0) { target = null; }
        return factory_1.makeButton(this.j, control, target);
    };
    ToolbarCollection.prototype.shouldBeActive = function (button) {
        if (helpers_1.isJoditObject(this.j) && !this.j.editorIsActive) {
            return false;
        }
        if (helpers_1.isFunction(button.control.isActive)) {
            return button.control.isActive(this.j, button.control, button);
        }
        return undefined;
    };
    ToolbarCollection.prototype.shouldBeDisabled = function (button) {
        if (this.j.o.disabled) {
            return true;
        }
        if (this.j.o.readonly &&
            (!this.j.o.activeButtonsInReadOnly ||
                !this.j.o.activeButtonsInReadOnly.includes(button.control.name))) {
            return true;
        }
        var isDisabled;
        if (helpers_1.isFunction(button.control.isDisabled)) {
            isDisabled = button.control.isDisabled(this.j, button.control, button);
        }
        return isDisabled;
    };
    ToolbarCollection.prototype.getTarget = function (button) {
        return button.target || null;
    };
    ToolbarCollection.prototype.immediateUpdate = function () {
        if (this.isDestructed || this.j.isLocked) {
            return;
        }
        _super.prototype.update.call(this);
        this.j.e.fire('updateToolbar');
    };
    ToolbarCollection.prototype.setDirection = function (direction) {
        this.container.style.direction = direction;
        this.container.setAttribute('dir', direction);
    };
    ToolbarCollection.prototype.initEvents = function () {
        this.j.e
            .on(this.listenEvents, this.update)
            .on('afterSetMode focus', this.immediateUpdate);
    };
    ToolbarCollection.prototype.destruct = function () {
        if (this.isDestructed) {
            return;
        }
        this.j.e
            .off(this.listenEvents, this.update)
            .off('afterSetMode focus', this.immediateUpdate);
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ToolbarCollection.prototype, "immediateUpdate", null);
    return ToolbarCollection;
}(ui_1.UIList));
exports.ToolbarCollection = ToolbarCollection;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JoditObject = void 0;
var extend_1 = __webpack_require__(27);
var JoditObject = (function () {
    function JoditObject(data) {
        extend_1.extend(true, this, data);
    }
    return JoditObject;
}());
exports.JoditObject = JoditObject;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultLanguage = void 0;
var checker_1 = __webpack_require__(5);
exports.defaultLanguage = function (language, defaultLanguage) {
    if (defaultLanguage === void 0) { defaultLanguage = 'en'; }
    if (language !== 'auto' && checker_1.isString(language)) {
        return language;
    }
    if (document.documentElement && document.documentElement.lang) {
        return document.documentElement.lang;
    }
    if (navigator.language) {
        return navigator.language.substr(0, 2);
    }
    return defaultLanguage;
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginSystem = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var PluginSystem = (function () {
    function PluginSystem() {
        this.items = new Map();
    }
    PluginSystem.prototype.add = function (name, plugin) {
        this.items.set(name.toLowerCase(), plugin);
    };
    PluginSystem.prototype.get = function (name) {
        return this.items.get(name.toLowerCase());
    };
    PluginSystem.prototype.remove = function (name) {
        this.items.delete(name.toLowerCase());
    };
    PluginSystem.prototype.init = function (jodit) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var extrasList, disableList, doneList, promiseList, plugins, pluginsMap, makeAndInit, needLoadExtras, e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        extrasList = jodit.o.extraPlugins.map(function (s) {
                            return helpers_1.isString(s) ? { name: s.toLowerCase() } : s;
                        }), disableList = helpers_1.splitArray(jodit.o.disablePlugins).map(function (s) {
                            return s.toLowerCase();
                        }), doneList = [], promiseList = {}, plugins = [], pluginsMap = {}, makeAndInit = function (plugin, name) {
                            if (disableList.includes(name) ||
                                doneList.includes(name) ||
                                promiseList[name]) {
                                return;
                            }
                            var instance = PluginSystem.makePluginInstance(jodit, plugin);
                            _this.initOrWait(jodit, name, instance, doneList, promiseList);
                            plugins.push(instance);
                            pluginsMap[name] = instance;
                        };
                        if (!(extrasList && extrasList.length)) return [3, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        needLoadExtras = extrasList.filter(function (extra) { return !_this.items.has(extra.name); });
                        if (!needLoadExtras.length) return [3, 3];
                        return [4, this.load(jodit, needLoadExtras)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3, 5];
                    case 4:
                        e_1 = _a.sent();
                        if (false) {}
                        return [3, 5];
                    case 5:
                        if (jodit.isInDestruct) {
                            return [2];
                        }
                        this.items.forEach(makeAndInit);
                        this.addListenerOnBeforeDestruct(jodit, plugins);
                        jodit.__plugins = pluginsMap;
                        return [2];
                }
            });
        });
    };
    PluginSystem.makePluginInstance = function (jodit, plugin) {
        return helpers_1.isFunction(plugin) ? new plugin(jodit) : plugin;
    };
    PluginSystem.prototype.initOrWait = function (jodit, pluginName, instance, doneList, promiseList) {
        var initPlugin = function (name, plugin) {
            if (plugin.hasStyle) {
                PluginSystem.loadStyle(jodit, name);
            }
            if (helpers_1.isInitable(plugin)) {
                var req = plugin.requires;
                if (!req ||
                    !req.length ||
                    req.every(function (name) { return doneList.includes(name); })) {
                    plugin.init(jodit);
                    doneList.push(name);
                }
                else {
                    promiseList[name] = plugin;
                    return false;
                }
            }
            else {
                doneList.push(name);
            }
            return true;
        };
        initPlugin(pluginName, instance);
        Object.keys(promiseList).forEach(function (name) {
            var plugin = promiseList[name];
            if (!plugin) {
                return;
            }
            if (initPlugin(name, instance)) {
                promiseList[name] = undefined;
                delete promiseList[name];
            }
        });
    };
    PluginSystem.prototype.addListenerOnBeforeDestruct = function (jodit, plugins) {
        jodit.e.on('beforeDestruct', function () {
            plugins.forEach(function (instance) {
                if (helpers_1.isDestructable(instance)) {
                    instance.destruct(jodit);
                }
            });
            plugins.length = 0;
            delete jodit.__plugins;
        });
    };
    PluginSystem.prototype.load = function (jodit, pluginList) {
        var reflect = function (p) {
            return p.then(function (v) { return ({ v: v, status: 'fulfilled' }); }, function (e) { return ({ e: e, status: 'rejected' }); });
        };
        return Promise.all(pluginList.map(function (extra) {
            var url = extra.url || PluginSystem.getFullUrl(jodit, name, true);
            return reflect(helpers_1.appendScriptAsync(jodit, url));
        }));
    };
    PluginSystem.loadStyle = function (jodit, pluginName) {
        return helpers_1.appendStyleAsync(jodit, PluginSystem.getFullUrl(jodit, pluginName, false));
    };
    PluginSystem.getFullUrl = function (jodit, name, js) {
        return (jodit.basePath +
            'plugins/' +
            name +
            '/' +
            name +
            '.' +
            (js ? 'js' : 'css'));
    };
    return PluginSystem;
}());
exports.PluginSystem = PluginSystem;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHandlersStore = exports.defaultNameSpace = void 0;
exports.defaultNameSpace = 'JoditEventDefaultNamespace';
var EventHandlersStore = (function () {
    function EventHandlersStore() {
        this.__store = {};
    }
    EventHandlersStore.prototype.get = function (event, namespace) {
        if (this.__store[namespace] !== undefined) {
            return this.__store[namespace][event];
        }
    };
    EventHandlersStore.prototype.indexOf = function (event, namespace, originalCallback) {
        var blocks = this.get(event, namespace);
        if (blocks) {
            for (var i = 0; i < blocks.length; i += 1) {
                if (blocks[i].originalCallback === originalCallback) {
                    return i;
                }
            }
        }
        return false;
    };
    EventHandlersStore.prototype.namespaces = function (withoutDefault) {
        if (withoutDefault === void 0) { withoutDefault = false; }
        var nss = Object.keys(this.__store);
        return withoutDefault ? nss.filter(function (ns) { return ns !== exports.defaultNameSpace; }) : nss;
    };
    EventHandlersStore.prototype.events = function (namespace) {
        return this.__store[namespace]
            ? Object.keys(this.__store[namespace])
            : [];
    };
    EventHandlersStore.prototype.set = function (event, namespace, data, onTop) {
        if (onTop === void 0) { onTop = false; }
        if (this.__store[namespace] === undefined) {
            this.__store[namespace] = {};
        }
        if (this.__store[namespace][event] === undefined) {
            this.__store[namespace][event] = [];
        }
        if (!onTop) {
            this.__store[namespace][event].push(data);
        }
        else {
            this.__store[namespace][event].unshift(data);
        }
    };
    EventHandlersStore.prototype.clear = function () {
        delete this.__store;
        this.__store = {};
    };
    return EventHandlersStore;
}());
exports.EventHandlersStore = EventHandlersStore;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNumeric = void 0;
var is_string_1 = __webpack_require__(21);
function isNumeric(value) {
    if (is_string_1.isString(value)) {
        if (!value.match(/^([+\-])?[0-9]+(\.?)([0-9]+)?(e[0-9]+)?$/)) {
            return false;
        }
        value = parseFloat(value);
    }
    return typeof value === 'number' && !isNaN(value) && isFinite(value);
}
exports.isNumeric = isNumeric;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWindow = void 0;
function isWindow(obj) {
    return obj !== null && obj === obj.window;
}
exports.isWindow = isWindow;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.completeUrl = void 0;
exports.completeUrl = function (url) {
    if (window.location.protocol === 'file:' && /^\/\//.test(url)) {
        url = 'https:' + url;
    }
    return url;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseQuery = void 0;
exports.parseQuery = function (queryString) {
    var query = {}, a = queryString.substr(1).split('&');
    for (var i = 0; i < a.length; i += 1) {
        var keyValue = a[i].split('=');
        query[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1] || '');
    }
    return query;
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATUSES = void 0;
var STATUSES;
(function (STATUSES) {
    STATUSES["beforeInit"] = "beforeInit";
    STATUSES["ready"] = "ready";
    STATUSES["beforeDestruct"] = "beforeDestruct";
    STATUSES["destructed"] = "destructed";
})(STATUSES = exports.STATUSES || (exports.STATUSES = {}));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = void 0;
var helpers_1 = __webpack_require__(1);
var global_1 = __webpack_require__(12);
var statuses_1 = __webpack_require__(45);
var Component = (function () {
    function Component() {
        this.ownerWindow = window;
        this.__componentStatus = statuses_1.STATUSES.beforeInit;
        this.componentName = 'jodit-' + helpers_1.kebabCase(helpers_1.getClassName(this));
        this.uid = 'jodit-uid-' + global_1.uniqueUid();
    }
    Object.defineProperty(Component.prototype, "ownerDocument", {
        get: function () {
            return this.ow.document;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "od", {
        get: function () {
            return this.ownerDocument;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "ow", {
        get: function () {
            return this.ownerWindow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "componentStatus", {
        get: function () {
            return this.__componentStatus;
        },
        set: function (componentStatus) {
            this.setStatus(componentStatus);
        },
        enumerable: false,
        configurable: true
    });
    Component.prototype.setStatus = function (componentStatus) {
        var _this = this;
        if (componentStatus === this.__componentStatus) {
            return;
        }
        this.__componentStatus = componentStatus;
        var cbList = this.onStatusLst && this.onStatusLst[componentStatus];
        if (cbList) {
            cbList.forEach(function (cb) { return cb(_this); });
        }
    };
    Component.prototype.get = function (chain, obj) {
        return helpers_1.get(chain, obj || this);
    };
    Object.defineProperty(Component.prototype, "isReady", {
        get: function () {
            return this.componentStatus === statuses_1.STATUSES.ready;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "isDestructed", {
        get: function () {
            return this.componentStatus === statuses_1.STATUSES.destructed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "isInDestruct", {
        get: function () {
            return (statuses_1.STATUSES.beforeDestruct === this.componentStatus ||
                statuses_1.STATUSES.destructed === this.componentStatus);
        },
        enumerable: false,
        configurable: true
    });
    Component.prototype.bindDestruct = function (jodit) {
        var _this = this;
        jodit.e.on(statuses_1.STATUSES.beforeDestruct, function () {
            !_this.isInDestruct && _this.destruct();
        });
        return this;
    };
    Component.prototype.destruct = function () {
        this.setStatus(statuses_1.STATUSES.destructed);
    };
    Component.prototype.hookStatus = function (status, callback) {
        if (!this.onStatusLst) {
            this.onStatusLst = {};
        }
        if (!this.onStatusLst[status]) {
            this.onStatusLst[status] = [];
        }
        this.onStatusLst[status].push(callback);
    };
    Component.STATUSES = statuses_1.STATUSES;
    return Component;
}());
exports.Component = Component;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewComponent = void 0;
var tslib_1 = __webpack_require__(0);
var component_1 = __webpack_require__(46);
var ViewComponent = (function (_super) {
    tslib_1.__extends(ViewComponent, _super);
    function ViewComponent(jodit) {
        var _this = _super.call(this) || this;
        _this.setParentView(jodit);
        return _this;
    }
    Object.defineProperty(ViewComponent.prototype, "defaultTimeout", {
        get: function () {
            return this.j.defaultTimeout;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ViewComponent.prototype, "j", {
        get: function () {
            return this.jodit;
        },
        enumerable: false,
        configurable: true
    });
    ViewComponent.prototype.setParentView = function (jodit) {
        this.jodit = jodit;
        jodit.components.add(this);
        return this;
    };
    ViewComponent.prototype.destruct = function () {
        this.j.components.delete(this);
        return _super.prototype.destruct.call(this);
    };
    return ViewComponent;
}(component_1.Component));
exports.ViewComponent = ViewComponent;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCursorPosition = exports.getNotSpaceSibling = exports.getSibling = exports.getNeighbor = void 0;
var utils_1 = __webpack_require__(15);
var dom_1 = __webpack_require__(2);
var constants_1 = __webpack_require__(3);
var string_1 = __webpack_require__(11);
function getNeighbor(node, backspace, root) {
    return utils_1.call(backspace ? dom_1.Dom.prev : dom_1.Dom.next, node, function (n) { var _a; return Boolean(n && (!dom_1.Dom.isText(n) || ((_a = n.nodeValue) === null || _a === void 0 ? void 0 : _a.length))); }, root);
}
exports.getNeighbor = getNeighbor;
function getSibling(node, backspace) {
    return backspace ? node.previousSibling : node.nextSibling;
}
exports.getSibling = getSibling;
function getNotSpaceSibling(node, backspace) {
    return dom_1.Dom.getNormalSibling(node, backspace, function (n) {
        var _a;
        return (!dom_1.Dom.isEmptyTextNode(n) &&
            Boolean(!dom_1.Dom.isText(n) || (((_a = n.nodeValue) === null || _a === void 0 ? void 0 : _a.length) && string_1.trim(n.nodeValue))));
    });
}
exports.getNotSpaceSibling = getNotSpaceSibling;
function normalizeCursorPosition(node, backspace) {
    var sibling = dom_1.Dom.getNormalSibling(node, backspace), anotherSibling = dom_1.Dom.getNormalSibling(node, !backspace);
    while (dom_1.Dom.isElement(sibling) &&
        !dom_1.Dom.isTag(sibling, constants_1.INSEPARABLE_TAGS) &&
        !anotherSibling) {
        if (backspace || !sibling.firstChild) {
            sibling.appendChild(node);
        }
        else {
            dom_1.Dom.before(sibling.firstChild, node);
        }
        sibling = getSibling(node, backspace);
        anotherSibling = getSibling(node, !backspace);
    }
}
exports.normalizeCursorPosition = normalizeCursorPosition;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = exports.UIButton = exports.UIButtonState = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(146);
var autobind_decorator_1 = __webpack_require__(10);
var element_1 = __webpack_require__(22);
var watch_1 = __webpack_require__(50);
var component_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(33);
var __1 = __webpack_require__(8);
exports.UIButtonState = function () { return ({
    size: 'middle',
    name: '',
    status: '',
    disabled: false,
    activated: false,
    icon: {
        name: 'empty',
        fill: '',
        iconURL: ''
    },
    tooltip: '',
    text: '',
    tabIndex: -1
}); };
var UIButton = (function (_super) {
    tslib_1.__extends(UIButton, _super);
    function UIButton(jodit) {
        var _this = _super.call(this, jodit) || this;
        _this.isButton = true;
        _this.state = exports.UIButtonState();
        _this.actionHandlers = [];
        _this.updateSize();
        _this.onChangeSize();
        _this.onChangeStatus();
        if (helpers_1.getClassName(_this) === helpers_1.getClassName(UIButton.prototype)) {
            _this.setStatus(component_1.STATUSES.ready);
        }
        return _this;
    }
    UIButton.prototype.setState = function (state) {
        Object.assign(this.state, state);
        return this;
    };
    UIButton.prototype.onChangeSize = function () {
        this.setMod('size', this.state.size);
    };
    UIButton.prototype.updateSize = function () {
        var pe = this.closest(__1.UIList);
        if (pe) {
            this.state.size = pe.buttonSize;
            return;
        }
    };
    UIButton.prototype.onChangeStatus = function () {
        this.setMod('status', this.state.status);
    };
    UIButton.prototype.onChangeText = function () {
        this.text.textContent = this.jodit.i18n(this.state.text);
    };
    UIButton.prototype.onChangeTextSetMode = function () {
        this.setMod('text-icons', Boolean(this.state.text.trim().length));
    };
    UIButton.prototype.onChangeDisabled = function () {
        helpers_1.attr(this.container, 'disabled', this.state.disabled || null);
    };
    UIButton.prototype.onChangeActivated = function () {
        helpers_1.attr(this.container, 'aria-pressed', this.state.activated);
    };
    UIButton.prototype.onChangeName = function () {
        this.container.classList.add(this.componentName + "_" + this.clearName(this.state.name));
    };
    UIButton.prototype.onChangeTooltip = function () {
        if (this.get('j.o.useNativeTooltip')) {
            helpers_1.attr(this.container, 'title', this.state.tooltip);
        }
        helpers_1.attr(this.container, 'aria-label', this.state.tooltip);
    };
    UIButton.prototype.onChangeTabIndex = function () {
        helpers_1.attr(this.container, 'tabIndex', this.state.tabIndex);
    };
    UIButton.prototype.onChangeIcon = function () {
        if (this.get('j.o.textIcons')) {
            return;
        }
        dom_1.Dom.detach(this.icon);
        var _a = this, jodit = _a.jodit, state = _a.state;
        var iconElement;
        if (state.icon) {
            if (state.icon.iconURL) {
                iconElement = this.j.c.span();
                helpers_1.css(iconElement, 'backgroundImage', 'url(' +
                    state.icon.iconURL.replace('{basePath}', (jodit === null || jodit === void 0 ? void 0 : jodit.basePath) || '') +
                    ')');
            }
            else {
                var svg = icon_1.Icon.get(this.state.icon.name, '');
                if (svg) {
                    iconElement = this.j.c.fromHTML(svg.trim());
                    iconElement.classList.add('jodit-icon_' + this.clearName(this.state.icon.name));
                }
            }
        }
        if (iconElement) {
            iconElement.classList.add('jodit-icon');
            iconElement.style.fill = state.icon.fill;
            this.icon.appendChild(iconElement);
        }
    };
    UIButton.prototype.focus = function () {
        this.container.focus();
    };
    UIButton.prototype.isFocused = function () {
        var activeElement = this.od.activeElement;
        return Boolean(activeElement && dom_1.Dom.isOrContains(this.container, activeElement));
    };
    UIButton.prototype.createContainer = function () {
        var cn = this.componentName;
        var button = this.j.c.element('button', {
            class: cn,
            type: 'button',
            role: 'button',
            ariaPressed: false
        });
        this.icon = this.j.c.span(cn + '__icon');
        this.text = this.j.c.span(cn + '__text');
        button.appendChild(this.icon);
        button.appendChild(this.text);
        this.j.e.on(button, "click", this.onActionFire);
        return button;
    };
    UIButton.prototype.destruct = function () {
        this.j.e.off(this.container);
        return _super.prototype.destruct.call(this);
    };
    UIButton.prototype.onAction = function (callback) {
        this.actionHandlers.push(callback);
        return this;
    };
    UIButton.prototype.onActionFire = function (e) {
        var _this = this;
        e.buffer = {
            actionTrigger: this
        };
        this.actionHandlers.forEach(function (callback) { return callback.call(_this, e); });
    };
    tslib_1.__decorate([
        watch_1.default('state.size')
    ], UIButton.prototype, "onChangeSize", null);
    tslib_1.__decorate([
        watch_1.default('parentElement')
    ], UIButton.prototype, "updateSize", null);
    tslib_1.__decorate([
        watch_1.default('state.status')
    ], UIButton.prototype, "onChangeStatus", null);
    tslib_1.__decorate([
        watch_1.default('state.text')
    ], UIButton.prototype, "onChangeText", null);
    tslib_1.__decorate([
        watch_1.default('state.text')
    ], UIButton.prototype, "onChangeTextSetMode", null);
    tslib_1.__decorate([
        watch_1.default('state.disabled')
    ], UIButton.prototype, "onChangeDisabled", null);
    tslib_1.__decorate([
        watch_1.default('state.activated')
    ], UIButton.prototype, "onChangeActivated", null);
    tslib_1.__decorate([
        watch_1.default('state.name')
    ], UIButton.prototype, "onChangeName", null);
    tslib_1.__decorate([
        watch_1.default('state.tooltip')
    ], UIButton.prototype, "onChangeTooltip", null);
    tslib_1.__decorate([
        watch_1.default('state.tabIndex')
    ], UIButton.prototype, "onChangeTabIndex", null);
    tslib_1.__decorate([
        watch_1.default('state.icon')
    ], UIButton.prototype, "onChangeIcon", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], UIButton.prototype, "onActionFire", null);
    return UIButton;
}(element_1.UIElement));
exports.UIButton = UIButton;
function Button(jodit, stateOrText, text, status) {
    var button = new UIButton(jodit);
    if (helpers_1.isString(stateOrText)) {
        button.state.icon.name = stateOrText;
        button.state.name = stateOrText;
        if (status) {
            button.state.status = status;
        }
        if (text) {
            button.state.text = text;
        }
    }
    else {
        button.setState(stateOrText);
    }
    return button;
}
exports.Button = Button;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 *  Jodit Editor (https://xdsoft.net/jodit/)
 *  Released under MIT see LICENSE.txt in the project root for license information.
 *  Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = exports.getPropertyDescriptor = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var events_1 = __webpack_require__(20);
var component_1 = __webpack_require__(7);
function getPropertyDescriptor(obj, prop) {
    var desc;
    do {
        desc = Object.getOwnPropertyDescriptor(obj, prop);
        obj = Object.getPrototypeOf(obj);
    } while (!desc && obj);
    return desc;
}
exports.getPropertyDescriptor = getPropertyDescriptor;
function watch(observeFields) {
    return function (target, propertyKey) {
        if (!helpers_1.isFunction(target[propertyKey])) {
            throw helpers_1.error('Handler must be a Function');
        }
        var process = function (component) {
            var callback = function (key) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!component.isInDestruct) {
                    component[propertyKey].apply(component, tslib_1.__spreadArrays([key], args));
                }
            };
            helpers_1.splitArray(observeFields).forEach(function (field) {
                var parts = field.split('.'), key = parts[0];
                var value = component[key];
                if (value instanceof events_1.ObserveObject) {
                    value.on("change." + field, callback);
                }
                else if (helpers_1.isPlainObject(value) && parts.length > 1) {
                    component[key] = events_1.ObserveObject.create(value, [key]);
                    component[key].on("change." + field, callback);
                }
                else {
                    var descriptor_1 = getPropertyDescriptor(target, key);
                    Object.defineProperty(component, key, {
                        configurable: true,
                        set: function (v) {
                            var oldValue = value;
                            if (oldValue === v) {
                                return;
                            }
                            value = v;
                            if (descriptor_1 && descriptor_1.set) {
                                descriptor_1.set.call(component, v);
                            }
                            if (helpers_1.isPlainObject(value)) {
                                value = events_1.ObserveObject.create(value, [key]);
                                value.on('change.' + field, callback);
                            }
                            callback(key, oldValue, value);
                        },
                        get: function () {
                            if (descriptor_1 && descriptor_1.get) {
                                return descriptor_1.get.call(component);
                            }
                            return value;
                        }
                    });
                }
            });
        };
        if (helpers_1.isFunction(target.hookStatus)) {
            target.hookStatus(component_1.STATUSES.ready, process);
        }
        else {
            process(target);
        }
    };
}
exports.watch = watch;
exports.default = watch;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UISeparator = void 0;
var tslib_1 = __webpack_require__(0);
var element_1 = __webpack_require__(22);
var UISeparator = (function (_super) {
    tslib_1.__extends(UISeparator, _super);
    function UISeparator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UISeparator;
}(element_1.UIElement));
exports.UISeparator = UISeparator;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIGroup = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(149);
var element_1 = __webpack_require__(22);
var decorators_1 = __webpack_require__(13);
var UIGroup = (function (_super) {
    tslib_1.__extends(UIGroup, _super);
    function UIGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.elements = [];
        _this.buttonSize = 'middle';
        return _this;
    }
    UIGroup.prototype.update = function () {
        this.elements.forEach(function (elm) { return elm.update(); });
        this.setMod('size', this.buttonSize);
    };
    UIGroup.prototype.append = function (elm) {
        this.elements.push(elm);
        this.container.appendChild(elm.container);
        elm.parentElement = this;
        elm.update();
    };
    UIGroup.prototype.clear = function () {
        this.elements.forEach(function (elm) { return elm.destruct(); });
        this.elements.length = 0;
    };
    UIGroup.prototype.destruct = function () {
        this.clear();
        return _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        decorators_1.watch('buttonSize')
    ], UIGroup.prototype, "update", null);
    return UIGroup;
}(element_1.UIElement));
exports.UIGroup = UIGroup;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenu = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(161);
var popup_1 = __webpack_require__(23);
var button_1 = __webpack_require__(16);
var checker_1 = __webpack_require__(5);
var ContextMenu = (function (_super) {
    tslib_1.__extends(ContextMenu, _super);
    function ContextMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextMenu.prototype.show = function (x, y, actions) {
        var _this = this;
        var self = this, content = this.j.c.div('jodit-context-menu__actions');
        if (!checker_1.isArray(actions)) {
            return;
        }
        actions.forEach(function (item) {
            if (!item) {
                return;
            }
            var action = button_1.Button(_this.jodit, item.icon || 'empty', item.title);
            _this.jodit && action.setParentView(_this.jodit);
            action.setMod('context', 'menu');
            action.onAction(function (e) {
                var _a;
                (_a = item.exec) === null || _a === void 0 ? void 0 : _a.call(self, e);
                self.close();
                return false;
            });
            content.appendChild(action.container);
        });
        _super.prototype.setContent.call(this, content)
            .open(function () { return ({ left: x, top: y, width: 0, height: 0 }); }, true);
    };
    return ContextMenu;
}(popup_1.Popup));
exports.ContextMenu = ContextMenu;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = void 0;
var tslib_1 = __webpack_require__(0);
var storage_1 = __webpack_require__(35);
var helpers_1 = __webpack_require__(1);
var constants_1 = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var async_1 = __webpack_require__(165);
var global_1 = __webpack_require__(12);
var decorators_1 = __webpack_require__(13);
var View = (function (_super) {
    tslib_1.__extends(View, _super);
    function View(options) {
        var _this = _super.call(this) || this;
        _this.isView = true;
        _this.components = new Set();
        _this.version = "3.4.1";
        _this.async = new async_1.Async();
        _this.buffer = storage_1.Storage.makeStorage();
        _this.__isFullSize = false;
        _this.__whoLocked = '';
        _this.isLockedNotBy = function (name) {
            return _this.isLocked && _this.__whoLocked !== name;
        };
        _this.__modulesInstances = new Map();
        _this.id = new Date().getTime().toString();
        _this.buffer = storage_1.Storage.makeStorage();
        _this.initOptions(options);
        _this.initOwners();
        _this.events = new modules_1.EventsNative(_this.od);
        _this.create = new modules_1.Create(_this.od);
        _this.container = _this.c.div();
        _this.container.classList.add('jodit');
        _this.progressbar = new modules_1.ProgressBar(_this);
        return _this;
    }
    Object.defineProperty(View.prototype, "basePath", {
        get: function () {
            if (this.o.basePath) {
                return this.o.basePath;
            }
            return constants_1.BASE_PATH;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(View.prototype, "defaultTimeout", {
        get: function () {
            return helpers_1.isVoid(this.o.defaultTimeout) ? 100 : this.o.defaultTimeout;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(View.prototype, "c", {
        get: function () {
            return this.create;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(View.prototype, "e", {
        get: function () {
            return this.events;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(View.prototype, "o", {
        get: function () {
            return this.options;
        },
        enumerable: false,
        configurable: true
    });
    View.prototype.i18n = function (text) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return helpers_1.i18n(text, params, this.options);
    };
    View.prototype.toggleFullSize = function (isFullSize) {
        if (isFullSize === undefined) {
            isFullSize = !this.__isFullSize;
        }
        if (isFullSize === this.__isFullSize) {
            return;
        }
        this.__isFullSize = isFullSize;
        if (this.events) {
            this.e.fire('toggleFullSize', isFullSize);
        }
    };
    Object.defineProperty(View.prototype, "isLocked", {
        get: function () {
            return this.__whoLocked !== '';
        },
        enumerable: false,
        configurable: true
    });
    View.prototype.lock = function (name) {
        if (name === void 0) { name = 'any'; }
        if (!this.isLocked) {
            this.__whoLocked = name;
            return true;
        }
        return false;
    };
    View.prototype.unlock = function () {
        if (this.isLocked) {
            this.__whoLocked = '';
            return true;
        }
        return false;
    };
    Object.defineProperty(View.prototype, "isFullSize", {
        get: function () {
            return this.__isFullSize;
        },
        enumerable: false,
        configurable: true
    });
    View.prototype.getVersion = function () {
        return this.version;
    };
    View.prototype.initOptions = function (options) {
        this.options = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, (this.options || {})), View.defaultOptions), options);
    };
    View.prototype.initOwners = function () { };
    View.prototype.getInstance = function (moduleName, options) {
        var module = global_1.modules[moduleName], mi = this.__modulesInstances;
        if (!helpers_1.isFunction(module)) {
            throw helpers_1.error('Need real module name');
        }
        if (!mi.has(moduleName)) {
            var instance = module.prototype instanceof modules_1.ViewComponent
                ? new module(this, options)
                : new module(options);
            this.components.add(instance);
            mi.set(moduleName, instance);
        }
        return mi.get(moduleName);
    };
    View.prototype.beforeDestruct = function () {
        this.e.fire(modules_1.STATUSES.beforeDestruct);
        this.components.forEach(function (component) {
            if (helpers_1.isDestructable(component) && !component.isInDestruct) {
                component.destruct();
            }
        });
        this.components.clear();
    };
    View.prototype.destruct = function () {
        if (this.isDestructed) {
            return;
        }
        if (this.async) {
            this.async.destruct();
            delete this.async;
        }
        if (this.events) {
            this.e.destruct();
            delete this.events;
        }
        if (this.buffer) {
            this.buffer.clear();
            delete this.buffer;
        }
        modules_1.Dom.safeRemove(this.container);
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        decorators_1.hook(modules_1.STATUSES.beforeDestruct)
    ], View.prototype, "beforeDestruct", null);
    return View;
}(modules_1.Component));
exports.View = View;
View.defaultOptions = {
    extraButtons: [],
    textIcons: false,
    removeButtons: [],
    zIndex: 100002,
    defaultTimeout: 100,
    fullsize: false,
    showTooltip: true,
    useNativeTooltip: false,
    buttons: [],
    globalFullSize: true
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryStorageProvider = void 0;
var MemoryStorageProvider = (function () {
    function MemoryStorageProvider() {
        this.data = new Map();
    }
    MemoryStorageProvider.prototype.set = function (key, value) {
        this.data.set(key, value);
    };
    MemoryStorageProvider.prototype.delete = function (key) {
        this.data.delete(key);
    };
    MemoryStorageProvider.prototype.get = function (key) {
        return this.data.get(key);
    };
    MemoryStorageProvider.prototype.exists = function (key) {
        return this.data.has(key);
    };
    MemoryStorageProvider.prototype.clear = function () {
        this.data.clear();
    };
    return MemoryStorageProvider;
}());
exports.MemoryStorageProvider = MemoryStorageProvider;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageProvider = exports.canUsePersistentStorage = void 0;
exports.canUsePersistentStorage = (function () {
    var canUse = function () {
        var tmpKey = '___Jodit___' + Math.random().toString();
        try {
            localStorage.setItem(tmpKey, '1');
            var result_1 = localStorage.getItem(tmpKey) === '1';
            localStorage.removeItem(tmpKey);
            return result_1;
        }
        catch (_a) { }
        return false;
    };
    var result;
    return function () {
        if (result === undefined) {
            result = canUse();
        }
        return result;
    };
})();
var LocalStorageProvider = (function () {
    function LocalStorageProvider(rootKey) {
        this.rootKey = rootKey;
    }
    LocalStorageProvider.prototype.set = function (key, value) {
        try {
            var buffer = localStorage.getItem(this.rootKey);
            var json = buffer ? JSON.parse(buffer) : {};
            json[key] = value;
            localStorage.setItem(this.rootKey, JSON.stringify(json));
        }
        catch (_a) { }
    };
    LocalStorageProvider.prototype.delete = function (key) {
        try {
            localStorage.removeItem(this.rootKey);
        }
        catch (_a) { }
    };
    LocalStorageProvider.prototype.get = function (key) {
        try {
            var buffer = localStorage.getItem(this.rootKey);
            var json = buffer ? JSON.parse(buffer) : {};
            return json[key] !== undefined ? json[key] : null;
        }
        catch (_a) { }
    };
    LocalStorageProvider.prototype.exists = function (key) {
        return this.get(key) !== null;
    };
    LocalStorageProvider.prototype.clear = function () {
        try {
            localStorage.removeItem(this.rootKey);
        }
        catch (_a) { }
    };
    return LocalStorageProvider;
}());
exports.LocalStorageProvider = LocalStorageProvider;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarEditorCollection = void 0;
var tslib_1 = __webpack_require__(0);
var collection_1 = __webpack_require__(36);
var consts = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var ToolbarEditorCollection = (function (_super) {
    tslib_1.__extends(ToolbarEditorCollection, _super);
    function ToolbarEditorCollection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.checkActiveStatus = function (cssObject, node) {
            var matches = 0, total = 0;
            Object.keys(cssObject).forEach(function (cssProperty) {
                var cssValue = cssObject[cssProperty];
                if (helpers_1.isFunction(cssValue)) {
                    if (cssValue(_this.j, helpers_1.css(node, cssProperty).toString())) {
                        matches += 1;
                    }
                }
                else {
                    if (cssValue.indexOf(helpers_1.css(node, cssProperty).toString()) !== -1) {
                        matches += 1;
                    }
                }
                total += 1;
            });
            return total === matches;
        };
        return _this;
    }
    ToolbarEditorCollection.prototype.shouldBeDisabled = function (button) {
        var disabled = _super.prototype.shouldBeDisabled.call(this, button);
        if (disabled !== undefined) {
            return disabled;
        }
        var mode = button.control.mode === undefined
            ? consts.MODE_WYSIWYG
            : button.control.mode;
        return !(mode === consts.MODE_SPLIT || mode === this.j.getRealMode());
    };
    ToolbarEditorCollection.prototype.shouldBeActive = function (button) {
        var _this = this;
        var active = _super.prototype.shouldBeActive.call(this, button);
        if (active !== undefined) {
            return active;
        }
        var element = this.j.selection ? this.j.s.current() : null;
        if (!element) {
            return false;
        }
        var elm;
        if (button.control.tags) {
            var tags_1 = button.control.tags;
            elm = element;
            if (dom_1.Dom.up(elm, function (node) {
                if (node &&
                    tags_1.indexOf(node.nodeName.toLowerCase()) !== -1) {
                    return true;
                }
            }, this.j.editor)) {
                return true;
            }
        }
        if (button.control.css) {
            var css_1 = button.control.css;
            elm = element;
            if (dom_1.Dom.up(elm, function (node) {
                if (node && !dom_1.Dom.isText(node)) {
                    return _this.checkActiveStatus(css_1, node);
                }
            }, this.j.editor)) {
                return true;
            }
        }
        return false;
    };
    ToolbarEditorCollection.prototype.getTarget = function (button) {
        return button.target || this.j.s.current() || null;
    };
    return ToolbarEditorCollection;
}(collection_1.ToolbarCollection));
exports.ToolbarEditorCollection = ToolbarEditorCollection;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarButton = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(167);
var button_1 = __webpack_require__(16);
var decorators_1 = __webpack_require__(13);
var dom_1 = __webpack_require__(2);
var popup_1 = __webpack_require__(23);
var factory_1 = __webpack_require__(17);
var helpers_1 = __webpack_require__(1);
var __1 = __webpack_require__(9);
var ToolbarButton = (function (_super) {
    tslib_1.__extends(ToolbarButton, _super);
    function ToolbarButton(jodit, control, target) {
        if (target === void 0) { target = null; }
        var _this = _super.call(this, jodit) || this;
        _this.control = control;
        _this.target = target;
        _this.state = tslib_1.__assign(tslib_1.__assign({}, button_1.UIButtonState()), { theme: 'toolbar', currentValue: '', hasTrigger: false });
        _this.setParentView(jodit);
        jodit.e.on([_this.button, _this.trigger], 'mousedown', function (e) {
            return e.preventDefault();
        });
        _this.onAction(_this.onClick);
        _this.setStatus(__1.STATUSES.ready);
        _this.initFromControl();
        _this.initTooltip();
        _this.update();
        return _this;
    }
    Object.defineProperty(ToolbarButton.prototype, "toolbar", {
        get: function () {
            return this.closest(__1.ToolbarCollection);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "button", {
        get: function () {
            return this.container.querySelector("button." + this.componentName + "__button");
        },
        enumerable: false,
        configurable: true
    });
    ToolbarButton.prototype.update = function () {
        var _a = this, control = _a.control, state = _a.state, tc = this.closest(__1.ToolbarCollection);
        if (tc) {
            state.disabled = Boolean(tc.shouldBeDisabled(this));
            state.activated = Boolean(tc.shouldBeActive(this));
        }
        if (helpers_1.isFunction(control.update)) {
            control.update(this);
        }
        _super.prototype.update.call(this);
    };
    ToolbarButton.prototype.onChangeActivated = function () {
        helpers_1.attr(this.button, 'aria-pressed', this.state.activated);
        _super.prototype.onChangeActivated.call(this);
    };
    ToolbarButton.prototype.onChangeText = function () {
        if (helpers_1.isFunction(this.control.template)) {
            this.text.innerHTML = this.control.template(this.j, this.control.name, this.j.i18n(this.state.text));
        }
        else {
            _super.prototype.onChangeText.call(this);
        }
        this.setMod('text-icons', Boolean(this.text.innerText.trim().length));
    };
    ToolbarButton.prototype.createContainer = function () {
        var cn = this.componentName;
        var container = this.j.c.span(cn), button = _super.prototype.createContainer.call(this);
        helpers_1.attr(container, 'role', 'listitem');
        button.classList.remove(cn);
        button.classList.add(cn + '__button');
        Object.defineProperty(button, 'component', {
            value: this
        });
        container.appendChild(button);
        this.trigger = this.j.c.fromHTML("<span role=\"trigger\" class=\"" + cn + "__trigger\">" + __1.Icon.get('chevron') + "</span>");
        this.j.e.on(this.trigger, "click", this.onTriggerClick.bind(this));
        return container;
    };
    ToolbarButton.prototype.focus = function () {
        var _a;
        (_a = this.container.querySelector('button')) === null || _a === void 0 ? void 0 : _a.focus();
    };
    ToolbarButton.prototype.onChangeHasTrigger = function () {
        if (this.state.hasTrigger) {
            this.container.appendChild(this.trigger);
        }
        else {
            dom_1.Dom.safeRemove(this.trigger);
        }
        this.setMod('with-trigger', this.state.hasTrigger || null);
    };
    ToolbarButton.prototype.onChangeDisabled = function () {
        var dsb = this.state.disabled ? 'disabled' : null;
        helpers_1.attr(this.trigger, 'disabled', dsb);
        helpers_1.attr(this.button, 'disabled', dsb);
        helpers_1.attr(this.container, 'disabled', dsb);
    };
    ToolbarButton.prototype.initTooltip = function () {
        var _this = this;
        if (!this.j.o.textIcons &&
            this.j.o.showTooltip &&
            !this.j.o.useNativeTooltip) {
            var to_1 = this.j.o.showTooltipDelay || this.j.defaultTimeout;
            var timeout_1 = 0;
            this.j.e
                .off(this.container, 'mouseenter mouseleave')
                .on(this.container, 'mouseenter', function () {
                if (!_this.state.tooltip) {
                    return;
                }
                timeout_1 = _this.j.async.setTimeout(function () {
                    return !_this.state.disabled &&
                        _this.j.e.fire('showTooltip', _this.container, _this.state.tooltip);
                }, {
                    timeout: to_1,
                    label: 'tooltip'
                });
            })
                .on(this.container, 'mouseleave', function () {
                _this.j.async.clearTimeout(timeout_1);
                _this.j.e.fire('hideTooltip');
            });
        }
    };
    ToolbarButton.prototype.initFromControl = function () {
        var _a = this, control = _a.control, state = _a.state;
        this.updateSize();
        state.name = control.name;
        if (this.j.o.textIcons || control.template) {
            state.icon = button_1.UIButtonState().icon;
            state.text = control.text || control.name;
        }
        else {
            if (control.iconURL) {
                state.icon.iconURL = control.iconURL;
            }
            else {
                var name_1 = control.icon || control.name;
                state.icon.name = __1.Icon.exists(name_1) ? name_1 : '';
            }
            if (!control.iconURL && !state.icon.name) {
                state.text = control.text || control.name;
            }
        }
        if (control.tooltip) {
            state.tooltip = this.j.i18n(control.tooltip);
        }
        state.hasTrigger = Boolean(control.list || (control.popup && control.exec));
    };
    ToolbarButton.prototype.onTriggerClick = function (e) {
        var _this = this;
        var control = this.control;
        e.buffer = {
            actionTrigger: this
        };
        if (control.list) {
            return this.openControlList(control);
        }
        if (helpers_1.isFunction(control.popup)) {
            var popup = new popup_1.Popup(this.j);
            popup.parentElement = this;
            if (this.j.e.fire(helpers_1.camelCase("before-" + control.name + "-open-popup"), this.target, control, popup) !== false) {
                var target = (this.toolbar
                    ? this.toolbar.getTarget(this)
                    : this.target) || null;
                var popupElm = control.popup(this.j, target, control, popup.close, this);
                if (popupElm) {
                    popup
                        .setContent(helpers_1.isString(popupElm)
                        ? this.j.c.fromHTML(popupElm)
                        : popupElm)
                        .open(function () { return helpers_1.position(_this.container); });
                }
            }
            this.j.e.fire(helpers_1.camelCase("after-" + control.name + "-open-popup"), popup.container);
        }
    };
    ToolbarButton.prototype.openControlList = function (control) {
        var _this = this;
        var controls = this.jodit.options.controls, getControl = function (key) {
            return controls && controls[key];
        };
        var list = control.list, menu = new popup_1.Popup(this.j), toolbar = factory_1.makeCollection(this.j);
        menu.parentElement = this;
        toolbar.parentElement = menu;
        toolbar.mode = 'vertical';
        var getButton = function (key, value) {
            if (helpers_1.isString(value) && getControl(value)) {
                return tslib_1.__assign({ name: value.toString() }, getControl(value));
            }
            if (helpers_1.isString(key) && getControl(key)) {
                return tslib_1.__assign(tslib_1.__assign({ name: key.toString() }, getControl(key)), (typeof value === 'object' ? value : {}));
            }
            var childControl = {
                name: key.toString(),
                template: control.childTemplate,
                exec: control.exec,
                data: control.data,
                command: control.command,
                isActive: control.isChildActive,
                isDisabled: control.isChildDisabled,
                mode: control.mode,
                args: tslib_1.__spreadArrays((control.args ? control.args : []), [key, value])
            };
            if (helpers_1.isString(value)) {
                childControl.text = value;
            }
            return childControl;
        };
        toolbar.build(helpers_1.isArray(list)
            ? list.map(getButton)
            : Object.keys(list).map(function (key) { return getButton(key, list[key]); }), this.target);
        menu.setContent(toolbar.container).open(function () { return helpers_1.position(_this.container); });
        this.state.activated = true;
        this.j.e.on(menu, 'afterClose', function () {
            _this.state.activated = false;
        });
    };
    ToolbarButton.prototype.onClick = function (originalEvent) {
        var _a, _b, _c, _d;
        var control = this.control;
        if (helpers_1.isFunction(control.exec)) {
            var target = (this.toolbar ? this.toolbar.getTarget(this) : this.target) ||
                null;
            var result = control.exec(this.j, target, {
                control: control,
                originalEvent: originalEvent,
                button: this
            });
            if (result !== false) {
                (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.e) === null || _b === void 0 ? void 0 : _b.fire('synchro');
                if (this.parentElement) {
                    this.parentElement.update();
                }
                (_d = (_c = this.j) === null || _c === void 0 ? void 0 : _c.e) === null || _d === void 0 ? void 0 : _d.fire('closeAllPopups afterExec');
                return;
            }
        }
        if (control.list) {
            return this.openControlList(control);
        }
        if (helpers_1.isFunction(control.popup)) {
            return this.onTriggerClick(originalEvent);
        }
        if (control.command || control.name) {
            helpers_1.call(helpers_1.isJoditObject(this.j)
                ? this.j.execCommand.bind(this.j)
                : this.j.od.execCommand.bind(this.j.od), control.command || control.name, false, control.args && control.args[0]);
            this.j.e.fire('closeAllPopups');
        }
    };
    tslib_1.__decorate([
        decorators_1.watch('state.hasTrigger')
    ], ToolbarButton.prototype, "onChangeHasTrigger", null);
    return ToolbarButton;
}(button_1.UIButton));
exports.ToolbarButton = ToolbarButton;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolbarContent = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(168);
var button_1 = __webpack_require__(16);
var checker_1 = __webpack_require__(5);
var dom_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(15);
var ToolbarContent = (function (_super) {
    tslib_1.__extends(ToolbarContent, _super);
    function ToolbarContent(jodit, control, target) {
        if (target === void 0) { target = null; }
        var _this = _super.call(this, jodit) || this;
        _this.control = control;
        _this.target = target;
        _this.container.classList.add(_this.componentName + "_" + _this.clearName(control.name));
        utils_1.attr(_this.container, 'role', 'content');
        return _this;
    }
    ToolbarContent.prototype.update = function () {
        var content = this.control.getContent(this.j, this.control, this);
        if (checker_1.isString(content) || content.parentNode !== this.container) {
            dom_1.Dom.detach(this.container);
            this.container.appendChild(checker_1.isString(content) ? this.j.create.fromHTML(content) : content);
        }
        _super.prototype.update.call(this);
    };
    ToolbarContent.prototype.createContainer = function () {
        return this.j.c.span(this.componentName);
    };
    return ToolbarContent;
}(button_1.UIButton));
exports.ToolbarContent = ToolbarContent;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeContextMenu = exports.makeDataProvider = void 0;
var data_provider_1 = __webpack_require__(177);
var context_menu_1 = __webpack_require__(53);
function makeDataProvider(parent, options) {
    return new data_provider_1.default(parent, options);
}
exports.makeDataProvider = makeDataProvider;
function makeContextMenu(parent) {
    return new context_menu_1.ContextMenu(parent);
}
exports.makeContextMenu = makeContextMenu;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeListeners = exports.getItem = void 0;
var tslib_1 = __webpack_require__(0);
var dialog_1 = __webpack_require__(14);
var helpers_1 = __webpack_require__(1);
var consts_1 = __webpack_require__(19);
var context_menu_1 = __webpack_require__(179);
var dom_1 = __webpack_require__(2);
exports.getItem = function (node, root, tag) {
    if (tag === void 0) { tag = 'a'; }
    return dom_1.Dom.closest(node, function (elm) { return dom_1.Dom.isElement(elm) && dom_1.Dom.isTag(elm, tag); }, root);
};
function nativeListeners() {
    var _this = this;
    var dragElement = false;
    var self = this;
    var elementToItem = function (elm) {
        var key = elm.dataset.key, item = self.elementsMap[key || ''].item;
        return item;
    };
    self.e
        .on(self.tree, 'click', function (e) {
        var a = exports.getItem(e.target, self.dialog.container, 'i');
        if (!a || !a.classList.contains('jodit-icon_folder_remove')) {
            return;
        }
        var path = helpers_1.attr(a, '-path') || '';
        dialog_1.Confirm(self.i18n('Are you sure?'), self.i18n('Delete'), function (yes) {
            if (yes) {
                self.dataProvider
                    .folderRemove(path, helpers_1.attr(a, '-name') || '', helpers_1.attr(a, '-source') || '')
                    .then(function (resp) {
                    if (self.o.folderRemove &&
                        self.o.folderRemove.process) {
                        resp = self.o.folderRemove.process.call(self, resp);
                    }
                    if (!self.o.isSuccess(resp)) {
                        throw helpers_1.error(self.o.getMessage(resp));
                    }
                    else {
                        self.state.activeElements = [];
                        self.status(self.o.getMessage(resp), true);
                    }
                    self.loadTree();
                })
                    .catch(self.status);
            }
        }).bindDestruct(self);
        e.stopImmediatePropagation();
        return false;
    })
        .on(self.tree, 'click', function (e) {
        var a = exports.getItem(e.target, self.dialog.container, 'i');
        if (!a || !a.classList.contains('jodit-icon_folder_rename')) {
            return;
        }
        var name = helpers_1.attr(a, '-name') || '', path = helpers_1.attr(a, '-source-path') || '';
        dialog_1.Prompt(self.i18n('Enter new name'), self.i18n('Rename'), function (newName) {
            if (!helpers_1.isValidName(newName)) {
                self.status(self.i18n('Enter new name'));
                return false;
            }
            self.dataProvider
                .folderRename(path, helpers_1.attr(a, '-name') || '', newName, helpers_1.attr(a, '-source') || '')
                .then(function (resp) {
                if (self.o.folderRename &&
                    self.o.folderRename.process) {
                    resp = self.o.folderRename.process.call(self, resp);
                }
                if (!self.o.isSuccess(resp)) {
                    throw helpers_1.error(self.o.getMessage(resp));
                }
                else {
                    self.state.activeElements = [];
                    self.status(self.o.getMessage(resp), true);
                }
                self.loadTree();
            })
                .catch(self.status);
            return;
        }, self.i18n('type name'), name).bindDestruct(self);
        e.stopImmediatePropagation();
        return false;
    })
        .on(self.tree, 'click', function (e) {
        var a = exports.getItem(e.target, self.dialog.container);
        if (!a) {
            return;
        }
        if (a.classList.contains('jodit-filebrowser__addfolder')) {
            dialog_1.Prompt(self.i18n('Enter Directory name'), self.i18n('Create directory'), function (name) {
                self.dataProvider
                    .createFolder(name, helpers_1.attr(a, '-path') || '', helpers_1.attr(a, '-source') || '')
                    .then(function (resp) {
                    if (self.o.isSuccess(resp)) {
                        self.loadTree();
                    }
                    else {
                        self.status(self.o.getMessage(resp));
                    }
                    return resp;
                }, self.status);
            }, self.i18n('type name')).bindDestruct(self);
        }
        else {
            self.dataProvider.currentPath = helpers_1.attr(a, '-path') || '';
            self.dataProvider.currentSource = helpers_1.attr(a, '-source') || '';
            self.loadTree();
        }
    })
        .on(self.tree, 'dragstart', function (e) {
        var a = exports.getItem(e.target, self.dialog.container);
        if (!a) {
            return;
        }
        if (self.o.moveFolder) {
            dragElement = a;
        }
    })
        .on(self.tree, 'drop', function (e) {
        if ((self.o.moveFile || self.o.moveFolder) && dragElement) {
            var path = helpers_1.attr(dragElement, '-path') || '';
            if (!self.o.moveFolder &&
                dragElement.classList.contains(consts_1.F_CLASS + '__tree-item')) {
                return false;
            }
            if (dragElement.classList.contains(consts_1.ITEM_CLASS)) {
                path += helpers_1.attr(dragElement, '-name');
                if (!self.o.moveFile) {
                    return false;
                }
            }
            var a = exports.getItem(e.target, self.dialog.container);
            if (!a) {
                return;
            }
            self.dataProvider
                .move(path, helpers_1.attr(a, '-path') || '', helpers_1.attr(a, '-source') || '', dragElement.classList.contains(consts_1.ITEM_CLASS))
                .then(function (resp) {
                if (self.o.isSuccess(resp)) {
                    self.loadTree();
                }
                else {
                    self.status(self.o.getMessage(resp));
                }
            }, self.status);
            dragElement = false;
        }
    })
        .on(self.files, 'contextmenu', context_menu_1.default(self))
        .on(self.files, 'click', function (e) {
        if (!helpers_1.ctrlKey(e)) {
            _this.state.activeElements = [];
        }
    })
        .on(self.files, 'click', function (e) {
        var a = exports.getItem(e.target, self.dialog.container);
        if (!a) {
            return;
        }
        var item = elementToItem(a);
        if (!item) {
            return;
        }
        if (!helpers_1.ctrlKey(e)) {
            self.state.activeElements = [item];
        }
        else {
            self.state.activeElements = tslib_1.__spreadArrays(self.state.activeElements, [
                item
            ]);
        }
        e.stopPropagation();
        return false;
    })
        .on(self.files, 'dragstart', function (e) {
        if (self.o.moveFile) {
            var a = exports.getItem(e.target, self.dialog.container);
            if (!a) {
                return;
            }
            dragElement = a;
        }
    })
        .on(self.dialog.container, 'drop', function (e) {
        return e.preventDefault();
    });
}
exports.nativeListeners = nativeListeners;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snapshot = void 0;
var tslib_1 = __webpack_require__(0);
var component_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(2);
var Snapshot = (function (_super) {
    tslib_1.__extends(Snapshot, _super);
    function Snapshot() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isBlocked = false;
        return _this;
    }
    Snapshot.equal = function (first, second) {
        return (first.html === second.html &&
            JSON.stringify(first.range) === JSON.stringify(second.range));
    };
    Snapshot.countNodesBeforeInParent = function (elm) {
        if (!elm.parentNode) {
            return 0;
        }
        var elms = elm.parentNode.childNodes;
        var count = 0, last = null, j;
        for (j = 0; j < elms.length; j += 1) {
            if (last &&
                !(dom_1.Dom.isText(elms[j]) && elms[j].textContent === '') &&
                !(dom_1.Dom.isText(last) && dom_1.Dom.isText(elms[j]))) {
                count += 1;
            }
            if (elms[j] === elm) {
                return count;
            }
            last = elms[j];
        }
        return 0;
    };
    Snapshot.strokeOffset = function (elm, offset) {
        while (dom_1.Dom.isText(elm)) {
            elm = elm.previousSibling;
            if (dom_1.Dom.isText(elm) && elm.textContent !== null) {
                offset += elm.textContent.length;
            }
        }
        return offset;
    };
    Snapshot.prototype.calcHierarchyLadder = function (elm) {
        var counts = [];
        if (!elm || !elm.parentNode || !dom_1.Dom.isOrContains(this.j.editor, elm)) {
            return [];
        }
        while (elm && elm !== this.j.editor) {
            if (elm) {
                counts.push(Snapshot.countNodesBeforeInParent(elm));
            }
            elm = elm.parentNode;
        }
        return counts.reverse();
    };
    Snapshot.prototype.getElementByLadder = function (ladder) {
        var n = this.j.editor, i;
        for (i = 0; n && i < ladder.length; i += 1) {
            n = n.childNodes[ladder[i]];
        }
        return n;
    };
    Snapshot.prototype.make = function () {
        var snapshot = {
            html: '',
            range: {
                startContainer: [],
                startOffset: 0,
                endContainer: [],
                endOffset: 0
            }
        };
        snapshot.html = this.j.getNativeEditorValue();
        var sel = this.j.s.sel;
        if (sel && sel.rangeCount) {
            var range = sel.getRangeAt(0), startContainer = this.calcHierarchyLadder(range.startContainer), endContainer = this.calcHierarchyLadder(range.endContainer);
            var startOffset = Snapshot.strokeOffset(range.startContainer, range.startOffset), endOffset = Snapshot.strokeOffset(range.endContainer, range.endOffset);
            if (!startContainer.length &&
                range.startContainer !== this.j.editor) {
                startOffset = 0;
            }
            if (!endContainer.length && range.endContainer !== this.j.editor) {
                endOffset = 0;
            }
            snapshot.range = {
                startContainer: startContainer,
                startOffset: startOffset,
                endContainer: endContainer,
                endOffset: endOffset
            };
        }
        return snapshot;
    };
    Snapshot.prototype.restore = function (snapshot) {
        this.isBlocked = true;
        var value = this.j.getNativeEditorValue();
        if (value !== snapshot.html) {
            this.j.setEditorValue(snapshot.html);
        }
        this.restoreOnlySelection(snapshot);
        this.isBlocked = false;
    };
    Snapshot.prototype.restoreOnlySelection = function (snapshot) {
        try {
            if (snapshot.range) {
                var range = this.j.ed.createRange();
                range.setStart(this.getElementByLadder(snapshot.range.startContainer), snapshot.range.startOffset);
                range.setEnd(this.getElementByLadder(snapshot.range.endContainer), snapshot.range.endOffset);
                this.j.s.selectRange(range);
            }
        }
        catch (__ignore) {
            this.j.editor.lastChild &&
                this.j.s.setCursorAfter(this.j.editor.lastChild);
            if (false) {}
        }
    };
    Snapshot.prototype.destruct = function () {
        this.isBlocked = false;
        _super.prototype.destruct.call(this);
    };
    return Snapshot;
}(component_1.ViewComponent));
exports.Snapshot = Snapshot;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Style = void 0;
var constants_1 = __webpack_require__(3);
var apply_style_1 = __webpack_require__(190);
var Style = (function () {
    function Style(options) {
        this.options = options;
    }
    Object.defineProperty(Style.prototype, "element", {
        get: function () {
            return this.options.element || this.defaultTag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "elementIsBlock", {
        get: function () {
            return Boolean(this.options.element && constants_1.IS_BLOCK.test(this.options.element));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "defaultTag", {
        get: function () {
            if (this.options.defaultTag) {
                return this.options.defaultTag;
            }
            return this.elementIsBlock ? 'p' : 'span';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Style.prototype, "elementIsDefault", {
        get: function () {
            return this.element === this.defaultTag;
        },
        enumerable: false,
        configurable: true
    });
    Style.prototype.apply = function (jodit) {
        var applyStyle = new apply_style_1.ApplyStyle(jodit, this);
        applyStyle.apply();
    };
    return Style;
}());
exports.Style = Style;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(65), exports);
tslib_1.__exportStar(__webpack_require__(66), exports);
tslib_1.__exportStar(__webpack_require__(228), exports);
__webpack_require__(230);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clipboard = exports.pluginKey = void 0;
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var paste_1 = __webpack_require__(66);
config_1.Config.prototype.controls.cut = {
    command: 'cut',
    isDisabled: function (editor) { return editor.s.isCollapsed(); },
    tooltip: 'Cut selection'
};
config_1.Config.prototype.controls.copy = {
    command: 'copy',
    isDisabled: function (editor) { return editor.s.isCollapsed(); },
    tooltip: 'Copy selection'
};
exports.pluginKey = 'clipboard';
var clipboard = (function () {
    function clipboard() {
    }
    clipboard.prototype.init = function (editor) {
        editor.e
            .off("copy." + exports.pluginKey + " cut." + exports.pluginKey)
            .on("copy." + exports.pluginKey + " cut." + exports.pluginKey, function (event) {
            var _a;
            var selectedText = editor.s.html;
            var clipboardData = paste_1.getDataTransfer(event) ||
                paste_1.getDataTransfer(editor.ew) ||
                paste_1.getDataTransfer(event.originalEvent);
            if (clipboardData) {
                clipboardData.setData(constants_1.TEXT_PLAIN, helpers_1.stripTags(selectedText));
                clipboardData.setData(constants_1.TEXT_HTML, selectedText);
            }
            editor.buffer.set(exports.pluginKey, selectedText);
            if (event.type === 'cut') {
                editor.s.remove();
                editor.s.focus();
            }
            event.preventDefault();
            (_a = editor === null || editor === void 0 ? void 0 : editor.events) === null || _a === void 0 ? void 0 : _a.fire('afterCopy', selectedText);
        });
    };
    clipboard.prototype.destruct = function (editor) {
        var _a, _b;
        (_a = editor === null || editor === void 0 ? void 0 : editor.buffer) === null || _a === void 0 ? void 0 : _a.set(exports.pluginKey, '');
        (_b = editor === null || editor === void 0 ? void 0 : editor.events) === null || _b === void 0 ? void 0 : _b.off('.' + exports.pluginKey);
    };
    return clipboard;
}());
exports.clipboard = clipboard;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.paste = exports.getDataTransfer = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var dialog_1 = __webpack_require__(14);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var helpers_2 = __webpack_require__(1);
var cut_1 = __webpack_require__(65);
var button_1 = __webpack_require__(49);
config_1.Config.prototype.askBeforePasteHTML = true;
config_1.Config.prototype.processPasteHTML = true;
config_1.Config.prototype.askBeforePasteFromWord = true;
config_1.Config.prototype.processPasteFromWord = true;
config_1.Config.prototype.nl2brInPlainText = true;
config_1.Config.prototype.defaultActionOnPaste = constants_1.INSERT_AS_HTML;
exports.getDataTransfer = function (event) {
    if (event.clipboardData) {
        return event.clipboardData;
    }
    try {
        return event.dataTransfer || new DataTransfer();
    }
    catch (_a) {
        return null;
    }
};
config_1.Config.prototype.controls.paste = {
    tooltip: 'Paste from clipboard',
    exec: function (editor) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var text, error, items, textBlob, _a, _b, value;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        editor.s.focus();
                        text = '', error = true;
                        if (error) {
                            text = editor.buffer.get(cut_1.pluginKey) || '';
                            error = text.length === 0;
                        }
                        if (!(error && navigator.clipboard)) return [3, 11];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, , 7]);
                        return [4, navigator.clipboard.read()];
                    case 2:
                        items = _c.sent();
                        if (!(items && items.length)) return [3, 5];
                        return [4, items[0].getType('text/plain')];
                    case 3:
                        textBlob = _c.sent();
                        return [4, new Response(textBlob).text()];
                    case 4:
                        text = _c.sent();
                        _c.label = 5;
                    case 5: return [3, 7];
                    case 6:
                        _a = _c.sent();
                        return [3, 7];
                    case 7:
                        if (!error) return [3, 11];
                        _c.label = 8;
                    case 8:
                        _c.trys.push([8, 10, , 11]);
                        return [4, navigator.clipboard.readText()];
                    case 9:
                        text = _c.sent();
                        error = false;
                        return [3, 11];
                    case 10:
                        _b = _c.sent();
                        return [3, 11];
                    case 11:
                        if (error) {
                            value = editor.value;
                            editor.ed.execCommand('paste');
                            error = value !== editor.value;
                        }
                        if (text) {
                            editor.s.insertHTML(text);
                        }
                        else {
                            if (error) {
                                dialog_1.Alert(editor.i18n("Your browser doesn't support direct access to the clipboard."), function () {
                                    editor.s.focus();
                                }).bindDestruct(editor);
                            }
                        }
                        return [2];
                }
            });
        });
    }
};
function paste(editor) {
    var opt = editor.options, clearOrKeep = function (msg, title, callback, clearButton, clear2Button) {
        var _a;
        if (clearButton === void 0) { clearButton = 'Clean'; }
        if (clear2Button === void 0) { clear2Button = 'Insert only Text'; }
        if (editor.events &&
            editor.e.fire('beforeOpenPasteDialog', msg, title, callback, clearButton, clear2Button) === false) {
            return;
        }
        var dialog = dialog_1.Confirm("<div style=\"word-break: normal; white-space: normal\">" + msg + "</div>", title, callback);
        dialog.bindDestruct(editor);
        helpers_1.markOwner(editor, dialog.container);
        var keep = button_1.Button(editor, '', 'Keep');
        var clear = button_1.Button(editor, '', clearButton);
        var clear2 = button_1.Button(editor, '', clear2Button);
        var cancel = button_1.Button(editor, '', 'Cancel');
        keep.onAction(function () {
            dialog.close();
            callback && callback(true);
        });
        clear.onAction(function () {
            dialog.close();
            callback && callback(false);
        });
        clear2.onAction(function () {
            dialog.close();
            callback && callback(0);
        });
        cancel.onAction(function () {
            dialog.close();
        });
        dialog.setFooter([keep, clear, clear2Button ? clear2 : '', cancel]);
        (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('afterOpenPasteDialog', dialog, msg, title, callback, clearButton, clear2Button);
        return dialog;
    };
    var insertByType = function (html, subtype) {
        if (helpers_1.isString(html)) {
            switch (subtype) {
                case constants_1.INSERT_CLEAR_HTML:
                    html = helpers_1.cleanFromWord(html);
                    break;
                case constants_1.INSERT_ONLY_TEXT:
                    html = helpers_1.stripTags(html);
                    break;
                case constants_1.INSERT_AS_TEXT:
                    html = helpers_1.htmlspecialchars(html);
                    break;
                default:
            }
        }
        if (editor.isInDestruct) {
            return;
        }
        if (helpers_1.isString(html)) {
            editor.buffer.set(cut_1.pluginKey, html);
        }
        editor.s.insertHTML(html);
    };
    var insertHTML = function (html, event) {
        var buffer = editor.buffer.get(cut_1.pluginKey);
        if (helpers_1.isHTML(html) && buffer !== trimFragment(html)) {
            html = trimFragment(html);
            var pasteHTMLByType_1 = function (insertType) {
                if (event.type === 'drop') {
                    editor.s.insertCursorAtPoint(event.clientX, event.clientY);
                }
                insertByType(html, insertType);
                editor.setEditorValue();
            };
            if (opt.askBeforePasteHTML) {
                clearOrKeep(editor.i18n('Your code is similar to HTML. Keep as HTML?'), editor.i18n('Paste as HTML'), function (agree) {
                    var insertType = constants_1.INSERT_AS_HTML;
                    if (agree === false) {
                        insertType = constants_1.INSERT_AS_TEXT;
                    }
                    if (agree === 0) {
                        insertType = constants_1.INSERT_ONLY_TEXT;
                    }
                    pasteHTMLByType_1(insertType);
                }, 'Insert as Text');
            }
            else {
                pasteHTMLByType_1(opt.defaultActionOnPaste);
            }
            return false;
        }
    };
    var trimFragment = function (html) {
        var start = html.search(/<!--StartFragment-->/i);
        if (start !== -1) {
            html = html.substr(start + 20);
        }
        var end = html.search(/<!--EndFragment-->/i);
        if (end !== -1) {
            html = html.substr(0, end);
        }
        return html;
    };
    var beforePaste = function (event) {
        var dt = exports.getDataTransfer(event);
        if (!dt || !event || !dt.getData) {
            return;
        }
        if (dt.getData(constants_1.TEXT_HTML)) {
            var processHTMLData_1 = function (html) {
                var buffer = editor.buffer.get(cut_1.pluginKey);
                if (opt.processPasteHTML &&
                    helpers_1.isHTML(html) &&
                    buffer !== trimFragment(html)) {
                    if (opt.processPasteFromWord && helpers_1.isHtmlFromWord(html)) {
                        var pasteFromWordByType_1 = function (method) {
                            var _a;
                            if (method === constants_1.INSERT_AS_HTML) {
                                html = helpers_1.applyStyles(html);
                                if (opt.beautifyHTML) {
                                    var value = (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('beautifyHTML', html);
                                    if (helpers_1.isString(value)) {
                                        html = value;
                                    }
                                }
                            }
                            if (method === constants_1.INSERT_AS_TEXT) {
                                html = helpers_1.cleanFromWord(html);
                            }
                            if (method === constants_1.INSERT_ONLY_TEXT) {
                                html = helpers_1.stripTags(helpers_1.cleanFromWord(html));
                            }
                            editor.s.insertHTML(html);
                            editor.setEditorValue();
                        };
                        if (opt.askBeforePasteFromWord) {
                            clearOrKeep(editor.i18n('The pasted content is coming from a Microsoft Word/Excel document. ' +
                                'Do you want to keep the format or clean it up?'), editor.i18n('Word Paste Detected'), function (agree) {
                                var insertType = constants_1.INSERT_AS_HTML;
                                if (agree === false) {
                                    insertType = constants_1.INSERT_AS_TEXT;
                                }
                                if (agree === 0) {
                                    insertType = constants_1.INSERT_ONLY_TEXT;
                                }
                                pasteFromWordByType_1(insertType);
                            });
                        }
                        else {
                            pasteFromWordByType_1(opt.defaultActionOnPaste);
                        }
                    }
                    else {
                        insertHTML(html, event);
                    }
                    return false;
                }
            };
            if (dt.types && Array.from(dt.types).includes(constants_1.TEXT_HTML)) {
                return processHTMLData_1(dt.getData(constants_1.TEXT_HTML));
            }
            if (event.type !== 'drop') {
                var div_1 = editor.c.div('', {
                    tabindex: -1,
                    contenteditable: true,
                    style: {
                        left: -9999,
                        top: 0,
                        width: 0,
                        height: '100%',
                        lineHeight: '140%',
                        overflow: 'hidden',
                        position: 'fixed',
                        zIndex: 2147483647,
                        wordBreak: 'break-all'
                    }
                });
                editor.container.appendChild(div_1);
                var selData_1 = editor.s.save();
                div_1.focus();
                var tick_1 = 0;
                var removeFakeFocus_1 = function () {
                    dom_1.Dom.safeRemove(div_1);
                    editor.selection && editor.s.restore(selData_1);
                };
                var waitData_1 = function () {
                    tick_1 += 1;
                    if (div_1.childNodes && div_1.childNodes.length > 0) {
                        var pastedData = div_1.innerHTML;
                        removeFakeFocus_1();
                        if (processHTMLData_1(pastedData) !== false) {
                            editor.s.insertHTML(pastedData);
                        }
                        return;
                    }
                    if (tick_1 < 5) {
                        editor.async.setTimeout(waitData_1, 20);
                    }
                    else {
                        removeFakeFocus_1();
                    }
                };
                waitData_1();
            }
        }
        if (dt.getData(constants_1.TEXT_PLAIN)) {
            return insertHTML(dt.getData(constants_1.TEXT_PLAIN), event);
        }
    };
    editor.e
        .off('paste.paste')
        .on('paste.paste', function (event) {
        if (beforePaste(event) === false ||
            editor.e.fire('beforePaste', event) === false) {
            event.preventDefault();
            return false;
        }
        var dt = exports.getDataTransfer(event);
        if (event && dt) {
            var types = dt.types;
            var types_str_1 = '';
            if (helpers_1.isArray(types) || helpers_1.type(types) === 'domstringlist') {
                for (var i = 0; i < types.length; i += 1) {
                    types_str_1 += types[i] + ';';
                }
            }
            else {
                types_str_1 = (types || constants_1.TEXT_PLAIN).toString() + ';';
            }
            var getText = function () {
                if (/text\/html/i.test(types_str_1)) {
                    return dt.getData('text/html');
                }
                if (/text\/rtf/i.test(types_str_1) && helpers_1.browser('safari')) {
                    return dt.getData('text/rtf');
                }
                if (/text\/plain/i.test(types_str_1) && !helpers_1.browser('mozilla')) {
                    return dt.getData(constants_1.TEXT_PLAIN);
                }
                if (/text/i.test(types_str_1) && constants_1.IS_IE) {
                    return dt.getData(constants_1.TEXT_PLAIN);
                }
                return null;
            };
            var clipboard_html = getText();
            if (dom_1.Dom.isNode(clipboard_html, editor.ew) ||
                (clipboard_html && helpers_1.trim(clipboard_html) !== '')) {
                clipboard_html = trimFragment(clipboard_html);
                var buffer = editor.buffer.get(cut_1.pluginKey);
                if (buffer !== clipboard_html) {
                    var result = editor.e.fire('processPaste', event, clipboard_html, types_str_1);
                    if (result !== undefined) {
                        clipboard_html = result;
                    }
                }
                if (helpers_1.isString(clipboard_html) ||
                    dom_1.Dom.isNode(clipboard_html, editor.ew)) {
                    if (event.type === 'drop') {
                        editor.s.insertCursorAtPoint(event.clientX, event.clientY);
                    }
                    insertByType(clipboard_html, opt.defaultActionOnPaste);
                }
                event.preventDefault();
                event.stopPropagation();
            }
        }
        if (editor.e.fire('afterPaste', event) === false) {
            return false;
        }
    });
    if (opt.nl2brInPlainText) {
        editor.e
            .off('processPaste.paste')
            .on('processPaste.paste', function (event, text, type) {
            if (type === constants_1.TEXT_PLAIN + ';' && !helpers_1.isHTML(text)) {
                return helpers_2.nl2br(text);
            }
        });
    }
}
exports.paste = paste;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.justify = exports.alignElement = exports.clearAlign = void 0;
var config_1 = __webpack_require__(4);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.controls.align = {
    name: 'left',
    tooltip: 'Align',
    update: function (button) {
        var editor = button.j, control = button.control, current = editor.s.current();
        if (current) {
            var currentBox = modules_1.Dom.closest(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor) || editor.editor;
            var currentValue = helpers_1.css(currentBox, 'text-align').toString();
            if (control.defaultValue &&
                control.defaultValue.indexOf(currentValue) !== -1) {
                currentValue = 'left';
            }
            if (control.data &&
                control.data.currentValue !== currentValue &&
                control.list &&
                control.list.indexOf(currentValue) !== -1) {
                if (editor.o.textIcons) {
                    button.state.text = currentValue;
                }
                else {
                    button.state.icon.name = currentValue;
                }
                control.data.currentValue = currentValue;
            }
        }
    },
    isActive: function (editor, btn) {
        var current = editor.s.current();
        if (current && btn.defaultValue) {
            var currentBox = modules_1.Dom.closest(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor) || editor.editor;
            return (btn.defaultValue.indexOf(helpers_1.css(currentBox, 'text-align').toString()) === -1);
        }
        return false;
    },
    defaultValue: ['left', 'start', 'inherit'],
    data: {
        currentValue: 'left'
    },
    list: ['center', 'left', 'right', 'justify']
};
config_1.Config.prototype.controls.center = {
    command: 'justifyCenter',
    css: {
        'text-align': 'center'
    },
    tooltip: 'Align Center'
};
config_1.Config.prototype.controls.justify = {
    command: 'justifyFull',
    css: {
        'text-align': 'justify'
    },
    tooltip: 'Align Justify'
};
config_1.Config.prototype.controls.left = {
    command: 'justifyLeft',
    css: {
        'text-align': 'left'
    },
    tooltip: 'Align Left'
};
config_1.Config.prototype.controls.right = {
    command: 'justifyRight',
    css: {
        'text-align': 'right'
    },
    tooltip: 'Align Right'
};
exports.clearAlign = function (node, editor) {
    modules_1.Dom.each(node, function (elm) {
        if (modules_1.Dom.isHTMLElement(elm, editor.ew)) {
            if (elm.style.textAlign) {
                elm.style.textAlign = '';
                if (!elm.style.cssText.trim().length) {
                    elm.removeAttribute('style');
                }
            }
        }
    });
};
exports.alignElement = function (command, box, editor) {
    if (modules_1.Dom.isNode(box, editor.ew) && modules_1.Dom.isElement(box)) {
        exports.clearAlign(box, editor);
        switch (command.toLowerCase()) {
            case 'justifyfull':
                box.style.textAlign = 'justify';
                break;
            case 'justifyright':
                box.style.textAlign = 'right';
                break;
            case 'justifyleft':
                box.style.textAlign = 'left';
                break;
            case 'justifycenter':
                box.style.textAlign = 'center';
                break;
        }
    }
};
function justify(editor) {
    var callback = function (command) {
        editor.s.focus();
        editor.s.eachSelection(function (current) {
            if (!current) {
                return;
            }
            var currentBox = modules_1.Dom.up(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor);
            if (!currentBox) {
                currentBox = modules_1.Dom.wrapInline(current, editor.o.enterBlock, editor);
            }
            exports.alignElement(command, currentBox, editor);
        });
        return false;
    };
    editor.registerCommand('justifyfull', callback);
    editor.registerCommand('justifyright', callback);
    editor.registerCommand('justifyleft', callback);
    editor.registerCommand('justifycenter', callback);
}
exports.justify = justify;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceEditor = void 0;
var SourceEditor = (function () {
    function SourceEditor(jodit, container, toWYSIWYG, fromWYSIWYG) {
        this.jodit = jodit;
        this.container = container;
        this.toWYSIWYG = toWYSIWYG;
        this.fromWYSIWYG = fromWYSIWYG;
        this.className = '';
        this.isReady = false;
    }
    Object.defineProperty(SourceEditor.prototype, "j", {
        get: function () {
            return this.jodit;
        },
        enumerable: false,
        configurable: true
    });
    SourceEditor.prototype.onReady = function () {
        this.replaceUndoManager();
        this.isReady = true;
        this.j.e.fire(this, 'ready');
    };
    SourceEditor.prototype.onReadyAlways = function (onReady) {
        var _a;
        if (!this.isReady) {
            (_a = this.j.events) === null || _a === void 0 ? void 0 : _a.on(this, 'ready', onReady);
        }
        else {
            onReady();
        }
    };
    return SourceEditor;
}());
exports.SourceEditor = SourceEditor;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(70);


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jodit = void 0;
__webpack_require__(71);
if ( true && typeof window !== 'undefined') {
    __webpack_require__(72);
}
var jodit_1 = __webpack_require__(78);
var langs_1 = __webpack_require__(198);
var decorators = __webpack_require__(13);
var consts = __webpack_require__(3);
var Modules = __webpack_require__(9);
var Plugins = __webpack_require__(218);
var Icons = __webpack_require__(297);
var config_1 = __webpack_require__(4);
var keep_names_1 = __webpack_require__(377);
Object.keys(consts).forEach(function (key) {
    jodit_1.Jodit[key] = consts[key];
});
var esFilter = function (key) { return key !== '__esModule'; };
Object.keys(Icons)
    .filter(esFilter)
    .forEach(function (key) {
    Modules.Icon.set(key.replace('_', '-'), Icons[key]);
});
Object.keys(Modules)
    .filter(esFilter)
    .forEach(function (key) {
    jodit_1.Jodit.modules[key] = Modules[key];
});
keep_names_1.keepModuleNames(jodit_1.Jodit.modules);
Object.keys(decorators)
    .filter(esFilter)
    .forEach(function (key) {
    jodit_1.Jodit.decorators[key] = decorators[key];
});
['Confirm', 'Alert', 'Prompt'].forEach(function (key) {
    jodit_1.Jodit[key] = Modules[key];
});
Object.keys(Plugins)
    .filter(esFilter)
    .forEach(function (key) {
    jodit_1.Jodit.plugins.add(key, Plugins[key]);
});
Object.keys(langs_1.default)
    .filter(esFilter)
    .forEach(function (key) {
    jodit_1.Jodit.lang[key] = langs_1.default[key];
});
jodit_1.Jodit.defaultOptions = config_1.Config.defaultOptions;
config_1.OptionsDefault.prototype = jodit_1.Jodit.defaultOptions;
exports.Jodit = jodit_1.Jodit;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(73);
__webpack_require__(74);
if (!Array.from) {
    Array.from = function (object) {
        'use strict';
        return [].slice.call(object);
    };
}
if (!Array.prototype.includes) {
    Array.prototype.includes = function (value) {
        return this.indexOf(value) > -1;
    };
}
if (!Array.prototype.find) {
    Array.prototype.find = function (value) {
        return this.indexOf(value) > -1 ? value : undefined;
    };
}


/***/ }),
/* 73 */
/***/ (function(module, exports) {

/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.1.20170427
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */

if ("document" in window.self) {

// Full polyfill for browsers with no classList support
// Including IE < Edge missing SVGElement.classList
if (!("classList" in document.createElement("_")) 
	|| document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg","g"))) {

(function (view) {

"use strict";

if (!('Element' in view)) return;

var
	  classListProp = "classList"
	, protoProp = "prototype"
	, elemCtrProto = view.Element[protoProp]
	, objCtr = Object
	, strTrim = String[protoProp].trim || function () {
		return this.replace(/^\s+|\s+$/g, "");
	}
	, arrIndexOf = Array[protoProp].indexOf || function (item) {
		var
			  i = 0
			, len = this.length
		;
		for (; i < len; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	}
	// Vendors: please allow content code to instantiate DOMExceptions
	, DOMEx = function (type, message) {
		this.name = type;
		this.code = DOMException[type];
		this.message = message;
	}
	, checkTokenAndGetIndex = function (classList, token) {
		if (token === "") {
			throw new DOMEx(
				  "SYNTAX_ERR"
				, "An invalid or illegal string was specified"
			);
		}
		if (/\s/.test(token)) {
			throw new DOMEx(
				  "INVALID_CHARACTER_ERR"
				, "String contains an invalid character"
			);
		}
		return arrIndexOf.call(classList, token);
	}
	, ClassList = function (elem) {
		var
			  trimmedClasses = strTrim.call(elem.getAttribute("class") || "")
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []
			, i = 0
			, len = classes.length
		;
		for (; i < len; i++) {
			this.push(classes[i]);
		}
		this._updateClassName = function () {
			elem.setAttribute("class", this.toString());
		};
	}
	, classListProto = ClassList[protoProp] = []
	, classListGetter = function () {
		return new ClassList(this);
	}
;
// Most DOMException implementations don't allow calling DOMException's toString()
// on non-DOMExceptions. Error's toString() is sufficient here.
DOMEx[protoProp] = Error[protoProp];
classListProto.item = function (i) {
	return this[i] || null;
};
classListProto.contains = function (token) {
	token += "";
	return checkTokenAndGetIndex(this, token) !== -1;
};
classListProto.add = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
	;
	do {
		token = tokens[i] + "";
		if (checkTokenAndGetIndex(this, token) === -1) {
			this.push(token);
			updated = true;
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.remove = function () {
	var
		  tokens = arguments
		, i = 0
		, l = tokens.length
		, token
		, updated = false
		, index
	;
	do {
		token = tokens[i] + "";
		index = checkTokenAndGetIndex(this, token);
		while (index !== -1) {
			this.splice(index, 1);
			updated = true;
			index = checkTokenAndGetIndex(this, token);
		}
	}
	while (++i < l);

	if (updated) {
		this._updateClassName();
	}
};
classListProto.toggle = function (token, force) {
	token += "";

	var
		  result = this.contains(token)
		, method = result ?
			force !== true && "remove"
		:
			force !== false && "add"
	;

	if (method) {
		this[method](token);
	}

	if (force === true || force === false) {
		return force;
	} else {
		return !result;
	}
};
classListProto.toString = function () {
	return this.join(" ");
};

if (objCtr.defineProperty) {
	var classListPropDesc = {
		  get: classListGetter
		, enumerable: true
		, configurable: true
	};
	try {
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	} catch (ex) { // IE 8 doesn't support enumerable:true
		// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
		// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
		if (ex.number === undefined || ex.number === -0x7FF5EC54) {
			classListPropDesc.enumerable = false;
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
		}
	}
} else if (objCtr[protoProp].__defineGetter__) {
	elemCtrProto.__defineGetter__(classListProp, classListGetter);
}

}(window.self));

}

// There is full or partial native classList support, so just check if we need
// to normalize the add/remove and toggle APIs.

(function () {
	"use strict";

	var testElement = document.createElement("_");

	testElement.classList.add("c1", "c2");

	// Polyfill for IE 10/11 and Firefox <26, where classList.add and
	// classList.remove exist but support only one argument at a time.
	if (!testElement.classList.contains("c2")) {
		var createMethod = function(method) {
			var original = DOMTokenList.prototype[method];

			DOMTokenList.prototype[method] = function(token) {
				var i, len = arguments.length;

				for (i = 0; i < len; i++) {
					token = arguments[i];
					original.call(this, token);
				}
			};
		};
		createMethod('add');
		createMethod('remove');
	}

	testElement.classList.toggle("c3", false);

	// Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	// support the second argument.
	if (testElement.classList.contains("c3")) {
		var _toggle = DOMTokenList.prototype.toggle;

		DOMTokenList.prototype.toggle = function(token, force) {
			if (1 in arguments && !this.contains(token) === !force) {
				return force;
			} else {
				return _toggle.call(this, token);
			}
		};

	}

	testElement = null;
}());

}


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');

module.exports = __webpack_require__(75).polyfill();


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    var then$$1 = void 0;
    try {
      then$$1 = value.then;
    } catch (error) {
      reject(promise, error);
      return;
    }
    handleMaybeThenable(promise, value, then$$1);
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = true;

  if (hasCallback) {
    try {
      value = callback(detail);
    } catch (e) {
      succeeded = false;
      error = e;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (succeeded === false) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = void 0;
      var error = void 0;
      var didError = false;
      try {
        _then = entry.then;
      } catch (e) {
        didError = true;
        error = e;
      }

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        if (didError) {
          reject(promise, error);
        } else {
          handleMaybeThenable(promise, entry, _then);
        }
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    if (isFunction(callback)) {
      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    }

    return promise.then(callback, callback);
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(76), __webpack_require__(77)))

/***/ }),
/* 76 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 77 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jodit = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var storage_1 = __webpack_require__(35);
var view_with_toolbar_1 = __webpack_require__(25);
var global_1 = __webpack_require__(12);
var decorators_1 = __webpack_require__(13);
var Jodit = (function (_super) {
    tslib_1.__extends(Jodit, _super);
    function Jodit(element, options) {
        var _a;
        var _this = _super.call(this, options) || this;
        _this.isJodit = true;
        _this.__defaultStyleDisplayKey = 'data-jodit-default-style-display';
        _this.__defaultClassesKey = 'data-jodit-default-classes';
        _this.commands = {};
        _this.__selectionLocked = null;
        _this.__wasReadOnly = false;
        _this.storage = storage_1.Storage.makeStorage(true, _this.id);
        _this.createInside = new modules_1.Create(function () { return _this.ed; }, _this.o.createAttributes);
        _this.editorIsActive = false;
        _this.__mode = consts.MODE_WYSIWYG;
        _this.__callChangeCount = 0;
        _this.elementToPlace = new Map();
        try {
            helpers_1.resolveElement(element, _this.o.shadowRoot || _this.od);
        }
        catch (e) {
            _this.destruct();
            throw e;
        }
        _this.setStatus(modules_1.STATUSES.beforeInit);
        if ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.events) {
            Object.keys(_this.o.events).forEach(function (key) {
                return _this.e.on(key, _this.o.events[key]);
            });
        }
        _this.e.on(_this.ow, 'resize', function () {
            if (_this.e) {
                _this.e.fire('resize');
            }
        });
        _this.selection = new modules_1.Select(_this);
        _this.initPlugins();
        _this.e.on('changePlace', function () {
            _this.setReadOnly(_this.o.readonly);
            _this.setDisabled(_this.o.disabled);
        });
        _this.places.length = 0;
        var addPlaceResult = _this.addPlace(element, options);
        Jodit.instances[_this.id] = _this;
        var init = function () {
            if (_this.e) {
                _this.e.fire('afterInit', _this);
            }
            _this.afterInitHook();
            _this.setStatus(modules_1.STATUSES.ready);
            _this.e.fire('afterConstructor', _this);
        };
        if (helpers_1.isPromise(addPlaceResult)) {
            addPlaceResult.finally(init);
        }
        else {
            init();
        }
        return _this;
    }
    Object.defineProperty(Jodit.prototype, "text", {
        get: function () {
            if (this.editor) {
                return this.editor.innerText || '';
            }
            var div = this.createInside.div();
            div.innerHTML = this.getElementValue();
            return div.innerText || '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "value", {
        get: function () {
            return this.getEditorValue();
        },
        set: function (html) {
            this.setEditorValue(html);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "defaultTimeout", {
        get: function () {
            return this.options && this.o.observer
                ? this.o.observer.timeout
                : Jodit.defaultOptions.observer.timeout;
        },
        enumerable: false,
        configurable: true
    });
    Jodit.Array = function (array) {
        return new helpers_1.JoditArray(array);
    };
    Jodit.Object = function (object) {
        return new helpers_1.JoditObject(object);
    };
    Jodit.make = function (element, options) {
        return new Jodit(element, options);
    };
    Jodit.prototype.setPlaceField = function (field, value) {
        if (!this.currentPlace) {
            this.currentPlace = {};
            this.places = [this.currentPlace];
        }
        this.currentPlace[field] = value;
    };
    Object.defineProperty(Jodit.prototype, "element", {
        get: function () {
            return this.currentPlace.element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "editor", {
        get: function () {
            return this.currentPlace.editor;
        },
        set: function (editor) {
            this.setPlaceField('editor', editor);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "container", {
        get: function () {
            return this.currentPlace.container;
        },
        set: function (container) {
            this.setPlaceField('container', container);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "workplace", {
        get: function () {
            return this.currentPlace.workplace;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "statusbar", {
        get: function () {
            return this.currentPlace.statusbar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "iframe", {
        get: function () {
            return this.currentPlace.iframe;
        },
        set: function (iframe) {
            this.setPlaceField('iframe', iframe);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "observer", {
        get: function () {
            return this.currentPlace.observer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "editorWindow", {
        get: function () {
            return this.currentPlace.editorWindow;
        },
        set: function (win) {
            this.setPlaceField('editorWindow', win);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "ew", {
        get: function () {
            return this.editorWindow;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "editorDocument", {
        get: function () {
            return this.currentPlace.editorWindow.document;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "ed", {
        get: function () {
            return this.editorDocument;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "options", {
        get: function () {
            return this.currentPlace.options;
        },
        set: function (opt) {
            this.setPlaceField('options', opt);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "s", {
        get: function () {
            return this.selection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "uploader", {
        get: function () {
            return this.getInstance('Uploader', this.o.uploader);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "filebrowser", {
        get: function () {
            var jodit = this;
            var options = tslib_1.__assign({ defaultTimeout: jodit.defaultTimeout, uploader: jodit.o.uploader, language: jodit.o.language, theme: jodit.o.theme, defaultCallback: function (data) {
                    if (data.files && data.files.length) {
                        data.files.forEach(function (file, i) {
                            var url = data.baseurl + file;
                            var isImage = data.isImages
                                ? data.isImages[i]
                                : false;
                            if (isImage) {
                                jodit.s.insertImage(url, null, jodit.o.imageDefaultWidth);
                            }
                            else {
                                jodit.s.insertNode(jodit.createInside.fromHTML("<a href=\"" + url + "\" title=\"" + url + "\">" + url + "</a>"));
                            }
                        });
                    }
                } }, this.o.filebrowser);
            return jodit.getInstance('FileBrowser', options);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Jodit.prototype, "mode", {
        get: function () {
            return this.__mode;
        },
        set: function (mode) {
            this.setMode(mode);
        },
        enumerable: false,
        configurable: true
    });
    Jodit.prototype.getNativeEditorValue = function () {
        var value;
        value = this.e.fire('beforeGetNativeEditorValue');
        if (helpers_1.isString(value)) {
            return value;
        }
        if (this.editor) {
            return this.editor.innerHTML;
        }
        return this.getElementValue();
    };
    Jodit.prototype.setNativeEditorValue = function (value) {
        if (this.e.fire('beforeSetNativeEditorValue', value)) {
            return;
        }
        if (this.editor) {
            this.editor.innerHTML = value;
        }
    };
    Jodit.prototype.getEditorValue = function (removeSelectionMarkers) {
        if (removeSelectionMarkers === void 0) { removeSelectionMarkers = true; }
        var value;
        value = this.e.fire('beforeGetValueFromEditor');
        if (value !== undefined) {
            return value;
        }
        value = this.getNativeEditorValue().replace(consts.INVISIBLE_SPACE_REG_EXP(), '');
        if (removeSelectionMarkers) {
            value = value.replace(/<span[^>]+id="jodit-selection_marker_[^>]+><\/span>/g, '');
        }
        if (value === '<br>') {
            value = '';
        }
        var new_value = { value: value };
        this.e.fire('afterGetValueFromEditor', new_value);
        return new_value.value;
    };
    Jodit.prototype.setEditorValue = function (value) {
        var newValue = this.e.fire('beforeSetValueToEditor', value);
        if (newValue === false) {
            return;
        }
        if (helpers_1.isString(newValue)) {
            value = newValue;
        }
        if (!this.editor) {
            if (value !== undefined) {
                this.setElementValue(value);
            }
            return;
        }
        if (!helpers_1.isString(value) && !helpers_1.isVoid(value)) {
            throw helpers_1.error('value must be string');
        }
        if (value !== undefined && this.getNativeEditorValue() !== value) {
            this.setNativeEditorValue(value);
        }
        this.e.fire('postProcessSetEditorValue');
        var old_value = this.getElementValue(), new_value = this.getEditorValue();
        if (old_value !== new_value &&
            this.__callChangeCount < consts.SAFE_COUNT_CHANGE_CALL) {
            this.setElementValue(new_value);
            this.__callChangeCount += 1;
            try {
                this.observer.upTick();
                this.e.fire('change', new_value, old_value);
                this.e.fire(this.observer, 'change', new_value, old_value);
            }
            finally {
                this.__callChangeCount = 0;
            }
        }
    };
    Jodit.prototype.getElementValue = function () {
        return this.element.value !== undefined
            ? this.element.value
            : this.element.innerHTML;
    };
    Jodit.prototype.setElementValue = function (value) {
        if (!helpers_1.isString(value) && value !== undefined) {
            throw helpers_1.error('value must be string');
        }
        if (value !== undefined) {
            if (this.element !== this.container) {
                if (this.element.value !== undefined) {
                    this.element.value = value;
                }
                else {
                    this.element.innerHTML = value;
                }
            }
        }
        else {
            value = this.getElementValue();
        }
        if (value !== this.getEditorValue()) {
            this.setEditorValue(value);
        }
    };
    Jodit.prototype.registerCommand = function (commandNameOriginal, command) {
        var commandName = commandNameOriginal.toLowerCase();
        if (this.commands[commandName] === undefined) {
            this.commands[commandName] = [];
        }
        this.commands[commandName].push(command);
        if (typeof command !== 'function') {
            var hotkeys = this.o.commandToHotkeys[commandName] ||
                this.o.commandToHotkeys[commandNameOriginal] ||
                command.hotkeys;
            if (hotkeys) {
                this.registerHotkeyToCommand(hotkeys, commandName);
            }
        }
        return this;
    };
    Jodit.prototype.registerHotkeyToCommand = function (hotkeys, commandName) {
        var _this = this;
        var shortcuts = helpers_1.asArray(hotkeys)
            .map(helpers_1.normalizeKeyAliases)
            .map(function (hotkey) { return hotkey + '.hotkey'; })
            .join(' ');
        this.e.off(shortcuts).on(shortcuts, function () {
            return _this.execCommand(commandName);
        });
    };
    Jodit.prototype.execCommand = function (command, showUI, value) {
        if (showUI === void 0) { showUI = false; }
        if (value === void 0) { value = null; }
        if (this.o.readonly && command !== 'selectall') {
            return;
        }
        var result;
        command = command.toLowerCase();
        result = this.e.fire('beforeCommand', command, showUI, value);
        if (result !== false) {
            result = this.execCustomCommands(command, showUI, value);
        }
        if (result !== false) {
            this.s.focus();
            if (command === 'selectall') {
                this.s.select(this.editor, true);
            }
            else {
                try {
                    result = this.ed.execCommand(command, showUI, value);
                }
                catch (e) {
                    if (false) {}
                }
            }
        }
        this.e.fire('afterCommand', command, showUI, value);
        this.setEditorValue();
        return result;
    };
    Jodit.prototype.execCustomCommands = function (commandName, second, third) {
        var _this = this;
        if (second === void 0) { second = false; }
        if (third === void 0) { third = null; }
        commandName = commandName.toLowerCase();
        if (this.commands[commandName] !== undefined) {
            var result_1;
            var exec = function (command) {
                var callback;
                if (helpers_1.isFunction(command)) {
                    callback = command;
                }
                else {
                    callback = command.exec;
                }
                var resultCurrent = callback.call(_this, commandName, second, third);
                if (resultCurrent !== undefined) {
                    result_1 = resultCurrent;
                }
            };
            for (var i = 0; i < this.commands[commandName].length; i += 1) {
                exec(this.commands[commandName][i]);
            }
            return result_1;
        }
    };
    Jodit.prototype.lock = function (name) {
        if (name === void 0) { name = 'any'; }
        if (_super.prototype.lock.call(this, name)) {
            this.__selectionLocked = this.s.save();
            this.s.clear();
            this.editor.classList.add('jodit_disabled');
            this.e.fire('lock', true);
            return true;
        }
        return false;
    };
    Jodit.prototype.unlock = function () {
        if (_super.prototype.unlock.call(this)) {
            this.editor.classList.remove('jodit_disabled');
            if (this.__selectionLocked) {
                this.s.restore(this.__selectionLocked);
            }
            this.e.fire('lock', false);
            return true;
        }
        return false;
    };
    Jodit.prototype.getMode = function () {
        return this.mode;
    };
    Jodit.prototype.isEditorMode = function () {
        return this.getRealMode() === consts.MODE_WYSIWYG;
    };
    Jodit.prototype.getRealMode = function () {
        if (this.getMode() !== consts.MODE_SPLIT) {
            return this.getMode();
        }
        var active = this.od.activeElement;
        if (active &&
            (modules_1.Dom.isOrContains(this.editor, active) ||
                modules_1.Dom.isOrContains(this.toolbar.container, active))) {
            return consts.MODE_WYSIWYG;
        }
        return consts.MODE_SOURCE;
    };
    Jodit.prototype.setMode = function (mode) {
        var _this = this;
        var oldmode = this.getMode();
        var data = {
            mode: parseInt(mode.toString(), 10)
        }, modeClasses = [
            'jodit-wysiwyg_mode',
            'jodit-source__mode',
            'jodit_split_mode'
        ];
        if (this.e.fire('beforeSetMode', data) === false) {
            return;
        }
        this.__mode = [
            consts.MODE_SOURCE,
            consts.MODE_WYSIWYG,
            consts.MODE_SPLIT
        ].includes(data.mode)
            ? data.mode
            : consts.MODE_WYSIWYG;
        if (this.o.saveModeInStorage) {
            this.storage.set('jodit_default_mode', this.mode);
        }
        modeClasses.forEach(function (className) {
            _this.container.classList.remove(className);
        });
        this.container.classList.add(modeClasses[this.mode - 1]);
        if (oldmode !== this.getMode()) {
            this.e.fire('afterSetMode');
        }
    };
    Jodit.prototype.toggleMode = function () {
        var mode = this.getMode();
        if ([
            consts.MODE_SOURCE,
            consts.MODE_WYSIWYG,
            this.o.useSplitMode ? consts.MODE_SPLIT : 9
        ].includes(mode + 1)) {
            mode += 1;
        }
        else {
            mode = consts.MODE_WYSIWYG;
        }
        this.setMode(mode);
    };
    Jodit.prototype.setDisabled = function (isDisabled) {
        this.o.disabled = isDisabled;
        var readOnly = this.__wasReadOnly;
        this.setReadOnly(isDisabled || readOnly);
        this.__wasReadOnly = readOnly;
        if (this.editor) {
            this.editor.setAttribute('aria-disabled', isDisabled.toString());
            this.container.classList.toggle('jodit_disabled', isDisabled);
            this.e.fire('disabled', isDisabled);
        }
    };
    Jodit.prototype.getDisabled = function () {
        return this.o.disabled;
    };
    Jodit.prototype.setReadOnly = function (isReadOnly) {
        if (this.__wasReadOnly === isReadOnly) {
            return;
        }
        this.__wasReadOnly = isReadOnly;
        this.o.readonly = isReadOnly;
        if (isReadOnly) {
            this.editor && this.editor.removeAttribute('contenteditable');
        }
        else {
            this.editor && this.editor.setAttribute('contenteditable', 'true');
        }
        this.e && this.e.fire('readonly', isReadOnly);
    };
    Jodit.prototype.getReadOnly = function () {
        return this.o.readonly;
    };
    Jodit.prototype.beforeInitHook = function () {
    };
    Jodit.prototype.afterInitHook = function () {
    };
    Jodit.prototype.initOptions = function (options) {
        this.options = config_1.configFactory(options);
    };
    Jodit.prototype.initOwners = function () {
        this.editorWindow = this.o.ownerWindow;
        this.ownerWindow = this.o.ownerWindow;
    };
    Jodit.prototype.addPlace = function (source, options) {
        var _this = this;
        var element = helpers_1.resolveElement(source, this.o.shadowRoot || this.od);
        if (!this.isReady) {
            this.id = helpers_1.attr(element, 'id') || new Date().getTime().toString();
            Jodit.instances[this.id] = this;
        }
        if (element.attributes) {
            Array.from(element.attributes).forEach(function (attr) {
                var name = attr.name;
                var value = attr.value;
                if (Jodit.defaultOptions[name] !== undefined &&
                    (!options || options[name] === undefined)) {
                    if (['readonly', 'disabled'].indexOf(name) !== -1) {
                        value = value === '' || value === 'true';
                    }
                    if (/^[0-9]+(\.)?([0-9]+)?$/.test(value.toString())) {
                        value = Number(value);
                    }
                    _this.options[name] = value;
                }
            });
        }
        var container = this.c.div('jodit-container');
        container.classList.add('jodit');
        container.classList.add('jodit-container');
        container.classList.add("jodit_theme_" + (this.o.theme || 'default'));
        container.setAttribute('contenteditable', 'false');
        var buffer = null;
        if (this.o.inline) {
            if (['TEXTAREA', 'INPUT'].indexOf(element.nodeName) === -1) {
                container = element;
                element.setAttribute(this.__defaultClassesKey, element.className.toString());
                buffer = container.innerHTML;
                container.innerHTML = '';
            }
            container.classList.add('jodit_inline');
            container.classList.add('jodit-container');
        }
        if (element !== container) {
            if (element.style.display) {
                element.setAttribute(this.__defaultStyleDisplayKey, element.style.display);
            }
            element.style.display = 'none';
        }
        var workplace = this.c.div('jodit-workplace', {
            contenteditable: false
        });
        container.appendChild(workplace);
        var statusbar = new modules_1.StatusBar(this, container);
        if (element.parentNode && element !== container) {
            element.parentNode.insertBefore(container, element);
        }
        var editor = this.c.div('jodit-wysiwyg', {
            contenteditable: true,
            'aria-disabled': false,
            tabindex: this.o.tabIndex
        });
        workplace.appendChild(editor);
        var currentPlace = {
            editor: editor,
            element: element,
            container: container,
            workplace: workplace,
            statusbar: statusbar,
            options: this.isReady ? config_1.configFactory(options) : this.options,
            observer: new modules_1.Observer(this),
            editorWindow: this.ow
        };
        this.elementToPlace.set(editor, currentPlace);
        this.setCurrentPlace(currentPlace);
        this.places.push(currentPlace);
        this.setNativeEditorValue(this.getElementValue());
        var initResult = this.initEditor(buffer);
        var opt = this.options;
        var init = function () {
            if (opt.enableDragAndDropFileToEditor &&
                opt.uploader &&
                (opt.uploader.url || opt.uploader.insertImageAsBase64URI)) {
                _this.uploader.bind(_this.editor);
            }
            if (!_this.elementToPlace.get(_this.editor)) {
                _this.elementToPlace.set(_this.editor, currentPlace);
            }
            _this.e.fire('afterAddPlace', currentPlace);
        };
        if (helpers_1.isPromise(initResult)) {
            return initResult.then(init);
        }
        init();
    };
    Jodit.prototype.setCurrentPlace = function (place) {
        if (this.currentPlace === place) {
            return;
        }
        if (!this.isEditorMode()) {
            this.setMode(consts.MODE_WYSIWYG);
        }
        this.currentPlace = place;
        this.buildToolbar();
        if (this.isReady) {
            this.e.fire('changePlace', place);
        }
    };
    Jodit.prototype.initPlugins = function () {
        this.beforeInitHook();
        this.e.fire('beforeInit', this);
        try {
            Jodit.plugins.init(this);
        }
        catch (e) {
            if (false) {}
        }
    };
    Jodit.prototype.initEditor = function (buffer) {
        var _this = this;
        var result = this.createEditor();
        var init = function () {
            if (_this.isInDestruct) {
                return;
            }
            if (_this.element !== _this.container) {
                _this.setElementValue();
            }
            else {
                buffer !== null && _this.setEditorValue(buffer);
            }
            var mode = _this.o.defaultMode;
            if (_this.o.saveModeInStorage) {
                var localMode = _this.storage.get('jodit_default_mode');
                if (typeof localMode === 'string') {
                    mode = parseInt(localMode, 10);
                }
            }
            _this.setMode(mode);
            if (_this.o.readonly) {
                _this.__wasReadOnly = false;
                _this.setReadOnly(true);
            }
            if (_this.o.disabled) {
                _this.setDisabled(true);
            }
            try {
                _this.ed.execCommand('defaultParagraphSeparator', false, _this.o.enter.toLowerCase());
            }
            catch (_a) { }
            try {
                _this.ed.execCommand('enableObjectResizing', false, 'false');
            }
            catch (_b) { }
            try {
                _this.ed.execCommand('enableInlineTableEditing', false, 'false');
            }
            catch (_c) { }
        };
        if (helpers_1.isPromise(result)) {
            return result.then(init);
        }
        init();
    };
    Jodit.prototype.createEditor = function () {
        var _this = this;
        var defaultEditorArea = this.editor;
        var stayDefault = this.e.fire('createEditor', this);
        var init = function () {
            if (_this.isInDestruct) {
                return;
            }
            if (stayDefault === false || helpers_1.isPromise(stayDefault)) {
                modules_1.Dom.safeRemove(defaultEditorArea);
            }
            if (_this.o.editorCssClass) {
                _this.editor.classList.add(_this.o.editorCssClass);
            }
            if (_this.o.style) {
                helpers_1.css(_this.editor, _this.o.style);
            }
            var editor = _this.editor;
            _this.e
                .on('synchro', function () {
                _this.setEditorValue();
            })
                .on('focus', function () {
                _this.editorIsActive = true;
            })
                .on('blur', function () { return (_this.editorIsActive = false); })
                .on(editor, 'mousedown touchstart focus', function () {
                var place = _this.elementToPlace.get(editor);
                if (place) {
                    _this.setCurrentPlace(place);
                }
            })
                .on(editor, 'compositionend', function () {
                _this.setEditorValue();
            })
                .on(editor, 'selectionchange selectionstart keydown keyup keypress dblclick mousedown mouseup ' +
                'click copy cut dragstart drop dragover paste resize touchstart touchend focus blur', function (event) {
                if (_this.o.readonly) {
                    return;
                }
                if (event instanceof KeyboardEvent &&
                    event.isComposing) {
                    return;
                }
                if (_this.e && _this.e.fire) {
                    if (_this.e.fire(event.type, event) === false) {
                        return false;
                    }
                    _this.setEditorValue();
                }
            });
            if (_this.o.spellcheck) {
                _this.editor.setAttribute('spellcheck', 'true');
            }
            if (_this.o.direction) {
                var direction = _this.o.direction.toLowerCase() === 'rtl' ? 'rtl' : 'ltr';
                _this.editor.style.direction = direction;
                _this.container.style.direction = direction;
                _this.editor.setAttribute('dir', direction);
                _this.container.setAttribute('dir', direction);
                _this.toolbar.setDirection(direction);
            }
            if (_this.o.triggerChangeEvent) {
                _this.e.on('change', _this.async.debounce(function () {
                    _this.e && _this.e.fire(_this.element, 'change');
                }, _this.defaultTimeout));
            }
        };
        if (helpers_1.isPromise(stayDefault)) {
            return stayDefault.then(init);
        }
        init();
    };
    Jodit.prototype.destruct = function () {
        var _this = this;
        if (this.isInDestruct) {
            return;
        }
        this.setStatus(modules_1.STATUSES.beforeDestruct);
        this.elementToPlace.clear();
        if (!this.editor) {
            return;
        }
        var buffer = this.getEditorValue();
        this.storage.clear();
        this.buffer.clear();
        delete this.buffer;
        this.commands = {};
        delete this.selection;
        this.__selectionLocked = null;
        this.e.off(this.ow, 'resize');
        this.e.off(this.ow);
        this.e.off(this.od);
        this.e.off(this.od.body);
        this.places.forEach(function (_a) {
            var container = _a.container, workplace = _a.workplace, statusbar = _a.statusbar, element = _a.element, iframe = _a.iframe, editor = _a.editor, observer = _a.observer;
            if (element !== container) {
                if (element.hasAttribute(_this.__defaultStyleDisplayKey)) {
                    var display = helpers_1.attr(element, _this.__defaultStyleDisplayKey);
                    if (display) {
                        element.style.display = display;
                        element.removeAttribute(_this.__defaultStyleDisplayKey);
                    }
                }
                else {
                    element.style.display = '';
                }
            }
            else {
                if (element.hasAttribute(_this.__defaultClassesKey)) {
                    element.className =
                        helpers_1.attr(element, _this.__defaultClassesKey) || '';
                    element.removeAttribute(_this.__defaultClassesKey);
                }
            }
            if (element.hasAttribute('style') && !helpers_1.attr(element, 'style')) {
                element.removeAttribute('style');
            }
            !statusbar.isInDestruct && statusbar.destruct();
            _this.e.off(container);
            _this.e.off(element);
            _this.e.off(editor);
            modules_1.Dom.safeRemove(workplace);
            modules_1.Dom.safeRemove(editor);
            if (container !== element) {
                modules_1.Dom.safeRemove(container);
            }
            modules_1.Dom.safeRemove(iframe);
            if (container === element) {
                element.innerHTML = buffer;
            }
            !observer.isInDestruct && observer.destruct();
        });
        this.places.length = 0;
        this.currentPlace = {};
        delete Jodit.instances[this.id];
        _super.prototype.destruct.call(this);
    };
    Jodit.plugins = global_1.pluginSystem;
    Jodit.modules = global_1.modules;
    Jodit.ns = global_1.modules;
    Jodit.decorators = {};
    Jodit.instances = global_1.instances;
    Jodit.lang = global_1.lang;
    tslib_1.__decorate([
        decorators_1.cache
    ], Jodit.prototype, "uploader", null);
    tslib_1.__decorate([
        decorators_1.cache
    ], Jodit.prototype, "filebrowser", null);
    return Jodit;
}(view_with_toolbar_1.ViewWithToolbar));
exports.Jodit = Jodit;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.markDeprecated = exports.cns = void 0;
var tslib_1 = __webpack_require__(0);
exports.cns = console;
function markDeprecated(method, names, ctx) {
    if (names === void 0) { names = ['']; }
    if (ctx === void 0) { ctx = null; }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        exports.cns.warn("Method \"" + names[0] + "\" deprecated." +
            (names[1] ? " Use \"" + names[1] + "\" instead" : ''));
        return method.call.apply(method, tslib_1.__spreadArrays([ctx], args));
    };
}
exports.markDeprecated = markDeprecated;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.markOwner = exports.attr = exports.call = void 0;
var checker_1 = __webpack_require__(5);
function call(func) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return func.apply(void 0, args);
}
exports.call = call;
function attr(elm, key, value) {
    if (!elm || !checker_1.isFunction(elm.getAttribute)) {
        return null;
    }
    if (/^-/.test(key)) {
        var res = attr(elm, "data" + key);
        if (res) {
            return res;
        }
        key = key.substr(1);
    }
    if (value !== undefined) {
        if (value === null) {
            elm.hasAttribute(key) && elm.removeAttribute(key);
        }
        else {
            elm.setAttribute(key, value.toString());
            return value.toString();
        }
    }
    return elm.getAttribute(key);
}
exports.attr = attr;
function markOwner(jodit, elm) {
    attr(elm, 'data-editor_id', jodit.id);
    !elm.component &&
        Object.defineProperty(elm, 'jodit', {
            value: jodit
        });
}
exports.markOwner = markOwner;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasBrowserColorPicker = void 0;
function hasBrowserColorPicker() {
    var supportsColor = true;
    try {
        var a = document.createElement('input');
        a.type = 'color';
        supportsColor =
            a.type === 'color' && typeof a.selectionStart !== 'number';
    }
    catch (e) {
        supportsColor = false;
    }
    return supportsColor;
}
exports.hasBrowserColorPicker = hasBrowserColorPicker;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArray = void 0;
var jodit_array_1 = __webpack_require__(26);
function isArray(elm) {
    return Array.isArray(elm) || elm instanceof jodit_array_1.JoditArray;
}
exports.isArray = isArray;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFastEqual = exports.isEqual = void 0;
var string_1 = __webpack_require__(11);
function isEqual(a, b) {
    return a === b || string_1.stringify(a) === string_1.stringify(b);
}
exports.isEqual = isEqual;
function isFastEqual(a, b) {
    return a === b;
}
exports.isFastEqual = isFastEqual;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.camelCase = void 0;
exports.camelCase = function (key) {
    return key.replace(/([-_])(.)/g, function (m, code, letter) {
        return letter.toUpperCase();
    });
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = void 0;
function stringify(value, options) {
    if (options === void 0) { options = {}; }
    if (typeof value !== 'object') {
        return value.toString ? value.toString() : value;
    }
    var excludeKeys = new Set(options.excludeKeys);
    var map = new WeakMap();
    var r = function (k, v) {
        if (excludeKeys.has(k)) {
            return;
        }
        if (typeof v === 'object' && v !== null) {
            if (map.get(v)) {
                return '[refObject]';
            }
            map.set(v, true);
        }
        return v;
    };
    return JSON.stringify(value, r, options.prettify);
}
exports.stringify = stringify;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.kebabCase = void 0;
exports.kebabCase = function (key) {
    return key
        .replace(/([A-Z])([A-Z])([a-z])/g, '$1-$2$3')
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .replace(/[\s_]+/g, '-')
        .toLowerCase();
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimInv = exports.trim = void 0;
var constants_1 = __webpack_require__(3);
function trim(value) {
    return value
        .replace(constants_1.SPACE_REG_EXP_END(), '')
        .replace(constants_1.SPACE_REG_EXP_START(), '');
}
exports.trim = trim;
function trimInv(value) {
    return value
        .replace(constants_1.INVISIBLE_SPACE_REG_EXP_END(), '')
        .replace(constants_1.INVISIBLE_SPACE_REG_EXP_START(), '');
}
exports.trimInv = trimInv;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ucfirst = void 0;
exports.ucfirst = function (value) {
    if (!value.length) {
        return '';
    }
    return value[0].toUpperCase() + value.substr(1);
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.i18n = exports.sprintf = void 0;
var config_1 = __webpack_require__(4);
var default_language_1 = __webpack_require__(38);
var index_1 = __webpack_require__(1);
var global_1 = __webpack_require__(12);
exports.sprintf = function (str, args) {
    if (!args || !args.length) {
        return str;
    }
    var reg = /%([sd])/g;
    var fnd = reg.exec(str);
    var res = str, i = 0;
    while (fnd && args[i] !== undefined) {
        res = res.replace(fnd[0], args[i].toString());
        i += 1;
        fnd = reg.exec(str);
    }
    return res;
};
exports.i18n = function (key, params, options) {
    if (!index_1.isString(key)) {
        throw index_1.error('i18n: Need string in first argument');
    }
    var debug = Boolean(options !== undefined && options.debugLanguage);
    var store;
    var parse = function (value) {
        return params && params.length ? exports.sprintf(value, params) : value;
    }, defaultLanguage = default_language_1.defaultLanguage(config_1.Config.defaultOptions.language, config_1.Config.defaultOptions.language), language = default_language_1.defaultLanguage(options === null || options === void 0 ? void 0 : options.language, defaultLanguage), tryGet = function (store) {
        if (!store) {
            return;
        }
        if (index_1.isString(store[key])) {
            return parse(store[key]);
        }
        var lcKey = key.toLowerCase();
        if (index_1.isString(store[lcKey])) {
            return parse(store[lcKey]);
        }
        var ucfKey = index_1.ucfirst(key);
        if (index_1.isString(store[ucfKey])) {
            return parse(store[ucfKey]);
        }
        return;
    };
    if (global_1.lang[language] !== undefined) {
        store = global_1.lang[language];
    }
    else {
        if (global_1.lang[defaultLanguage] !== undefined) {
            store = global_1.lang[defaultLanguage];
        }
        else {
            store = global_1.lang.en;
        }
    }
    var i18nOvr = options === null || options === void 0 ? void 0 : options.i18n;
    if (i18nOvr && i18nOvr[language]) {
        var result_1 = tryGet(i18nOvr[language]);
        if (result_1) {
            return result_1;
        }
    }
    var result = tryGet(store);
    if (result) {
        return result;
    }
    if (global_1.lang.en && index_1.isString(global_1.lang.en[key]) && global_1.lang.en[key]) {
        return parse(global_1.lang.en[key]);
    }
    if (debug) {
        return '{' + key + '}';
    }
    if (false) {}
    return parse(key);
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright 2013-2020 Valeriy Chupurnov https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsNative = void 0;
var tslib_1 = __webpack_require__(0);
var store_1 = __webpack_require__(40);
var helpers_1 = __webpack_require__(1);
var EventsNative = (function () {
    function EventsNative(doc) {
        var _this = this;
        this.__key = '__JoditEventsNativeNamespaces';
        this.doc = document;
        this.__stopped = [];
        this.prepareEvent = function (event) {
            if (event.cancelBubble) {
                return;
            }
            if (event.type.match(/^touch/) &&
                event.changedTouches &&
                event.changedTouches.length) {
                ['clientX', 'clientY', 'pageX', 'pageY'].forEach(function (key) {
                    Object.defineProperty(event, key, {
                        value: event.changedTouches[0][key],
                        configurable: true,
                        enumerable: true
                    });
                });
            }
            if (!event.originalEvent) {
                event.originalEvent = event;
            }
            if (event.type === 'paste' &&
                event.clipboardData === undefined &&
                _this.doc.defaultView.clipboardData) {
                Object.defineProperty(event, 'clipboardData', {
                    get: function () {
                        return _this.doc.defaultView.clipboardData;
                    },
                    configurable: true,
                    enumerable: true
                });
            }
        };
        this.currents = [];
        this.isDestructed = false;
        if (doc) {
            this.doc = doc;
        }
        this.__key += new Date().getTime();
    }
    EventsNative.prototype.eachEvent = function (events, callback) {
        var _this = this;
        var eventParts = events.split(/[\s,]+/);
        eventParts.forEach(function (eventNameSpace) {
            var eventAndNameSpace = eventNameSpace.split('.');
            var namespace = eventAndNameSpace[1] || store_1.defaultNameSpace;
            callback.call(_this, eventAndNameSpace[0], namespace);
        });
    };
    EventsNative.prototype.getStore = function (subject) {
        if (!subject) {
            throw helpers_1.error('Need subject');
        }
        if (subject[this.__key] === undefined) {
            var store = new store_1.EventHandlersStore();
            Object.defineProperty(subject, this.__key, {
                enumerable: false,
                configurable: true,
                value: store
            });
        }
        return subject[this.__key];
    };
    EventsNative.prototype.clearStore = function (subject) {
        if (subject[this.__key] !== undefined) {
            delete subject[this.__key];
        }
    };
    EventsNative.prototype.triggerNativeEvent = function (element, event) {
        var evt = this.doc.createEvent('HTMLEvents');
        if (typeof event === 'string') {
            evt.initEvent(event, true, true);
        }
        else {
            evt.initEvent(event.type, event.bubbles, event.cancelable);
            [
                'screenX',
                'screenY',
                'clientX',
                'clientY',
                'target',
                'srcElement',
                'currentTarget',
                'timeStamp',
                'which',
                'keyCode'
            ].forEach(function (property) {
                Object.defineProperty(evt, property, {
                    value: event[property],
                    enumerable: true
                });
            });
            Object.defineProperty(evt, 'originalEvent', {
                value: event,
                enumerable: true
            });
        }
        element.dispatchEvent(evt);
    };
    EventsNative.prototype.removeStop = function (currentBlocks) {
        if (currentBlocks) {
            var index = this.__stopped.indexOf(currentBlocks);
            index !== -1 && this.__stopped.splice(index, 1);
        }
    };
    EventsNative.prototype.isStopped = function (currentBlocks) {
        return (currentBlocks !== undefined &&
            this.__stopped.indexOf(currentBlocks) !== -1);
    };
    Object.defineProperty(EventsNative.prototype, "current", {
        get: function () {
            return this.currents[this.currents.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    EventsNative.prototype.on = function (subjectOrEvents, eventsOrCallback, handlerOrSelector, onTop) {
        var _this = this;
        if (onTop === void 0) { onTop = false; }
        var subject = helpers_1.isString(subjectOrEvents) ? this : subjectOrEvents;
        var events = helpers_1.isString(eventsOrCallback)
            ? eventsOrCallback
            : subjectOrEvents;
        var callback = handlerOrSelector;
        if (callback === undefined && helpers_1.isFunction(eventsOrCallback)) {
            callback = eventsOrCallback;
        }
        var store = this.getStore(subject);
        if (!helpers_1.isString(events) || events === '') {
            throw helpers_1.error('Need events names');
        }
        if (!helpers_1.isFunction(callback)) {
            throw helpers_1.error('Need event handler');
        }
        if (helpers_1.isArray(subject)) {
            subject.forEach(function (subj) {
                _this.on(subj, events, callback, onTop);
            });
            return this;
        }
        var isDOMElement = helpers_1.isFunction(subject.addEventListener), self = this;
        var syntheticCallback = function (event) {
            return callback && callback.apply(this, arguments);
        };
        if (isDOMElement) {
            syntheticCallback = function (event) {
                self.prepareEvent(event);
                if (callback && callback.call(this, event) === false) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    return false;
                }
                return;
            };
        }
        this.eachEvent(events, function (event, namespace) {
            if (event === '') {
                throw helpers_1.error('Need event name');
            }
            if (store.indexOf(event, namespace, callback) === false) {
                var block = {
                    event: event,
                    originalCallback: callback,
                    syntheticCallback: syntheticCallback
                };
                store.set(event, namespace, block, onTop);
                if (isDOMElement) {
                    subject.addEventListener(event, syntheticCallback, false);
                }
            }
        });
        return this;
    };
    EventsNative.prototype.off = function (subjectOrEvents, eventsOrCallback, handler) {
        var _this = this;
        var subject = helpers_1.isString(subjectOrEvents)
            ? this
            : subjectOrEvents;
        var events = helpers_1.isString(eventsOrCallback)
            ? eventsOrCallback
            : subjectOrEvents;
        var store = this.getStore(subject);
        var callback = handler;
        if (!helpers_1.isString(events) || !events) {
            store.namespaces().forEach(function (namespace) {
                _this.off(subject, '.' + namespace);
            });
            this.clearStore(subject);
            return this;
        }
        if (callback === undefined && helpers_1.isFunction(eventsOrCallback)) {
            callback = eventsOrCallback;
        }
        var isDOMElement = helpers_1.isFunction(subject.removeEventListener), removeEventListener = function (block) {
            if (isDOMElement) {
                subject.removeEventListener(block.event, block.syntheticCallback, false);
            }
        }, removeCallbackFromNameSpace = function (event, namespace) {
            if (event !== '') {
                var blocks = store.get(event, namespace);
                if (blocks && blocks.length) {
                    if (!helpers_1.isFunction(callback)) {
                        blocks.forEach(removeEventListener);
                        blocks.length = 0;
                    }
                    else {
                        var index = store.indexOf(event, namespace, callback);
                        if (index !== false) {
                            removeEventListener(blocks[index]);
                            blocks.splice(index, 1);
                        }
                    }
                }
            }
            else {
                store.events(namespace).forEach(function (eventName) {
                    if (eventName !== '') {
                        removeCallbackFromNameSpace(eventName, namespace);
                    }
                });
            }
        };
        this.eachEvent(events, function (event, namespace) {
            if (namespace === store_1.defaultNameSpace) {
                store.namespaces().forEach(function (name) {
                    removeCallbackFromNameSpace(event, name);
                });
            }
            else {
                removeCallbackFromNameSpace(event, namespace);
            }
        });
        return this;
    };
    EventsNative.prototype.stopPropagation = function (subjectOrEvents, eventsList) {
        var _this = this;
        var subject = helpers_1.isString(subjectOrEvents)
            ? this
            : subjectOrEvents;
        var events = helpers_1.isString(subjectOrEvents)
            ? subjectOrEvents
            : eventsList;
        if (typeof events !== 'string') {
            throw helpers_1.error('Need event names');
        }
        var store = this.getStore(subject);
        this.eachEvent(events, function (event, namespace) {
            var blocks = store.get(event, namespace);
            if (blocks) {
                _this.__stopped.push(blocks);
            }
            if (namespace === store_1.defaultNameSpace) {
                store
                    .namespaces(true)
                    .forEach(function (ns) {
                    return _this.stopPropagation(subject, event + '.' + ns);
                });
            }
        });
    };
    EventsNative.prototype.fire = function (subjectOrEvents, eventsList) {
        var _this = this;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result, result_value;
        var subject = helpers_1.isString(subjectOrEvents)
            ? this
            : subjectOrEvents;
        var events = helpers_1.isString(subjectOrEvents)
            ? subjectOrEvents
            : eventsList;
        var argumentsList = helpers_1.isString(subjectOrEvents)
            ? tslib_1.__spreadArrays([eventsList], args) : args;
        var isDOMElement = helpers_1.isFunction(subject.dispatchEvent);
        if (!isDOMElement && !helpers_1.isString(events)) {
            throw helpers_1.error('Need events names');
        }
        var store = this.getStore(subject);
        if (!helpers_1.isString(events) && isDOMElement) {
            this.triggerNativeEvent(subject, eventsList);
        }
        else {
            this.eachEvent(events, function (event, namespace) {
                if (isDOMElement) {
                    _this.triggerNativeEvent(subject, event);
                }
                else {
                    var blocks_1 = store.get(event, namespace);
                    if (blocks_1) {
                        try {
                            tslib_1.__spreadArrays(blocks_1).every(function (block) {
                                if (_this.isStopped(blocks_1)) {
                                    return false;
                                }
                                _this.currents.push(event);
                                result_value = block.syntheticCallback.apply(subject, argumentsList);
                                _this.currents.pop();
                                if (result_value !== undefined) {
                                    result = result_value;
                                }
                                return true;
                            });
                        }
                        catch (e) {
                            throw e;
                        }
                        finally {
                            _this.removeStop(blocks_1);
                        }
                    }
                    if (namespace === store_1.defaultNameSpace && !isDOMElement) {
                        store
                            .namespaces()
                            .filter(function (ns) { return ns !== namespace; })
                            .forEach(function (ns) {
                            var result_second = _this.fire.apply(_this, tslib_1.__spreadArrays([
                                subject,
                                event + '.' + ns
                            ], argumentsList));
                            if (result_second !== undefined) {
                                result = result_second;
                            }
                        });
                    }
                }
            });
        }
        return result;
    };
    EventsNative.prototype.destruct = function () {
        if (!this.isDestructed) {
            return;
        }
        this.isDestructed = true;
        this.off(this);
        this.getStore(this).clear();
        delete this[this.__key];
    };
    return EventsNative;
}());
exports.EventsNative = EventsNative;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright 2013-2020 Valeriy Chupurnov https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObserveObject = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var ObserveObject = (function () {
    function ObserveObject(data, prefix, onEvents) {
        var _this = this;
        if (prefix === void 0) { prefix = []; }
        if (onEvents === void 0) { onEvents = {}; }
        this.data = data;
        this.prefix = prefix;
        this.onEvents = onEvents;
        this.__lockEvent = {};
        Object.keys(data).forEach(function (key) {
            var prefix = _this.prefix.concat(key).filter(function (a) { return a.length; });
            Object.defineProperty(_this, key, {
                set: function (value) {
                    var oldValue = data[key];
                    if (!helpers_1.isFastEqual(oldValue, value)) {
                        _this.fire([
                            'beforeChange',
                            "beforeChange." + prefix.join('.')
                        ], key, value);
                        if (helpers_1.isPlainObject(value)) {
                            value = new ObserveObject(value, prefix, _this.onEvents);
                        }
                        data[key] = value;
                        var sum_1 = [];
                        _this.fire(tslib_1.__spreadArrays([
                            'change'
                        ], prefix.reduce(function (rs, p) {
                            sum_1.push(p);
                            rs.push("change." + sum_1.join('.'));
                            return rs;
                        }, [])), prefix.join('.'), oldValue, value.valueOf ? value.valueOf() : value);
                    }
                },
                get: function () {
                    return data[key];
                }
            });
            if (helpers_1.isPlainObject(data[key])) {
                data[key] = new ObserveObject(data[key], prefix, _this.onEvents);
            }
        });
    }
    ObserveObject.prototype.valueOf = function () {
        return this.data;
    };
    ObserveObject.prototype.toString = function () {
        return JSON.stringify(this.valueOf());
    };
    ObserveObject.prototype.on = function (event, callback) {
        var _this = this;
        if (helpers_1.isArray(event)) {
            event.map(function (e) { return _this.on(e, callback); });
            return this;
        }
        if (!this.onEvents[event]) {
            this.onEvents[event] = [];
        }
        this.onEvents[event].push(callback);
        return this;
    };
    ObserveObject.prototype.fire = function (event) {
        var _this = this;
        var attr = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            attr[_i - 1] = arguments[_i];
        }
        if (helpers_1.isArray(event)) {
            event.map(function (e) { return _this.fire.apply(_this, tslib_1.__spreadArrays([e], attr)); });
            return;
        }
        try {
            if (!this.__lockEvent[event] && this.onEvents[event]) {
                this.__lockEvent[event] = true;
                this.onEvents[event].forEach(function (clb) { return clb.call.apply(clb, tslib_1.__spreadArrays([_this], attr)); });
            }
        }
        catch (e) {
            throw e;
        }
        finally {
            this.__lockEvent[event] = false;
        }
    };
    ObserveObject.create = function (data, prefix) {
        if (prefix === void 0) { prefix = []; }
        if (data instanceof ObserveObject) {
            return data;
        }
        return new ObserveObject(data, prefix);
    };
    return ObserveObject;
}());
exports.ObserveObject = ObserveObject;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBoolean = void 0;
function isBoolean(elm) {
    return typeof elm === 'boolean';
}
exports.isBoolean = isBoolean;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHTML = void 0;
exports.isHTML = function (str) {
    return /<([A-Za-z][A-Za-z0-9]*)\b[^>]*>(.*?)<\/\1>/m.test(str);
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHtmlFromWord = void 0;
function isHtmlFromWord(data) {
    return (data.search(/<meta.*?Microsoft Excel\s[\d].*?>/) !== -1 ||
        data.search(/<meta.*?Microsoft Word\s[\d].*?>/) !== -1 ||
        (data.search(/style="[^"]*mso-/) !== -1 && data.search(/<font/) !== -1));
}
exports.isHtmlFromWord = isHtmlFromWord;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasContainer = exports.isDestructable = exports.isInitable = void 0;
var is_function_1 = __webpack_require__(28);
var dom_1 = __webpack_require__(2);
function isInitable(value) {
    return value && is_function_1.isFunction(value.init);
}
exports.isInitable = isInitable;
function isDestructable(value) {
    return value && is_function_1.isFunction(value.destruct);
}
exports.isDestructable = isDestructable;
function hasContainer(value) {
    return value && dom_1.Dom.isElement(value.container);
}
exports.hasContainer = hasContainer;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInt = void 0;
var is_numeric_1 = __webpack_require__(41);
var is_string_1 = __webpack_require__(21);
function isInt(value) {
    if (is_string_1.isString(value) && is_numeric_1.isNumeric(value)) {
        value = parseFloat(value);
    }
    return typeof value === 'number' && Number.isFinite(value) && !(value % 1);
}
exports.isInt = isInt;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isViewObject = exports.isJoditObject = void 0;
var is_function_1 = __webpack_require__(28);
function isJoditObject(jodit) {
    return Boolean(jodit &&
        jodit instanceof Object &&
        is_function_1.isFunction(jodit.constructor) &&
        (jodit instanceof Jodit || jodit.isJodit));
}
exports.isJoditObject = isJoditObject;
function isViewObject(jodit) {
    return Boolean(jodit &&
        jodit instanceof Object &&
        is_function_1.isFunction(jodit.constructor) &&
        (jodit instanceof Jodit.modules.View ||
            jodit.isView));
}
exports.isViewObject = isViewObject;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLicense = void 0;
var is_string_1 = __webpack_require__(21);
exports.isLicense = function (license) {
    return is_string_1.isString(license) && license.length === 32 && /^[a-z0-9]+$/.test(license);
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNumber = void 0;
function isNumber(value) {
    return typeof value === 'number' && !isNaN(value) && isFinite(value);
}
exports.isNumber = isNumber;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPlainObject = void 0;
var is_window_1 = __webpack_require__(42);
var type_1 = __webpack_require__(29);
function isPlainObject(obj) {
    if (!obj || typeof obj !== 'object' || obj.nodeType || is_window_1.isWindow(obj)) {
        return false;
    }
    return !(obj.constructor &&
        !type_1.hasOwn.call(obj.constructor.prototype, 'isPrototypeOf'));
}
exports.isPlainObject = isPlainObject;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isURL = void 0;
function isURL(str) {
    var pattern = new RegExp('^(https?:\\/\\/)' +
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|' +
        '((\\d{1,3}\\.){3}\\d{1,3}))' +
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' +
        '(\\?[;&a-z\\d%_.~+=-]*)?' +
        '(\\#[-a-z\\d_]*)?$', 'i');
    return pattern.test(str);
}
exports.isURL = isURL;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidName = void 0;
function isValidName(name) {
    if (!name.length) {
        return false;
    }
    if (/[^0-9A-Za-zа-яА-ЯЁё\w\-_.]/.test(name)) {
        return false;
    }
    return true;
}
exports.isValidName = isValidName;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isVoid = void 0;
function isVoid(value) {
    return value === undefined || value === null;
}
exports.isVoid = isVoid;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPromise = void 0;
function isPromise(val) {
    return val && typeof val.then === 'function';
}
exports.isPromise = isPromise;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = void 0;
var checker_1 = __webpack_require__(5);
function get(chain, obj) {
    if (!checker_1.isString(chain) || !chain.length) {
        return null;
    }
    var parts = chain.split('.');
    var result = obj;
    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
        var part = parts_1[_i];
        if (checker_1.isVoid(result[part])) {
            return null;
        }
        result = result[part];
    }
    if (checker_1.isVoid(result)) {
        return null;
    }
    return result;
}
exports.get = get;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClassName = exports.keepNames = void 0;
exports.keepNames = new Map();
exports.getClassName = function (obj) {
    if (exports.keepNames.has(obj.constructor)) {
        return exports.keepNames.get(obj.constructor);
    }
    if (obj.constructor.name) {
        return obj.constructor.name;
    }
    var regex = new RegExp(/^\s*function\s*(\S*)\s*\(/);
    var res = obj.constructor.toString().match(regex);
    return res ? res[1] : '';
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var as_array_1 = __webpack_require__(108);
Object.defineProperty(exports, "asArray", { enumerable: true, get: function () { return as_array_1.asArray; } });
var split_array_1 = __webpack_require__(109);
Object.defineProperty(exports, "splitArray", { enumerable: true, get: function () { return split_array_1.splitArray; } });


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.asArray = void 0;
var checker_1 = __webpack_require__(5);
exports.asArray = function (a) { return (checker_1.isArray(a) ? a : [a]); };


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitArray = void 0;
var checker_1 = __webpack_require__(5);
function splitArray(a) {
    return checker_1.isString(a) ? a.split(/[,\s]+/) : a;
}
exports.splitArray = splitArray;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(111), exports);


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearTimeout = exports.setTimeout = void 0;
var tslib_1 = __webpack_require__(0);
function setTimeout(callback, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (!timeout) {
        callback.call.apply(callback, tslib_1.__spreadArrays([null], args));
    }
    else {
        return window.setTimeout.apply(window, tslib_1.__spreadArrays([callback, timeout], args));
    }
    return 0;
}
exports.setTimeout = setTimeout;
function clearTimeout(timer) {
    window.clearTimeout(timer);
}
exports.clearTimeout = clearTimeout;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorToHex = void 0;
exports.colorToHex = function (color) {
    if (color === 'rgba(0, 0, 0, 0)' || color === '') {
        return false;
    }
    if (!color) {
        return '#000000';
    }
    if (color.substr(0, 1) === '#') {
        return color;
    }
    var digits = /([\s\n\t\r]*?)rgb\((\d+), (\d+), (\d+)\)/.exec(color) ||
        /([\s\n\t\r]*?)rgba\((\d+), (\d+), (\d+), ([\d.]+)\)/.exec(color);
    var hex, red, green, blue, rgb;
    if (!digits) {
        return '#000000';
    }
    red = parseInt(digits[2], 10);
    green = parseInt(digits[3], 10);
    blue = parseInt(digits[4], 10);
    rgb = blue | (green << 8) | (red << 16);
    hex = rgb.toString(16).toUpperCase();
    while (hex.length < 6) {
        hex = '0' + hex;
    }
    return digits[1] + '#' + hex;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(114), exports);
tslib_1.__exportStar(__webpack_require__(115), exports);
tslib_1.__exportStar(__webpack_require__(116), exports);
tslib_1.__exportStar(__webpack_require__(117), exports);
tslib_1.__exportStar(__webpack_require__(118), exports);


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyStyles = void 0;
var dom_1 = __webpack_require__(2);
var selector_1 = __webpack_require__(31);
var string_1 = __webpack_require__(11);
function normalizeCSS(s) {
    return s
        .replace(/mso-[a-z\-]+:[\s]*[^;]+;/gi, '')
        .replace(/mso-[a-z\-]+:[\s]*[^";]+$/gi, '')
        .replace(/border[a-z\-]*:[\s]*[^;]+;/gi, '')
        .replace(/([0-9.]+)(pt|cm)/gi, function (match, units, metrics) {
        switch (metrics.toLowerCase()) {
            case 'pt':
                return (parseFloat(units) * 1.328).toFixed(0) + 'px';
            case 'cm':
                return (parseFloat(units) * 0.02645833).toFixed(0) + 'px';
        }
        return match;
    });
}
function applyStyles(html) {
    if (html.indexOf('<html ') === -1) {
        return html;
    }
    html = html.substring(html.indexOf('<html '), html.length);
    html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);
    var iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    var convertedString = '', collection = [], rules = [];
    try {
        var iframeDoc = iframe.contentDocument ||
            (iframe.contentWindow ? iframe.contentWindow.document : null);
        if (iframeDoc) {
            iframeDoc.open();
            iframeDoc.write(html);
            iframeDoc.close();
            if (iframeDoc.styleSheets.length) {
                rules = iframeDoc.styleSheets[iframeDoc.styleSheets.length - 1].cssRules;
            }
            var _loop_1 = function (idx) {
                if (rules[idx].selectorText === '') {
                    return "continue";
                }
                collection = selector_1.$$(rules[idx].selectorText, iframeDoc.body);
                collection.forEach(function (elm) {
                    elm.style.cssText = normalizeCSS(rules[idx].style.cssText + ';' + elm.style.cssText);
                });
            };
            for (var idx = 0; idx < rules.length; idx += 1) {
                _loop_1(idx);
            }
            dom_1.Dom.each(iframeDoc.body, function (node) {
                if (dom_1.Dom.isElement(node)) {
                    var elm = node;
                    var css = elm.style.cssText;
                    if (css) {
                        elm.style.cssText = normalizeCSS(css);
                    }
                    if (elm.hasAttribute('lang')) {
                        elm.removeAttribute('lang');
                    }
                }
            });
            convertedString = iframeDoc.firstChild
                ? string_1.trim(iframeDoc.body.innerHTML)
                : '';
        }
    }
    catch (_a) {
    }
    finally {
        dom_1.Dom.safeRemove(iframe);
    }
    if (convertedString) {
        html = convertedString;
    }
    return string_1.trim(html
        .replace(/<(\/)?(html|colgroup|col|o:p)[^>]*>/g, '')
        .replace(/<!--[^>]*>/g, ''));
}
exports.applyStyles = applyStyles;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanFromWord = void 0;
var dom_1 = __webpack_require__(2);
var string_1 = __webpack_require__(11);
function cleanFromWord(html) {
    if (html.indexOf('<html ') !== -1) {
        html = html.substring(html.indexOf('<html '), html.length);
        html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);
    }
    var convertedString = '';
    try {
        var div = document.createElement('div');
        div.innerHTML = html;
        var marks_1 = [];
        if (div.firstChild) {
            dom_1.Dom.all(div, function (node) {
                if (!node) {
                    return;
                }
                switch (node.nodeType) {
                    case Node.ELEMENT_NODE:
                        switch (node.nodeName) {
                            case 'STYLE':
                            case 'LINK':
                            case 'META':
                                marks_1.push(node);
                                break;
                            case 'W:SDT':
                            case 'W:SDTPR':
                            case 'FONT':
                                dom_1.Dom.unwrap(node);
                                break;
                            default:
                                Array.from(node.attributes).forEach(function (attr) {
                                    if ([
                                        'src',
                                        'href',
                                        'rel',
                                        'content'
                                    ].indexOf(attr.name.toLowerCase()) ===
                                        -1) {
                                        node.removeAttribute(attr.name);
                                    }
                                });
                        }
                        break;
                    case Node.TEXT_NODE:
                        break;
                    default:
                        marks_1.push(node);
                }
            });
        }
        marks_1.forEach(dom_1.Dom.safeRemove);
        convertedString = div.innerHTML;
    }
    catch (e) { }
    if (convertedString) {
        html = convertedString;
    }
    html = html
        .split(/(\n)/)
        .filter(string_1.trim)
        .join('\n');
    return html
        .replace(/<(\/)?(html|colgroup|col|o:p)[^>]*>/g, '')
        .replace(/<!--[^>]*>/g, '');
}
exports.cleanFromWord = cleanFromWord;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.htmlspecialchars = void 0;
function htmlspecialchars(html) {
    var tmp = document.createElement('div');
    tmp.textContent = html;
    return tmp.innerHTML;
}
exports.htmlspecialchars = htmlspecialchars;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripTags = void 0;
var checker_1 = __webpack_require__(5);
var selector_1 = __webpack_require__(31);
var string_1 = __webpack_require__(11);
var dom_1 = __webpack_require__(2);
function stripTags(html, doc) {
    if (doc === void 0) { doc = document; }
    var tmp = doc.createElement('div');
    if (checker_1.isString(html)) {
        tmp.innerHTML = html;
    }
    else {
        tmp.appendChild(html);
    }
    selector_1.$$('DIV, P, BR, H1, H2, H3, H4, H5, H6, HR', tmp).forEach(function (p) {
        var pr = p.parentNode;
        if (!pr) {
            return;
        }
        var nx = p.nextSibling;
        if (dom_1.Dom.isText(nx) && /^\s/.test(nx.nodeValue || '')) {
            return;
        }
        if (nx) {
            pr.insertBefore(doc.createTextNode(' '), nx);
        }
    });
    return string_1.trim(tmp.innerText) || '';
}
exports.stripTags = stripTags;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.nl2br = void 0;
function nl2br(html) {
    return html.replace(/([^>])([\n\r]+)/g, '$1<br/>$2');
}
exports.nl2br = nl2br;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeKeyAliases = void 0;
var string_1 = __webpack_require__(11);
var constants_1 = __webpack_require__(3);
function normalizeKeyAliases(keys) {
    var memory = {};
    return keys
        .replace(/\+\+/g, '+add')
        .split(/[\s]*\+[\s]*/)
        .map(function (key) { return string_1.trim(key.toLowerCase()); })
        .map(function (key) { return constants_1.KEY_ALIASES[key] || key; })
        .sort()
        .filter(function (key) { return !memory[key] && key !== '' && (memory[key] = true); })
        .join('+');
}
exports.normalizeKeyAliases = normalizeKeyAliases;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeLicense = void 0;
exports.normalizeLicense = function (license, count) {
    if (count === void 0) { count = 8; }
    var parts = [];
    while (license.length) {
        parts.push(license.substr(0, count));
        license = license.substr(count);
    }
    parts[1] = parts[1].replace(/./g, '*');
    parts[2] = parts[2].replace(/./g, '*');
    return parts.join('-');
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeNode = void 0;
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
exports.normalizeNode = function (node) {
    if (!node) {
        return;
    }
    if (dom_1.Dom.isText(node) && node.nodeValue !== null && node.parentNode) {
        while (dom_1.Dom.isText(node.nextSibling)) {
            if (node.nextSibling.nodeValue !== null) {
                node.nodeValue += node.nextSibling.nodeValue;
            }
            node.nodeValue = node.nodeValue.replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '');
            dom_1.Dom.safeRemove(node.nextSibling);
        }
    }
    else {
        exports.normalizeNode(node.firstChild);
    }
    exports.normalizeNode(node.nextSibling);
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizePath = void 0;
var string_1 = __webpack_require__(11);
exports.normalizePath = function () {
    var path = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        path[_i] = arguments[_i];
    }
    return path
        .filter(function (part) { return string_1.trim(part).length; })
        .map(function (part, index) {
        part = part.replace(/([^:])[\\\/]+/g, '$1/');
        if (index) {
            part = part.replace(/^\//, '');
        }
        if (index !== path.length - 1) {
            part = part.replace(/\/$/, '');
        }
        return part;
    })
        .join('/');
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRelativePath = void 0;
exports.normalizeRelativePath = function (path) {
    var sections = path.split('/'), builder = sections.reduce(function (builder, section) {
        switch (section) {
            case '': {
                break;
            }
            case '.': {
                break;
            }
            case '..': {
                builder.pop();
                break;
            }
            default: {
                builder.push(section);
                break;
            }
        }
        return builder;
    }, []);
    return builder.join('/') + (path.endsWith('/') ? '/' : '');
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeSize = void 0;
exports.normalizeSize = function (value) {
    if (/^[0-9]+$/.test(value.toString())) {
        return value + 'px';
    }
    return value.toString();
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeUrl = void 0;
exports.normalizeUrl = function () {
    var urls = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        urls[_i] = arguments[_i];
    }
    return urls
        .filter(function (url) { return url.length; })
        .map(function (url) { return url.replace(/\/$/, ''); })
        .join('/')
        .replace(/([^:])[\\\/]+/g, '$1/');
};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeCssValue = void 0;
var checker_1 = __webpack_require__(5);
var string_1 = __webpack_require__(11);
var color_1 = __webpack_require__(30);
function normalizeCssValue(key, value) {
    switch (string_1.kebabCase(key)) {
        case 'font-weight':
            switch (value.toString().toLowerCase()) {
                case '700':
                case 'bold':
                    return 700;
                case '400':
                case 'normal':
                    return 400;
                case '900':
                case 'heavy':
                    return 900;
            }
            return checker_1.isNumeric(value) ? +value : value;
    }
    if (/color/i.test(key)) {
        return color_1.colorToHex(value.toString()) || value;
    }
    return value;
}
exports.normalizeCssValue = normalizeCssValue;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeColor = void 0;
var color_1 = __webpack_require__(30);
var string_1 = __webpack_require__(11);
exports.normalizeColor = function (colorInput) {
    var newcolor = ['#'];
    var color = color_1.colorToHex(colorInput);
    if (!color) {
        return false;
    }
    color = string_1.trim(color.toUpperCase());
    color = color.substr(1);
    if (color.length === 3) {
        for (var i = 0; i < 3; i += 1) {
            newcolor.push(color[i]);
            newcolor.push(color[i]);
        }
        return newcolor.join('');
    }
    if (color.length > 6) {
        color = color.substr(0, 6);
    }
    return '#' + color;
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(129), exports);
tslib_1.__exportStar(__webpack_require__(130), exports);
tslib_1.__exportStar(__webpack_require__(131), exports);
tslib_1.__exportStar(__webpack_require__(132), exports);


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContentWidth = void 0;
exports.getContentWidth = function (element, win) {
    var pi = function (value) { return parseInt(value, 10); }, style = win.getComputedStyle(element), width = element.offsetWidth, paddingLeft = pi(style.getPropertyValue('padding-left') || '0'), paddingRight = pi(style.getPropertyValue('padding-right') || '0');
    return width - paddingLeft - paddingRight;
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.innerWidth = void 0;
exports.innerWidth = function (element, win) {
    var computedStyle = win.getComputedStyle(element);
    var elementWidth = element.clientWidth;
    elementWidth -=
        parseFloat(computedStyle.paddingLeft || '0') +
            parseFloat(computedStyle.paddingRight || '0');
    return elementWidth;
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.offset = void 0;
exports.offset = function (elm, jodit, doc, recurse) {
    if (recurse === void 0) { recurse = false; }
    var rect;
    try {
        rect = elm.getBoundingClientRect();
    }
    catch (e) {
        rect = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            width: 0,
            height: 0
        };
    }
    var body = doc.body, docElem = doc.documentElement || {
        clientTop: 0,
        clientLeft: 0,
        scrollTop: 0,
        scrollLeft: 0
    }, win = doc.defaultView || doc.parentWindow, scrollTop = win.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0;
    var topValue, leftValue;
    var iframe = jodit.iframe;
    if (!recurse && jodit && jodit.options && jodit.o.iframe && iframe) {
        var _a = exports.offset(iframe, jodit, jodit.od, true), top_1 = _a.top, left = _a.left;
        topValue = rect.top + top_1;
        leftValue = rect.left + left;
    }
    else {
        topValue = rect.top + scrollTop - clientTop;
        leftValue = rect.left + scrollLeft - clientLeft;
    }
    return {
        top: Math.round(topValue),
        left: Math.round(leftValue),
        width: rect.width,
        height: rect.height
    };
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.position = void 0;
var checker_1 = __webpack_require__(5);
function position(elm, jodit, recurse) {
    if (recurse === void 0) { recurse = false; }
    var rect = elm.getBoundingClientRect();
    var xPos = rect.left, yPos = rect.top;
    if (checker_1.isJoditObject(jodit) && jodit.iframe && !recurse) {
        var _a = position(jodit.iframe, jodit, true), left = _a.left, top_1 = _a.top;
        xPos += left;
        yPos += top_1;
    }
    return {
        left: Math.round(xPos),
        top: Math.round(yPos),
        width: Math.round(elm.offsetWidth),
        height: Math.round(elm.offsetHeight)
    };
}
exports.position = position;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadNext = exports.appendStyleAsync = exports.appendScriptAsync = exports.appendScript = void 0;
var tslib_1 = __webpack_require__(0);
var complete_url_1 = __webpack_require__(43);
var checker_1 = __webpack_require__(5);
var alreadyLoadedList = new Map();
var cacheLoaders = function (loader) {
    return function (jodit, url) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var promise;
        return tslib_1.__generator(this, function (_a) {
            if (alreadyLoadedList.has(url)) {
                return [2, alreadyLoadedList.get(url)];
            }
            promise = loader(jodit, url);
            alreadyLoadedList.set(url, promise);
            return [2, promise];
        });
    }); };
};
exports.appendScript = function (jodit, url, callback) {
    var script = jodit.c.element('script');
    script.type = 'text/javascript';
    if (checker_1.isFunction(callback) && !jodit.isInDestruct) {
        jodit.e.on(script, 'load', callback);
    }
    if (!script.src) {
        script.src = complete_url_1.completeUrl(url);
    }
    jodit.od.body.appendChild(script);
    return {
        callback: callback,
        element: script
    };
};
exports.appendScriptAsync = cacheLoaders(function (jodit, url) {
    return new Promise(function (resolve, reject) {
        var element = exports.appendScript(jodit, url, resolve).element;
        !jodit.isInDestruct && jodit.e.on(element, 'error', reject);
    });
});
exports.appendStyleAsync = cacheLoaders(function (jodit, url) {
    return new Promise(function (resolve, reject) {
        var link = jodit.c.element('link');
        link.rel = 'stylesheet';
        link.media = 'all';
        link.crossOrigin = 'anonymous';
        var callback = function () { return resolve(link); };
        !jodit.isInDestruct &&
            jodit.e.on(link, 'load', callback).on(link, 'error', reject);
        link.href = complete_url_1.completeUrl(url);
        if (jodit.o.shadowRoot) {
            jodit.o.shadowRoot.appendChild(link);
        }
        else {
            jodit.od.body.appendChild(link);
        }
    });
});
exports.loadNext = function (jodit, urls, i) {
    if (i === void 0) { i = 0; }
    if (!checker_1.isString(urls[i])) {
        return Promise.resolve();
    }
    return exports.appendScriptAsync(jodit, urls[i]).then(function () {
        return exports.loadNext(jodit, urls, i + 1);
    });
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.browser = void 0;
exports.browser = function (browser) {
    var ua = navigator.userAgent.toLowerCase(), match = /(firefox)[\s\/]([\w.]+)/.exec(ua) ||
        /(chrome)[\s\/]([\w.]+)/.exec(ua) ||
        /(webkit)[\s\/]([\w.]+)/.exec(ua) ||
        /(opera)(?:.*version)[\s\/]([\w.]+)/.exec(ua) ||
        /(msie)[\s]([\w.]+)/.exec(ua) ||
        /(trident)\/([\w.]+)/.exec(ua) ||
        ua.indexOf('compatible') < 0 ||
        [];
    if (browser === 'version') {
        return match[2];
    }
    if (browser === 'webkit') {
        return match[1] === 'chrome' || match[1] === 'webkit';
    }
    if (browser === 'ff') {
        return match[1] === 'firefox';
    }
    if (browser === 'msie') {
        return match[1] === 'trident' || match[1] === 'msie';
    }
    return match[1] === browser;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertMediaUrlToVideoEmbed = void 0;
var checker_1 = __webpack_require__(5);
var parse_query_1 = __webpack_require__(44);
exports.convertMediaUrlToVideoEmbed = function (url, width, height) {
    if (width === void 0) { width = 400; }
    if (height === void 0) { height = 345; }
    if (!checker_1.isURL(url)) {
        return url;
    }
    var parser = document.createElement('a'), pattern1 = /(?:http?s?:\/\/)?(?:www\.)?(?:vimeo\.com)\/?(.+)/g;
    parser.href = url;
    if (!width) {
        width = 400;
    }
    if (!height) {
        height = 345;
    }
    var protocol = parser.protocol || '';
    switch (parser.hostname) {
        case 'www.vimeo.com':
        case 'vimeo.com':
            return pattern1.test(url)
                ? url.replace(pattern1, '<iframe width="' +
                    width +
                    '" height="' +
                    height +
                    '" src="' +
                    protocol +
                    '//player.vimeo.com/video/$1" frameborder="0" allowfullscreen></iframe>')
                : url;
        case 'youtube.com':
        case 'www.youtube.com':
        case 'youtu.be':
        case 'www.youtu.be':
            var query = parser.search
                ? parse_query_1.parseQuery(parser.search)
                : { v: parser.pathname.substr(1) };
            return query.v
                ? '<iframe width="' +
                    width +
                    '" height="' +
                    height +
                    '" src="' +
                    protocol +
                    '//www.youtube.com/embed/' +
                    query.v +
                    '" frameborder="0" allowfullscreen></iframe>'
                : url;
    }
    return url;
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearCenterAlign = exports.css = void 0;
var checker_1 = __webpack_require__(5);
var normalize_1 = __webpack_require__(32);
var string_1 = __webpack_require__(11);
exports.css = function (element, key, value, onlyStyleMode) {
    if (onlyStyleMode === void 0) { onlyStyleMode = false; }
    var numberFieldsReg = /^left|top|bottom|right|width|min|max|height|margin|padding|fontsize|font-size/i;
    if (checker_1.isPlainObject(key) || value !== undefined) {
        var setValue = function (elm, _key, _value) {
            if (!checker_1.isVoid(_value) &&
                numberFieldsReg.test(_key) &&
                checker_1.isNumeric(_value.toString())) {
                _value = parseInt(_value.toString(), 10) + 'px';
            }
            if (!checker_1.isVoid(_value) &&
                exports.css(elm, _key, undefined, true) !==
                    normalize_1.normalizeCssValue(_key, _value)) {
                elm.style[_key] = _value;
            }
        };
        if (checker_1.isPlainObject(key)) {
            var keys = Object.keys(key);
            for (var j = 0; j < keys.length; j += 1) {
                setValue(element, string_1.camelCase(keys[j]), key[keys[j]]);
            }
        }
        else {
            setValue(element, string_1.camelCase(key), value);
        }
        return '';
    }
    var key2 = string_1.kebabCase(key), doc = element.ownerDocument || document, win = doc ? doc.defaultView || doc.parentWindow : false;
    var currentValue = element.style[key];
    var result = '';
    if (currentValue !== undefined && currentValue !== '') {
        result = currentValue;
    }
    else if (win && !onlyStyleMode) {
        result = win.getComputedStyle(element).getPropertyValue(key2);
    }
    if (numberFieldsReg.test(key) &&
        /^[\-+]?[0-9.]+px$/.test(result.toString())) {
        result = parseInt(result.toString(), 10);
    }
    return normalize_1.normalizeCssValue(key, result);
};
exports.clearCenterAlign = function (image) {
    if (exports.css(image, 'display') === 'block') {
        exports.css(image, 'display', '');
    }
    if (image.style.marginLeft === 'auto' &&
        image.style.marginRight === 'auto') {
        image.style.marginLeft = '';
        image.style.marginRight = '';
    }
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ctrlKey = void 0;
exports.ctrlKey = function (e) {
    if (typeof navigator !== 'undefined' &&
        navigator.userAgent.indexOf('Mac OS X') !== -1) {
        if (e.metaKey && !e.altKey) {
            return true;
        }
    }
    else if (e.ctrlKey && !e.altKey) {
        return true;
    }
    return false;
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataBind = void 0;
var component_1 = __webpack_require__(7);
var checker_1 = __webpack_require__(5);
var store = new WeakMap();
exports.dataBind = function (elm, key, value) {
    var itemStore = store.get(elm);
    if (!itemStore) {
        itemStore = {};
        store.set(elm, itemStore);
        var e = null;
        if (elm instanceof component_1.ViewComponent) {
            e = elm.j.e;
        }
        if (checker_1.isViewObject(elm)) {
            e = elm.e;
        }
        e &&
            e.on('beforeDestruct', function () {
                store.delete(elm);
            });
    }
    if (value === undefined) {
        return itemStore[key];
    }
    itemStore[key] = value;
    return value;
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.each = void 0;
var checker_1 = __webpack_require__(5);
function each(obj, callback) {
    var length, keys, i;
    if (checker_1.isArray(obj)) {
        length = obj.length;
        for (i = 0; i < length; i += 1) {
            if (callback.call(obj[i], i, obj[i]) === false) {
                return false;
            }
        }
    }
    else {
        keys = Object.keys(obj);
        for (i = 0; i < keys.length; i += 1) {
            if (callback.call(obj[keys[i]], keys[i], obj[keys[i]]) === false) {
                return false;
            }
        }
    }
    return true;
}
exports.each = each;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.humanSizeToBytes = void 0;
exports.humanSizeToBytes = function (human) {
    if (/^[0-9.]+$/.test(human.toString())) {
        return parseFloat(human);
    }
    var format = human.substr(-2, 2).toUpperCase(), formats = ['KB', 'MB', 'GB', 'TB'], number = parseFloat(human.substr(0, human.length - 2));
    return formats.indexOf(format) !== -1
        ? number * Math.pow(1024, formats.indexOf(format) + 1)
        : parseInt(human, 10);
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildQuery = void 0;
var checker_1 = __webpack_require__(5);
exports.buildQuery = function (data, prefix) {
    var str = [];
    var enc = encodeURIComponent;
    for (var dataKey in data) {
        if (data.hasOwnProperty(dataKey)) {
            var k = prefix ? prefix + '[' + dataKey + ']' : dataKey;
            var v = data[dataKey];
            str.push(checker_1.isPlainObject(v) ? exports.buildQuery(v, k) : enc(k) + '=' + enc(v));
        }
    }
    return str.join('&');
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollIntoView = exports.inView = void 0;
exports.inView = function (elm, root, doc) {
    var rect = elm.getBoundingClientRect(), el = elm;
    var top = rect.top, height = rect.height;
    do {
        if (el && el.parentNode) {
            el = el.parentNode;
            rect = el.getBoundingClientRect();
            if (!(top <= rect.bottom)) {
                return false;
            }
            if (top + height <= rect.top) {
                return false;
            }
        }
    } while (el && el !== root && el.parentNode);
    return (top <= ((doc.documentElement && doc.documentElement.clientHeight) || 0));
};
exports.scrollIntoView = function (elm, root, doc) {
    if (!exports.inView(elm, root, doc)) {
        if (root.clientHeight !== root.scrollHeight) {
            root.scrollTop = elm.offsetTop;
        }
        if (!exports.inView(elm, root, doc)) {
            elm.scrollIntoView();
        }
    }
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.val = void 0;
exports.val = function (elm, selector, value) {
    var child = elm.querySelector(selector);
    if (!child) {
        return '';
    }
    if (value) {
        child.value = value;
    }
    return child.value;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPickerWidget = void 0;
__webpack_require__(145);
var helpers_1 = __webpack_require__(1);
var ui_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(2);
exports.ColorPickerWidget = function (editor, callback, coldColor) {
    var valueHex = helpers_1.normalizeColor(coldColor), form = editor.c.div('jodit-color-picker'), iconPalette = editor.o.textIcons
        ? "<span>" + editor.i18n('palette') + "</span>"
        : ui_1.Icon.get('palette'), eachColor = function (colors) {
        var stack = [];
        if (helpers_1.isPlainObject(colors)) {
            Object.keys(colors).forEach(function (key) {
                stack.push('<div class="jodit-color-picker__group jodit-color-picker__group-' +
                    key +
                    '">');
                stack.push(eachColor(colors[key]));
                stack.push('</div>');
            });
        }
        else if (helpers_1.isArray(colors)) {
            colors.forEach(function (color) {
                stack.push('<a ' +
                    (valueHex === color
                        ? ' class="jodit_active" '
                        : '') +
                    ' title="' +
                    color +
                    '" style="background-color:' +
                    color +
                    '" data-color="' +
                    color +
                    '" href="javascript:void(0)"></a>');
            });
        }
        return stack.join('');
    };
    form.appendChild(editor.c.fromHTML('<div class="jodit-color-picker__groups">' +
        eachColor(editor.o.colors) +
        '</div>'));
    form.appendChild(editor.c.fromHTML('<div data-ref="extra" class="jodit-color-picker__extra"></div>'));
    var extra = helpers_1.refs(form).extra;
    if (editor.o.showBrowserColorPicker && helpers_1.hasBrowserColorPicker()) {
        extra.appendChild(editor.c.fromHTML('<div class="jodit-color-picker__native">' +
            iconPalette +
            '<input type="color" value=""/>' +
            '</div>'));
        editor.e.on(form, 'change', function (e) {
            e.stopPropagation();
            var target = e.target;
            if (!target || !target.tagName || !dom_1.Dom.isTag(target, 'input')) {
                return;
            }
            var color = target.value || '';
            if (helpers_1.isFunction(callback)) {
                callback(color);
            }
            e.preventDefault();
        });
    }
    editor.e.on(form, 'mousedown touchend', function (e) {
        e.stopPropagation();
        var target = e.target;
        if ((!target ||
            !target.tagName ||
            dom_1.Dom.isTag(target, 'svg') ||
            dom_1.Dom.isTag(target, 'path')) &&
            target.parentNode) {
            target = dom_1.Dom.closest(target.parentNode, 'a', editor.editor);
        }
        if (!dom_1.Dom.isTag(target, 'a')) {
            return;
        }
        var color = helpers_1.attr(target, '-color') || '';
        if (callback && typeof callback === 'function') {
            callback(color);
        }
        e.preventDefault();
    });
    editor.e.fire('afterGenerateColorPicker', form, extra);
    return form;
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popup = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(148);
var autobind_decorator_1 = __webpack_require__(10);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var global_1 = __webpack_require__(12);
var __1 = __webpack_require__(8);
var Popup = (function (_super) {
    tslib_1.__extends(Popup, _super);
    function Popup(jodit) {
        var _this = _super.call(this, jodit) || this;
        _this.isOpened = false;
        _this.strategy = 'leftBottom';
        _this.viewBound = function () { return ({
            left: 0,
            top: 0,
            width: _this.ow.innerWidth,
            height: _this.ow.innerHeight
        }); };
        _this.childrenPopups = new Set();
        helpers_1.attr(_this.container, 'role', 'popup');
        return _this;
    }
    Popup.prototype.updateParentElement = function (target) {
        var _this = this;
        if (target !== this && target instanceof Popup) {
            this.childrenPopups.forEach(function (popup) {
                if (!target.closest(popup) && popup.isOpened) {
                    popup.close();
                }
            });
            if (!this.childrenPopups.has(target)) {
                this.j.e.on(target, 'beforeClose', function () {
                    _this.childrenPopups.delete(target);
                });
            }
            this.childrenPopups.add(target);
        }
        return _super.prototype.updateParentElement.call(this, target);
    };
    Popup.prototype.setContent = function (content) {
        dom_1.Dom.detach(this.container);
        var box = this.j.c.div(this.componentName + "__content");
        var elm;
        if (content instanceof __1.UIElement) {
            elm = content.container;
            content.parentElement = this;
        }
        else if (helpers_1.isString(content)) {
            elm = this.j.c.fromHTML(content);
        }
        else {
            elm = content;
        }
        box.appendChild(elm);
        this.container.appendChild(box);
        this.updatePosition();
        return this;
    };
    Popup.prototype.open = function (getBound, keepPosition) {
        if (keepPosition === void 0) { keepPosition = false; }
        helpers_1.markOwner(this.jodit, this.container);
        this.isOpened = true;
        this.addGlobalListeners();
        this.targetBound = !keepPosition
            ? getBound
            : this.getKeepBound(getBound);
        var parentContainer = global_1.getContainer(this.jodit, Popup);
        if (parentContainer !== this.container.parentElement) {
            parentContainer.appendChild(this.container);
        }
        this.updatePosition();
        this.j.e.fire(this, 'afterOpen');
        return this;
    };
    Popup.prototype.getKeepBound = function (getBound) {
        var _this = this;
        var oldBound = getBound();
        var elmUnderCursor = this.od.elementFromPoint(oldBound.left, oldBound.top);
        if (!elmUnderCursor) {
            return getBound;
        }
        var element = dom_1.Dom.isHTMLElement(elmUnderCursor, this.ow)
            ? elmUnderCursor
            : elmUnderCursor.parentElement;
        var oldPos = helpers_1.position(element, this.j);
        return function () {
            var bound = getBound();
            var newPos = helpers_1.position(element, _this.j);
            return tslib_1.__assign(tslib_1.__assign({}, bound), { top: bound.top + (newPos.top - oldPos.top), left: bound.left + (newPos.left - oldPos.left) });
        };
    };
    Popup.prototype.updatePosition = function () {
        if (!this.isOpened) {
            return this;
        }
        var _a = this.calculatePosition(this.targetBound(), this.viewBound(), helpers_1.position(this.container, this.j)), pos = _a[0], strategy = _a[1];
        this.setMod('strategy', strategy);
        helpers_1.css(this.container, {
            left: pos.left,
            top: pos.top
        });
        this.childrenPopups.forEach(function (popup) { return popup.updatePosition(); });
        return this;
    };
    Popup.prototype.calculatePosition = function (target, view, container, defaultStrategy) {
        if (defaultStrategy === void 0) { defaultStrategy = this.strategy; }
        var x = {
            left: target.left,
            right: target.left - (container.width - target.width)
        }, y = {
            bottom: target.top + target.height,
            top: target.top - container.height
        };
        var list = Object.keys(x).reduce(function (keys, xKey) {
            return keys.concat(Object.keys(y).map(function (yKey) { return "" + xKey + helpers_1.ucfirst(yKey); }));
        }, []);
        var getPointByStrategy = function (strategy) {
            var _a = helpers_1.kebabCase(strategy).split('-'), xKey = _a[0], yKey = _a[1];
            return {
                left: x[xKey],
                top: y[yKey],
                width: container.width,
                height: container.height
            };
        };
        var getMatchStrategy = function (inBox) {
            var strategy = null;
            if (Popup.boxInView(getPointByStrategy(defaultStrategy), inBox)) {
                strategy = defaultStrategy;
            }
            else {
                strategy =
                    list.find(function (key) {
                        if (Popup.boxInView(getPointByStrategy(key), inBox)) {
                            return key;
                        }
                        return;
                    }) || null;
            }
            return strategy;
        };
        var strategy = getMatchStrategy(helpers_1.position(this.j.container, this.j));
        if (!strategy || !Popup.boxInView(getPointByStrategy(strategy), view)) {
            strategy = getMatchStrategy(view) || strategy || defaultStrategy;
        }
        return [getPointByStrategy(strategy), strategy];
    };
    Popup.boxInView = function (box, view) {
        var accuracy = 2;
        return (box.top - view.top >= -accuracy &&
            box.left - view.left >= -accuracy &&
            view.top + view.height - (box.top + box.height) >= -accuracy &&
            view.left + view.width - (box.left + box.width) >= -accuracy);
    };
    Popup.prototype.close = function () {
        if (!this.isOpened) {
            return this;
        }
        this.isOpened = false;
        this.childrenPopups.forEach(function (popup) { return popup.close(); });
        this.j.e.fire(this, 'beforeClose');
        this.removeGlobalListeners();
        dom_1.Dom.safeRemove(this.container);
        return this;
    };
    Popup.prototype.closeOnOutsideClick = function (e) {
        if (!this.isOpened) {
            return;
        }
        if (!e.target) {
            this.close();
            return;
        }
        var box = __1.UIElement.closestElement(e.target, Popup);
        if (box && (this === box || box.closest(this))) {
            return;
        }
        this.close();
    };
    Popup.prototype.addGlobalListeners = function () {
        var up = this.updatePosition, ow = this.ow;
        global_1.eventEmitter.on('closeAllPopups', this.close);
        this.j.e
            .on('closeAllPopups', this.close)
            .on('escape', this.close)
            .on('resize', up)
            .on(this.container, 'scroll mousewheel', up)
            .on('mousedown touchstart', this.closeOnOutsideClick)
            .on(ow, 'mousedown touchstart', this.closeOnOutsideClick)
            .on(ow, 'scroll', up)
            .on(ow, 'resize', up);
    };
    Popup.prototype.removeGlobalListeners = function () {
        var up = this.updatePosition, ow = this.ow;
        global_1.eventEmitter.off('closeAllPopups', this.close);
        this.j.e
            .off('closeAllPopups', this.close)
            .off('escape', this.close)
            .off('resize', up)
            .off(this.container, 'scroll mousewheel', up)
            .off('mousedown touchstart', this.closeOnOutsideClick)
            .off(ow, 'mousedown touchstart', this.closeOnOutsideClick)
            .off(ow, 'scroll', up)
            .off(ow, 'resize', up);
    };
    Popup.prototype.destruct = function () {
        this.close();
        return _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Popup.prototype, "updatePosition", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Popup.prototype, "close", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Popup.prototype, "closeOnOutsideClick", null);
    return Popup;
}(__1.UIElement));
exports.Popup = Popup;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounce = void 0;
var helpers_1 = __webpack_require__(1);
var component_1 = __webpack_require__(7);
function debounce(timeout) {
    return function (target, propertyKey) {
        if (!helpers_1.isFunction(target[propertyKey])) {
            throw helpers_1.error('Handler must be a Function');
        }
        target.hookStatus(component_1.STATUSES.ready, function (component) {
            var view = helpers_1.isViewObject(component) ? component : component.j;
            component[propertyKey] = view.async.debounce(component[propertyKey].bind(component), (helpers_1.isFunction(timeout) ? timeout(component) : timeout) ||
                view.defaultTimeout);
        });
    };
}
exports.debounce = debounce;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = void 0;
var helpers_1 = __webpack_require__(1);
function cache(target, name, descriptor) {
    var getter = descriptor.get;
    if (!getter) {
        throw helpers_1.error('Getter property descriptor expected');
    }
    descriptor.get = function () {
        var value = getter.call(this);
        Object.defineProperty(this, name, {
            configurable: descriptor.configurable,
            enumerable: descriptor.enumerable,
            writable: false,
            value: value
        });
        return value;
    };
}
exports.cache = cache;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.wait = void 0;
var helpers_1 = __webpack_require__(1);
var component_1 = __webpack_require__(7);
function wait(condition) {
    return function (target, propertyKey) {
        if (!helpers_1.isFunction(target[propertyKey])) {
            throw helpers_1.error('Handler must be a Function');
        }
        target.hookStatus(component_1.STATUSES.ready, function (component) {
            var async = helpers_1.isViewObject(component)
                ? component.async
                : component.j.async;
            var realMethod = component[propertyKey];
            var timeout = 0;
            component[propertyKey] = function callProxy() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                async.clearTimeout(timeout);
                if (condition(component)) {
                    realMethod.apply(component, args);
                }
                else {
                    timeout = async.setTimeout(function () { return callProxy.apply(void 0, args); }, 10);
                }
            };
        });
    };
}
exports.wait = wait;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hook = void 0;
var helpers_1 = __webpack_require__(1);
function hook(status) {
    return function (target, propertyKey) {
        if (!helpers_1.isFunction(target[propertyKey])) {
            throw helpers_1.error('Handler must be a Function');
        }
        target.hookStatus(status, function (component) {
            target[propertyKey].call(component);
        });
    };
}
exports.hook = hook;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIList = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(155);
var button_1 = __webpack_require__(16);
var get_strong_control_types_1 = __webpack_require__(156);
var component_1 = __webpack_require__(7);
var decorators_1 = __webpack_require__(13);
var group_1 = __webpack_require__(52);
var separator_1 = __webpack_require__(51);
var helpers_1 = __webpack_require__(1);
var UIList = (function (_super) {
    tslib_1.__extends(UIList, _super);
    function UIList(jodit) {
        var _this = _super.call(this, jodit) || this;
        _this.mode = 'horizontal';
        _this.removeButtons = [];
        _this.onChangeMode();
        if (helpers_1.getClassName(_this) === helpers_1.getClassName(UIList.prototype)) {
            _this.setStatus(component_1.STATUSES.ready);
        }
        return _this;
    }
    UIList.prototype.onChangeMode = function () {
        this.setMod('mode', this.mode);
    };
    UIList.prototype.addGroup = function () {
        var group = new group_1.UIGroup(this.jodit);
        this.append(group);
        return group;
    };
    Object.defineProperty(UIList.prototype, "buttons", {
        get: function () {
            var walk = function (elms) {
                return elms.reduce(function (res, elm) {
                    if (elm instanceof group_1.UIGroup) {
                        return res.concat(walk(elm.elements));
                    }
                    if (elm instanceof button_1.UIButton) {
                        res.push(elm);
                    }
                    return res;
                }, []);
            };
            return walk(this.elements);
        },
        enumerable: false,
        configurable: true
    });
    UIList.prototype.getButtonsNames = function () {
        return this.buttons
            .map(function (a) { return (a instanceof button_1.UIButton && a.state.name) || ''; })
            .filter(function (a) { return a !== ''; });
    };
    UIList.prototype.setRemoveButtons = function (removeButtons) {
        this.removeButtons = removeButtons || [];
        return this;
    };
    UIList.prototype.build = function (items, target) {
        var _this = this;
        if (target === void 0) { target = null; }
        this.clear();
        var lastBtnSeparator = false;
        var group = this.addGroup();
        get_strong_control_types_1.getStrongControlTypes(items, this.j.o.controls)
            .filter(function (b) { return !_this.removeButtons.includes(b.name); })
            .forEach(function (control) {
            var elm = null;
            switch (control.name) {
                case '\n':
                    group = _this.addGroup();
                    break;
                case '|':
                    if (!lastBtnSeparator) {
                        lastBtnSeparator = true;
                        elm = new separator_1.UISeparator(_this.j);
                    }
                    break;
                default:
                    lastBtnSeparator = false;
                    elm = _this.makeButton(control, target);
            }
            elm && group.append(elm);
        });
        this.update();
        return this;
    };
    UIList.prototype.makeButton = function (control, target) {
        return new button_1.UIButton(this.j);
    };
    tslib_1.__decorate([
        decorators_1.watch('mode')
    ], UIList.prototype, "onChangeMode", null);
    return UIList;
}(group_1.UIGroup));
exports.UIList = UIList;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStrongControlTypes = void 0;
var tslib_1 = __webpack_require__(0);
var get_control_type_1 = __webpack_require__(157);
var config_1 = __webpack_require__(4);
var checker_1 = __webpack_require__(5);
function getStrongControlTypes(items, controls) {
    var elements = checker_1.isArray(items)
        ? items
        : Object.keys(items).map(function (key) {
            var value = items[key] || {};
            return tslib_1.__assign({ name: key }, value);
        });
    return elements.map(function (item) {
        return get_control_type_1.getControlType(item, controls || config_1.Config.defaultOptions.controls);
    });
}
exports.getStrongControlTypes = getStrongControlTypes;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getControlType = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
function getControlType(button, controls) {
    var buttonControl;
    if (!helpers_1.isString(button)) {
        buttonControl = tslib_1.__assign({ name: 'empty' }, button);
        if (controls[buttonControl.name] !== undefined) {
            buttonControl = tslib_1.__assign(tslib_1.__assign({}, controls[buttonControl.name]), buttonControl);
        }
    }
    else {
        var list = button.split(/\./);
        var store = controls;
        if (list.length > 1) {
            if (controls[list[0]] !== undefined) {
                store = controls[list[0]];
                button = list[1];
            }
        }
        if (store[button] !== undefined) {
            buttonControl = tslib_1.__assign({ name: button }, store[button]);
        }
        else {
            buttonControl = {
                name: button,
                command: button,
                tooltip: button
            };
        }
    }
    return buttonControl;
}
exports.getControlType = getControlType;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabsWidget = void 0;
__webpack_require__(159);
var helpers_1 = __webpack_require__(1);
var ui_1 = __webpack_require__(8);
exports.TabsWidget = function (editor, tabs, state) {
    var box = editor.c.div('jodit-tabs'), tabBox = editor.c.div('jodit-tabs__wrapper'), buttons = editor.c.div('jodit-tabs__buttons'), nameToTab = {}, buttonList = [];
    var firstTab = '', tabcount = 0;
    box.appendChild(buttons);
    box.appendChild(tabBox);
    tabs.forEach(function (_a) {
        var icon = _a.icon, name = _a.name, content = _a.content;
        var tab = editor.c.div('jodit-tab'), button = ui_1.Button(editor, icon || name, name);
        if (!firstTab) {
            firstTab = name;
        }
        buttons.appendChild(button.container);
        buttonList.push(button);
        button.container.classList.add('jodit-tabs__button', 'jodit-tabs__button_columns_' + tabs.length);
        if (!helpers_1.isFunction(content)) {
            tab.appendChild(content);
        }
        else {
            tab.appendChild(editor.c.div('jodit-tab_empty'));
        }
        tabBox.appendChild(tab);
        button.onAction(function () {
            buttonList.forEach(function (b) {
                b.state.activated = false;
            });
            helpers_1.$$('.jodit-tab', tabBox).forEach(function (a) {
                a.classList.remove('jodit-tab_active');
            });
            button.state.activated = true;
            tab.classList.add('jodit-tab_active');
            if (helpers_1.isFunction(content)) {
                content.call(editor);
            }
            if (state) {
                state.__activeTab = name;
            }
            return false;
        });
        nameToTab[name] = {
            button: button,
            tab: tab
        };
        tabcount += 1;
    });
    if (!tabcount) {
        return box;
    }
    helpers_1.$$('a', buttons).forEach(function (a) {
        a.style.width = (100 / tabcount).toFixed(10) + '%';
    });
    var tab = !state || !state.__activeTab || !nameToTab[state.__activeTab]
        ? firstTab
        : state.__activeTab;
    nameToTab[tab].button.state.activated = true;
    nameToTab[tab].tab.classList.add('jodit-tab_active');
    return box;
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSelectorWidget = void 0;
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var __1 = __webpack_require__(18);
exports.FileSelectorWidget = function (editor, callbacks, elm, close, isImage) {
    if (isImage === void 0) { isImage = true; }
    var currentImage;
    var tabs = [];
    if (callbacks.upload &&
        editor.o.uploader &&
        (editor.o.uploader.url || editor.o.uploader.insertImageAsBase64URI)) {
        var dragBox = editor.c.fromHTML('<div class="jodit-drag-and-drop__file-box">' +
            ("<strong>" + editor.i18n(isImage ? 'Drop image' : 'Drop file') + "</strong>") +
            ("<span><br>" + editor.i18n('or click') + "</span>") +
            ("<input type=\"file\" accept=\"" + (isImage ? 'image/*' : '*') + "\" tabindex=\"-1\" dir=\"auto\" multiple=\"\"/>") +
            '</div>');
        editor.uploader.bind(dragBox, function (resp) {
            var handler = helpers_1.isFunction(callbacks.upload)
                ? callbacks.upload
                : editor.o.uploader.defaultHandlerSuccess;
            if (helpers_1.isFunction(handler)) {
                handler.call(editor.uploader, resp);
            }
            editor.e.fire('closeAllPopups');
        }, function (error) {
            editor.e.fire('errorMessage', error.message);
            editor.e.fire('closeAllPopups');
        });
        tabs.push({
            icon: 'upload',
            name: 'Upload',
            content: dragBox
        });
    }
    if (callbacks.filebrowser) {
        if (editor.o.filebrowser.ajax.url || editor.o.filebrowser.items.url) {
            tabs.push({
                icon: 'folder',
                name: 'Browse',
                content: function () {
                    close && close();
                    if (callbacks.filebrowser) {
                        editor.filebrowser.open(callbacks.filebrowser, isImage);
                    }
                }
            });
        }
    }
    if (callbacks.url) {
        var form_1 = editor.c.fromHTML("<form onsubmit=\"return false;\" class=\"jodit-form\">\n\t\t\t\t\t\t<div class=\"jodit-form__group\">\n\t\t\t\t\t\t\t<input class=\"jodit-input\" type=\"text\" required name=\"url\" placeholder=\"http://\"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"jodit-form__group\">\n\t\t\t\t\t\t\t<input class=\"jodit-input\" type=\"text\" name=\"text\" placeholder=\"" + editor.i18n('Alternative text') + "\"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div style=\"text-align: right\"><button class=\"jodit-button\">" + editor.i18n('Insert') + "</button></div>\n\t\t\t\t\t</form>"), button = form_1.querySelector('button'), url_1 = form_1.querySelector('input[name=url]');
        currentImage = null;
        if (elm &&
            !dom_1.Dom.isText(elm) &&
            (dom_1.Dom.isTag(elm, 'img') || helpers_1.$$('img', elm).length)) {
            currentImage = elm.tagName === 'IMG' ? elm : helpers_1.$$('img', elm)[0];
            helpers_1.val(form_1, 'input[name=url]', helpers_1.attr(currentImage, 'src'));
            helpers_1.val(form_1, 'input[name=text]', helpers_1.attr(currentImage, 'alt'));
            button.textContent = editor.i18n('Update');
        }
        if (elm && dom_1.Dom.isTag(elm, 'a')) {
            helpers_1.val(form_1, 'input[name=url]', helpers_1.attr(elm, 'href'));
            helpers_1.val(form_1, 'input[name=text]', helpers_1.attr(elm, 'title'));
            button.textContent = editor.i18n('Update');
        }
        form_1.addEventListener('submit', function (event) {
            event.preventDefault();
            event.stopPropagation();
            if (!helpers_1.val(form_1, 'input[name=url]')) {
                url_1.focus();
                url_1.classList.add('jodit_error');
                return false;
            }
            if (typeof callbacks.url === 'function') {
                callbacks.url.call(editor, helpers_1.val(form_1, 'input[name=url]'), helpers_1.val(form_1, 'input[name=text]'));
            }
            return false;
        }, false);
        tabs.push({
            icon: 'link',
            name: 'URL',
            content: form_1
        });
    }
    return __1.TabsWidget(editor, tabs);
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = exports.StorageKey = void 0;
var helpers_1 = __webpack_require__(1);
var local_storage_provider_1 = __webpack_require__(56);
var memory_storage_provider_1 = __webpack_require__(55);
exports.StorageKey = 'Jodit_';
var Storage = (function () {
    function Storage(provider, suffix) {
        this.provider = provider;
        this.prefix = exports.StorageKey;
        if (suffix) {
            this.prefix += suffix;
        }
    }
    Storage.prototype.set = function (key, value) {
        this.provider.set(helpers_1.camelCase(this.prefix + key), value);
    };
    Storage.prototype.delete = function (key) {
        this.provider.delete(helpers_1.camelCase(this.prefix + key));
    };
    Storage.prototype.get = function (key) {
        return this.provider.get(helpers_1.camelCase(this.prefix + key));
    };
    Storage.prototype.exists = function (key) {
        return this.provider.exists(helpers_1.camelCase(this.prefix + key));
    };
    Storage.prototype.clear = function () {
        return this.provider.clear();
    };
    Storage.makeStorage = function (persistent, suffix) {
        if (persistent === void 0) { persistent = false; }
        var provider;
        if (persistent && local_storage_provider_1.canUsePersistentStorage()) {
            provider = new local_storage_provider_1.LocalStorageProvider(exports.StorageKey + suffix);
        }
        if (!provider) {
            provider = new memory_storage_provider_1.MemoryStorageProvider();
        }
        return new Storage(provider, suffix);
    };
    return Storage;
}());
exports.Storage = Storage;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Async = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var Async = (function () {
    function Async() {
        this.timers = new Map();
        this.promisesRejections = new Set();
        this.isDestructed = false;
    }
    Async.prototype.setTimeout = function (callback, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (this.isDestructed) {
            return 0;
        }
        var options = {};
        if (typeof timeout !== 'number') {
            options = timeout;
            timeout = options.timeout || 0;
        }
        if (options.label && this.timers.has(options.label)) {
            helpers_1.clearTimeout(this.timers.get(options.label));
            this.timers.delete(options.label);
        }
        var timer = helpers_1.setTimeout.apply(void 0, tslib_1.__spreadArrays([callback, timeout], args)), key = options.label || timer;
        this.timers.set(key, timer);
        return timer;
    };
    Async.prototype.clearTimeout = function (timer) {
        helpers_1.clearTimeout(timer);
        this.timers.delete(timer);
    };
    Async.prototype.debounce = function (fn, timeout) {
        var _this = this;
        var timer = 0, lastArgs;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            if (!timeout) {
                fn.apply(void 0, lastArgs);
            }
            else {
                helpers_1.clearTimeout(timer);
                timer = _this.setTimeout(function () { return fn.apply(void 0, lastArgs); }, timeout);
                _this.timers.set(fn, timer);
            }
        };
    };
    Async.prototype.throttle = function (fn, timeout) {
        var _this = this;
        var timer = null, needInvoke, callee, lastArgs;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            needInvoke = true;
            lastArgs = args;
            if (!timeout) {
                fn.apply(void 0, lastArgs);
                return;
            }
            if (!timer) {
                callee = function () {
                    if (needInvoke) {
                        fn.apply(void 0, lastArgs);
                        needInvoke = false;
                        timer = _this.setTimeout(callee, timeout);
                        _this.timers.set(callee, timer);
                    }
                    else {
                        timer = null;
                    }
                };
                callee();
            }
        };
    };
    Async.prototype.promise = function (executor) {
        var _this = this;
        var rejectCallback = function () { };
        var promise = new Promise(function (resolve, reject) {
            _this.promisesRejections.add(reject);
            rejectCallback = reject;
            return executor(resolve, reject);
        });
        promise.finally(function () {
            _this.promisesRejections.delete(rejectCallback);
        });
        return promise;
    };
    Async.prototype.promiseState = function (p) {
        var _this = this;
        if (p.status) {
            return p.status;
        }
        if (!Promise.race) {
            return new Promise(function (resolve) {
                p.then(function (v) {
                    resolve('fulfilled');
                    return v;
                }, function (e) {
                    resolve('rejected');
                    throw e;
                });
                _this.setTimeout(function () {
                    resolve('pending');
                }, 100);
            });
        }
        var t = {};
        return Promise.race([p, t]).then(function (v) { return (v === t ? 'pending' : 'fulfilled'); }, function () { return 'rejected'; });
    };
    Async.prototype.clear = function () {
        var _this = this;
        this.timers.forEach(function (key) {
            helpers_1.clearTimeout(_this.timers.get(key));
        });
        this.timers.clear();
        this.promisesRejections.forEach(function (reject) {
            reject();
        });
        this.promisesRejections.clear();
    };
    Async.prototype.destruct = function () {
        this.clear();
        this.isDestructed = true;
    };
    return Async;
}());
exports.Async = Async;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alert = void 0;
var dialog_1 = __webpack_require__(24);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var ui_1 = __webpack_require__(8);
exports.Alert = function (msg, title, callback, className) {
    if (className === void 0) { className = 'jodit-dialog_alert'; }
    if (helpers_1.isFunction(title)) {
        callback = title;
        title = undefined;
    }
    var dialog = new dialog_1.Dialog(), container = dialog.c.div(className), okButton = ui_1.Button(dialog, 'ok', 'Ok');
    helpers_1.asArray(msg).forEach(function (oneMessage) {
        container.appendChild(dom_1.Dom.isNode(oneMessage, dialog.ow)
            ? oneMessage
            : dialog.c.fromHTML(oneMessage));
    });
    okButton.onAction(function () {
        if (!callback || !helpers_1.isFunction(callback) || callback(dialog) !== false) {
            dialog.close();
        }
    });
    dialog.setFooter([okButton]);
    dialog.open(container, title || '&nbsp;', true, true);
    okButton.focus();
    return dialog;
};


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prompt = void 0;
var dialog_1 = __webpack_require__(24);
var ui_1 = __webpack_require__(8);
var helpers_1 = __webpack_require__(1);
exports.Prompt = function (msg, title, callback, placeholder, defaultValue) {
    var dialog = new dialog_1.Dialog(), cancelButton = ui_1.Button(dialog, 'cancel', 'Cancel'), okButton = ui_1.Button(dialog, 'ok', 'Ok'), form = dialog.c.element('form', {
        class: 'jodit-dialog_prompt'
    }), inputElement = dialog.c.element('input', {
        autofocus: true,
        class: 'jodit-input'
    }), labelElement = dialog.c.element('label');
    if (helpers_1.isFunction(title)) {
        callback = title;
        title = undefined;
    }
    if (placeholder) {
        helpers_1.attr(inputElement, 'placeholder', placeholder);
    }
    labelElement.appendChild(dialog.c.text(msg));
    form.appendChild(labelElement);
    form.appendChild(inputElement);
    cancelButton.onAction(dialog.close);
    var onclick = function () {
        if (!callback ||
            !helpers_1.isFunction(callback) ||
            callback(inputElement.value) !== false) {
            dialog.close();
        }
    };
    okButton.onAction(onclick);
    dialog.e.on(form, 'submit', function () {
        onclick();
        return false;
    });
    dialog.setFooter([okButton, cancelButton]);
    dialog.open(form, title || '&nbsp;', true, true);
    inputElement.focus();
    if (defaultValue !== undefined && defaultValue.length) {
        inputElement.value = defaultValue;
        inputElement.select();
    }
    return dialog;
};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Confirm = void 0;
var dialog_1 = __webpack_require__(24);
var helpers_1 = __webpack_require__(1);
var ui_1 = __webpack_require__(8);
exports.Confirm = function (msg, title, callback) {
    var dialog = new dialog_1.Dialog(), $div = dialog.c.fromHTML('<form class="jodit-dialog_prompt"></form>'), $label = dialog.c.element('label');
    if (helpers_1.isFunction(title)) {
        callback = title;
        title = undefined;
    }
    $label.appendChild(dialog.c.fromHTML(msg));
    $div.appendChild($label);
    var $cancel = ui_1.Button(dialog, 'cancel', 'Cancel');
    $cancel.onAction(function () {
        if (callback) {
            callback(false);
        }
        dialog.close();
    });
    var onok = function () {
        if (callback) {
            callback(true);
        }
        dialog.close();
    };
    var $ok = ui_1.Button(dialog, 'ok', 'Yes');
    $ok.onAction(onok);
    dialog.e.on($div, 'submit', function () {
        onok();
        return false;
    });
    dialog.setFooter([$ok, $cancel]);
    dialog.open($div, title || '&nbsp;', true, true);
    $ok.focus();
    return dialog;
};


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = void 0;
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var Create = (function () {
    function Create(document, createAttributes) {
        this.document = document;
        this.createAttributes = createAttributes;
        this.applyAttributes = function (elm, attrs) {
            helpers_1.each(attrs, function (key, value) {
                if (helpers_1.isPlainObject(value) && key === 'style') {
                    helpers_1.css(elm, value);
                }
                else {
                    if (key === 'className') {
                        key = 'class';
                    }
                    elm.setAttribute(helpers_1.kebabCase(key), value.toString());
                }
            });
        };
    }
    Object.defineProperty(Create.prototype, "doc", {
        get: function () {
            return helpers_1.isFunction(this.document) ? this.document() : this.document;
        },
        enumerable: false,
        configurable: true
    });
    Create.prototype.element = function (tagName, childrenOrAttributes, children) {
        var _this = this;
        var elm = this.doc.createElement(tagName.toLowerCase());
        if (this.createAttributes) {
            var ca = this.createAttributes;
            if (ca && ca[tagName.toLowerCase()]) {
                var attrs = ca[tagName.toLowerCase()];
                if (helpers_1.isFunction(attrs)) {
                    attrs(elm);
                }
                else if (helpers_1.isPlainObject(attrs)) {
                    this.applyAttributes(elm, attrs);
                }
            }
        }
        if (childrenOrAttributes) {
            if (helpers_1.isPlainObject(childrenOrAttributes)) {
                this.applyAttributes(elm, childrenOrAttributes);
            }
            else {
                children = childrenOrAttributes;
            }
        }
        if (children) {
            helpers_1.asArray(children).forEach(function (child) {
                return elm.appendChild(typeof child === 'string' ? _this.fromHTML(child) : child);
            });
        }
        return elm;
    };
    Create.prototype.div = function (className, childrenOrAttributes, children) {
        var div = this.element('div', childrenOrAttributes, children);
        if (className) {
            div.className = className;
        }
        return div;
    };
    Create.prototype.span = function (className, childrenOrAttributes, children) {
        var span = this.element('span', childrenOrAttributes, children);
        if (className) {
            span.className = className;
        }
        return span;
    };
    Create.prototype.a = function (className, childrenOrAttributes, children) {
        var a = this.element('a', childrenOrAttributes, children);
        if (className) {
            a.className = className;
        }
        return a;
    };
    Create.prototype.text = function (value) {
        return this.doc.createTextNode(value);
    };
    Create.prototype.fragment = function () {
        return this.doc.createDocumentFragment();
    };
    Create.prototype.fromHTML = function (html, refsToggleElement) {
        var div = this.div();
        div.innerHTML = html.toString();
        var child = div.firstChild !== div.lastChild || !div.firstChild
            ? div
            : div.firstChild;
        dom_1.Dom.safeRemove(child);
        if (refsToggleElement) {
            var refElements_1 = helpers_1.refs(child);
            Object.keys(refsToggleElement).forEach(function (key) {
                var elm = refElements_1[key];
                if (elm && refsToggleElement[key] === false) {
                    dom_1.Dom.hide(elm);
                }
            });
        }
        return child;
    };
    return Create;
}());
exports.Create = Create;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBrowser = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(174);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var dialog_1 = __webpack_require__(14);
var storage_1 = __webpack_require__(35);
var helpers_1 = __webpack_require__(1);
var view_with_toolbar_1 = __webpack_require__(25);
__webpack_require__(175);
var dom_1 = __webpack_require__(2);
var events_1 = __webpack_require__(20);
var item_1 = __webpack_require__(176);
var consts_1 = __webpack_require__(19);
var factories_1 = __webpack_require__(60);
var autobind_decorator_1 = __webpack_require__(10);
var state_listeners_1 = __webpack_require__(178);
var native_listeners_1 = __webpack_require__(61);
var self_listeners_1 = __webpack_require__(180);
var FileBrowser = (function (_super) {
    tslib_1.__extends(FileBrowser, _super);
    function FileBrowser(options) {
        var _this = _super.call(this, options) || this;
        _this.loader = _this.c.div(consts_1.F_CLASS + '__loader', consts_1.ICON_LOADER);
        _this.browser = _this.c.div(consts_1.F_CLASS + ' non-selected');
        _this.status_line = _this.c.div(consts_1.F_CLASS + '__status');
        _this.tree = _this.c.div(consts_1.F_CLASS + '__tree');
        _this.files = _this.c.div(consts_1.F_CLASS + '__files');
        _this.state = events_1.ObserveObject.create({
            activeElements: [],
            elements: [],
            folders: [],
            view: 'tiles',
            sortBy: 'changed-desc',
            filterWord: '',
            onlyImages: false
        });
        _this.errorHandler = function (resp) {
            if (resp instanceof Error) {
                _this.status(_this.i18n(resp.message));
            }
            else {
                _this.status(_this.o.getMessage(resp));
            }
        };
        _this.close = function () {
            _this.dialog.close();
        };
        _this.openImageEditor = function (href, name, path, source, onSuccess, onFailed) {
            return _this.getInstance('ImageEditor', _this.o).open(href, function (newname, box, success, failed) {
                var promise;
                if (box.action === 'resize') {
                    promise = _this.dataProvider.resize(path, source, name, newname, box.box);
                }
                else {
                    promise = _this.dataProvider.crop(path, source, name, newname, box.box);
                }
                promise
                    .then(function (resp) {
                    if (_this.o.isSuccess(resp)) {
                        _this.loadTree().then(function () {
                            success();
                            if (onSuccess) {
                                onSuccess();
                            }
                        });
                    }
                    else {
                        failed(helpers_1.error(_this.o.getMessage(resp)));
                        if (onFailed) {
                            onFailed(helpers_1.error(_this.o.getMessage(resp)));
                        }
                    }
                })
                    .catch(function (error) {
                    failed(error);
                    if (onFailed) {
                        onFailed(error);
                    }
                });
            });
        };
        _this.elementsMap = {};
        var self = _this;
        self.options = new config_1.OptionsDefault(helpers_1.extend(true, {}, self.options, config_1.Config.defaultOptions.filebrowser, options));
        self.storage = storage_1.Storage.makeStorage(_this.o.filebrowser.saveStateInStorage);
        self.dataProvider = factories_1.makeDataProvider(self, self.options);
        self.dialog = new dialog_1.Dialog({
            fullsize: self.o.fullsize,
            theme: self.o.theme,
            globalFullSize: self.o.globalFullSize,
            language: _this.o.language,
            buttons: ['fullsize', 'dialog.close']
        });
        if (self.o.showFoldersPanel) {
            self.browser.appendChild(self.tree);
        }
        self.browser.appendChild(self.files);
        self.browser.appendChild(self.status_line);
        self_listeners_1.selfListeners.call(self);
        native_listeners_1.nativeListeners.call(self);
        state_listeners_1.stateListeners.call(self);
        self.dialog.setSize(self.o.width, self.o.height);
        [
            'getLocalFileByUrl',
            'crop',
            'resize',
            'create',
            'fileMove',
            'folderMove',
            'fileRename',
            'folderRename',
            'fileRemove',
            'folderRemove',
            'folder',
            'items',
            'permissions'
        ].forEach(function (key) {
            if (_this.options[key] !== null) {
                _this.options[key] = helpers_1.extend(true, {}, _this.o.ajax, _this.options[key]);
            }
        });
        var view = _this.storage.get(consts_1.F_CLASS + '_view');
        if (view && _this.o.view === null) {
            self.state.view = view === 'list' ? 'list' : 'tiles';
        }
        else {
            self.state.view = self.o.view === 'list' ? 'list' : 'tiles';
        }
        _this.state.fire('change.view');
        var sortBy = self.storage.get(consts_1.F_CLASS + '_sortby');
        if (sortBy) {
            var parts = sortBy.split('-');
            self.state.sortBy = ['changed', 'name', 'size'].includes(parts[0])
                ? sortBy
                : 'changed-desc';
        }
        else {
            self.state.sortBy = self.o.sortBy || 'changed-desc';
        }
        self.initUploader(self);
        return _this;
    }
    FileBrowser.prototype.loadItems = function (path, source) {
        if (path === void 0) { path = this.dataProvider.currentPath; }
        if (source === void 0) { source = this.dataProvider.currentSource; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this.files.classList.add('jodit-filebrowser_active');
                this.files.appendChild(this.loader.cloneNode(true));
                return [2, this.dataProvider
                        .items(path, source)
                        .then(function (resp) {
                        var process = _this.o.items.process;
                        if (!process) {
                            process = _this.o.ajax.process;
                        }
                        if (process) {
                            var respData = process.call(self, resp);
                            _this.generateItemsList(respData.data.sources);
                            _this.state.activeElements = [];
                        }
                    })
                        .catch(function (error) {
                        dialog_1.Alert(error.message).bindDestruct(_this);
                        _this.errorHandler(error);
                    })];
            });
        });
    };
    FileBrowser.prototype.loadTree = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, source, errorUni, tree, items;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                path = this.dataProvider.currentPath, source = this.dataProvider.currentSource, errorUni = function (e) {
                    throw e instanceof Error ? e : helpers_1.error(e);
                };
                if (this.uploader) {
                    this.uploader.setPath(path);
                    this.uploader.setSource(source);
                }
                this.tree.classList.add('jodit-filebrowser_active');
                dom_1.Dom.detach(this.tree);
                this.tree.appendChild(this.loader.cloneNode(true));
                if (this.o.showFoldersPanel) {
                    tree = this.dataProvider
                        .tree(path, source)
                        .then(function (resp) {
                        var process = _this.o.folder.process;
                        if (!process) {
                            process = _this.o.ajax.process;
                        }
                        if (process) {
                            var respData = process.call(self, resp);
                            _this.generateFolderTree(respData.data.sources);
                        }
                    })
                        .catch(function (e) {
                        _this.errorHandler(errorUni(_this.i18n('Error on load folders')));
                        errorUni(e);
                    });
                    items = this.loadItems(path, source);
                    return [2, Promise.all([tree, items]).catch(helpers_1.error)];
                }
                else {
                    this.tree.classList.remove('jodit-filebrowser_active');
                }
                return [2];
            });
        });
    };
    FileBrowser.prototype.deleteFile = function (name, source) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2, this.dataProvider
                        .fileRemove(this.dataProvider.currentPath, name, source)
                        .then(function (resp) {
                        if (_this.o.remove && _this.o.remove.process) {
                            resp = _this.o.remove.process.call(_this, resp);
                        }
                        if (!_this.o.isSuccess(resp)) {
                            throw helpers_1.error(_this.o.getMessage(resp));
                        }
                        else {
                            _this.status(_this.o.getMessage(resp) ||
                                _this.i18n('File "%s" was deleted', name), true);
                        }
                    })
                        .catch(this.status)];
            });
        });
    };
    FileBrowser.prototype.generateFolderTree = function (sources) {
        var folders = [];
        helpers_1.each(sources, function (source_name, source) {
            source.folders.forEach(function (name) {
                folders.push({
                    name: name,
                    source: source,
                    sourceName: source_name
                });
            });
        });
        this.state.folders = folders;
    };
    FileBrowser.prototype.generateItemsList = function (sources) {
        var _this = this;
        var elements = [];
        var state = this.state, canBeFile = function (item) {
            return !_this.state.onlyImages ||
                item.isImage === undefined ||
                item.isImage;
        }, inFilter = function (item) {
            return !state.filterWord.length ||
                _this.o.filter === undefined ||
                _this.o.filter(item, state.filterWord);
        };
        helpers_1.each(sources, function (source_name, source) {
            if (source.files && source.files.length) {
                if (typeof _this.o.sort === 'function') {
                    source.files.sort(function (a, b) {
                        return _this.o.sort(a, b, state.sortBy);
                    });
                }
                source.files.forEach(function (item) {
                    if (inFilter(item) && canBeFile(item)) {
                        elements.push(item_1.FileBrowserItem.create(tslib_1.__assign(tslib_1.__assign({}, item), { sourceName: source_name, source: source })));
                    }
                });
            }
        });
        this.state.elements = elements;
    };
    FileBrowser.prototype.onSelect = function (callback) {
        var _this = this;
        return function () {
            if (_this.state.activeElements.length) {
                var files_1 = [];
                var isImages_1 = [];
                _this.state.activeElements.forEach(function (elm) {
                    var url = elm.fileURL;
                    if (url) {
                        files_1.push(url);
                        isImages_1.push(elm.isImage || false);
                    }
                });
                _this.close();
                var data = {
                    baseurl: '',
                    files: files_1,
                    isImages: isImages_1
                };
                if (helpers_1.isFunction(callback)) {
                    callback(data);
                }
                _this.close();
            }
            return false;
        };
    };
    FileBrowser.prototype.isOpened = function () {
        return this.dialog.isOpened && this.browser.style.display !== 'none';
    };
    FileBrowser.prototype.status = function (message, success) {
        var _this = this;
        if (!helpers_1.isString(message)) {
            message = message.message;
        }
        this.status_line.classList.remove('jodit-filebrowser_success');
        this.status_line.classList.add('jodit-filebrowser_active');
        var messageBox = this.c.div();
        messageBox.textContent = message;
        this.status_line.appendChild(messageBox);
        if (success) {
            this.status_line.classList.add('jodit-filebrowser_success');
        }
        this.async.setTimeout(function () {
            _this.status_line.classList.remove('jodit-filebrowser_active');
            dom_1.Dom.detach(_this.status_line);
        }, {
            timeout: this.o.howLongShowMsg,
            label: 'fileBrowser.status'
        });
    };
    FileBrowser.prototype.open = function (callback, onlyImages) {
        var _this = this;
        if (callback === void 0) { callback = this.o
            .defaultCallback; }
        if (onlyImages === void 0) { onlyImages = false; }
        this.state.onlyImages = onlyImages;
        return this.async.promise(function (resolve, reject) {
            if (!_this.o.items || !_this.o.items.url) {
                throw helpers_1.error('Need set options.filebrowser.ajax.url');
            }
            var localTimeout = 0;
            _this.e
                .off(_this.files, 'dblclick')
                .on(_this.files, 'dblclick', _this.onSelect(callback))
                .on(_this.files, 'touchstart', function () {
                var now = new Date().getTime();
                if (now - localTimeout < consts.EMULATE_DBLCLICK_TIMEOUT) {
                    _this.onSelect(callback)();
                }
                localTimeout = now;
            })
                .off('select.filebrowser')
                .on('select.filebrowser', _this.onSelect(callback));
            var header = _this.c.div();
            _this.toolbar.build(_this.o.buttons).appendTo(header);
            _this.dialog.open(_this.browser, header);
            _this.e.fire('sort.filebrowser', _this.state.sortBy);
            _this.loadTree().then(resolve, reject);
        });
    };
    FileBrowser.prototype.initUploader = function (editor) {
        var _this = this;
        var _a;
        var self = this, uploaderOptions = helpers_1.extend(true, {}, config_1.Config.defaultOptions.uploader, self.o.uploader, tslib_1.__assign({}, (_a = editor === null || editor === void 0 ? void 0 : editor.options) === null || _a === void 0 ? void 0 : _a.uploader));
        var uploadHandler = function () {
            _this.loadItems();
        };
        self.uploader = self.getInstance('Uploader', uploaderOptions);
        self.uploader.setPath(self.dataProvider.currentPath);
        self.uploader.setSource(self.dataProvider.currentSource);
        self.uploader.bind(self.browser, uploadHandler, self.errorHandler);
        self.e.on('bindUploader.filebrowser', function (button) {
            self.uploader.bind(button, uploadHandler, self.errorHandler);
        });
    };
    FileBrowser.prototype.destruct = function () {
        if (this.isInDestruct) {
            return;
        }
        this.dialog.destruct();
        delete this.dialog;
        this.events && this.e.off('.filebrowser');
        this.uploader && this.uploader.destruct();
        delete this.uploader;
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], FileBrowser.prototype, "status", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], FileBrowser.prototype, "open", null);
    return FileBrowser;
}(view_with_toolbar_1.ViewWithToolbar));
exports.FileBrowser = FileBrowser;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
var consts_1 = __webpack_require__(19);
var ui_1 = __webpack_require__(8);
config_1.Config.prototype.filebrowser = {
    extraButtons: [],
    filter: function (item, search) {
        search = search.toLowerCase();
        if (helpers_1.isString(item)) {
            return item.toLowerCase().indexOf(search) !== -1;
        }
        if (helpers_1.isString(item.name)) {
            return item.name.toLowerCase().indexOf(search) !== -1;
        }
        if (helpers_1.isString(item.file)) {
            return item.file.toLowerCase().indexOf(search) !== -1;
        }
        return true;
    },
    sortBy: 'changed-desc',
    sort: function (a, b, sortBy) {
        var _a = sortBy.toLowerCase().split('-'), sortAttr = _a[0], arrow = _a[1], asc = arrow === 'asc';
        var compareStr = function (f, s) {
            if (f < s) {
                return asc ? -1 : 1;
            }
            if (f > s) {
                return asc ? 1 : -1;
            }
            return 0;
        };
        if (helpers_1.isString(a)) {
            return compareStr(a.toLowerCase(), b.toLowerCase());
        }
        if (a[sortAttr] === undefined || sortAttr === 'name') {
            if (helpers_1.isString(a.name)) {
                return compareStr(a.name.toLowerCase(), b.name.toLowerCase());
            }
            if (helpers_1.isString(a.file)) {
                return compareStr(a.file.toLowerCase(), b.file.toLowerCase());
            }
            return 0;
        }
        switch (sortAttr) {
            case 'changed': {
                var f = new Date(a.changed).getTime(), s = new Date(b.changed).getTime();
                return asc ? f - s : s - f;
            }
            case 'size': {
                var f = helpers_1.humanSizeToBytes(a.size), s = helpers_1.humanSizeToBytes(b.size);
                return asc ? f - s : s - f;
            }
        }
        return 0;
    },
    editImage: true,
    preview: true,
    showPreviewNavigation: true,
    showSelectButtonInPreview: true,
    contextMenu: true,
    howLongShowMsg: 3000,
    createNewFolder: true,
    deleteFolder: true,
    moveFolder: true,
    moveFile: true,
    showFoldersPanel: true,
    width: 859,
    height: 400,
    buttons: [
        'filebrowser.upload',
        'filebrowser.remove',
        'filebrowser.update',
        'filebrowser.select',
        'filebrowser.edit',
        '|',
        'filebrowser.tiles',
        'filebrowser.list',
        '|',
        'filebrowser.filter',
        '|',
        'filebrowser.sort'
    ],
    removeButtons: [],
    fullsize: false,
    showTooltip: true,
    view: null,
    isSuccess: function (resp) {
        return resp.success;
    },
    getMessage: function (resp) {
        return resp.data.messages !== undefined && helpers_1.isArray(resp.data.messages)
            ? resp.data.messages.join(' ')
            : '';
    },
    showFileName: true,
    showFileSize: true,
    showFileChangeTime: true,
    saveStateInStorage: true,
    getThumbTemplate: function (item, source, source_name) {
        var opt = this.options, showName = opt.showFileName, showSize = opt.showFileSize && item.size, showTime = opt.showFileChangeTime && item.time;
        var name = '', info;
        if (item.file !== undefined) {
            name = item.file;
        }
        info = "<div class=\"" + consts_1.ITEM_CLASS + "-info\">" + (showName ? "<span class=\"" + consts_1.ITEM_CLASS + "-info-filename\">" + name + "</span>" : '') + (showSize
            ? "<span class=\"" + consts_1.ITEM_CLASS + "-info-filesize\">" + item.size + "</span>"
            : '') + (showTime
            ? "<span class=\"" + consts_1.ITEM_CLASS + "-info-filechanged\">" + showTime + "</span>"
            : '') + "</div>";
        return "<a\n\t\t\tdata-jodit-filebrowser-item=\"true\"\n\t\t\tdata-is-file=\"" + (item.isImage ? 0 : 1) + "\"\n\t\t\tdraggable=\"true\"\n\t\t\tclass=\"" + consts_1.ITEM_CLASS + "\"\n\t\t\thref=\"" + item.fileURL + "\"\n\t\t\tdata-source=\"" + source_name + "\"\n\t\t\tdata-path=\"" + item.path + "\"\n\t\t\tdata-name=\"" + name + "\"\n\t\t\ttitle=\"" + name + "\"\n\t\t\tdata-url=\"" + item.fileURL + "\">\n\t\t\t\t<img\n\t\t\t\t\tdata-is-file=\"" + (item.isImage ? 0 : 1) + "\"\n\t\t\t\t\tdata-src=\"" + item.fileURL + "\"\n\t\t\t\t\tsrc=\"" + item.imageURL + "\"\n\t\t\t\t\talt=\"" + name + "\"\n\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t/>\n\t\t\t\t" + (showName || showSize || showTime ? info : '') + "\n\t\t\t</a>";
    },
    ajax: {
        url: '',
        async: true,
        data: {},
        cache: true,
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        method: 'POST',
        processData: true,
        dataType: 'json',
        headers: {},
        prepareData: function (data) {
            return data;
        },
        process: function (resp) {
            return resp;
        }
    },
    create: {
        data: { action: 'folderCreate' }
    },
    getLocalFileByUrl: {
        data: { action: 'getLocalFileByUrl' }
    },
    resize: {
        data: { action: 'imageResize' }
    },
    crop: {
        data: { action: 'imageCrop' }
    },
    fileMove: {
        data: { action: 'fileMove' }
    },
    folderMove: {
        data: { action: 'folderMove' }
    },
    fileRename: {
        data: { action: 'fileRename' }
    },
    folderRename: {
        data: { action: 'folderRename' }
    },
    fileRemove: {
        data: { action: 'fileRemove' }
    },
    folderRemove: {
        data: { action: 'folderRemove' }
    },
    items: {
        data: { action: 'files' }
    },
    folder: {
        data: { action: 'folders' }
    },
    permissions: {
        data: { action: 'permissions' }
    }
};
config_1.Config.prototype.controls.filebrowser = {
    upload: {
        icon: 'plus',
        isInput: true,
        isDisabled: function (browser) {
            return !browser.dataProvider.canI('FileUpload');
        },
        getContent: function (filebrowser, control) {
            var btn = filebrowser.c
                .fromHTML("<span class=\"jodit-ui-button jodit__upload-button\">\n\t\t\t\t\t\t" + ui_1.Icon.get('plus') + "\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\taccept=\"" + (filebrowser.state.onlyImages ? 'image/*' : '*') + "\"\n\t\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t\tdir=\"auto\"\n\t\t\t\t\t\t\tmultiple=\"\"\n\t\t\t\t\t\t\t" + (control.isDisabled &&
                control.isDisabled(filebrowser, control)
                ? 'disabled="disabled"'
                : '') + "\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>");
            filebrowser.e.fire('bindUploader.filebrowser', btn);
            return btn;
        }
    },
    remove: {
        icon: 'bin',
        isDisabled: function (browser) {
            return (!browser.state.activeElements.length ||
                !browser.dataProvider.canI('FileRemove'));
        },
        exec: function (editor) {
            editor.e.fire('fileRemove.filebrowser');
        }
    },
    update: {
        exec: function (editor) {
            editor.e.fire('update.filebrowser');
        }
    },
    select: {
        icon: 'check',
        isDisabled: function (browser) {
            return !browser.state.activeElements.length;
        },
        exec: function (editor) {
            editor.e.fire('select.filebrowser');
        }
    },
    edit: {
        icon: 'pencil',
        isDisabled: function (browser) {
            var selected = browser.state.activeElements;
            return (selected.length !== 1 ||
                !selected[0].isImage ||
                !(browser.dataProvider.canI('ImageCrop') ||
                    browser.dataProvider.canI('ImageResize')));
        },
        exec: function (editor) {
            editor.e.fire('edit.filebrowser');
        }
    },
    tiles: {
        icon: 'th',
        isActive: function (filebrowser) {
            return filebrowser.state.view === 'tiles';
        },
        exec: function (filebrowser) {
            filebrowser.e.fire('view.filebrowser', 'tiles');
        }
    },
    list: {
        icon: 'th-list',
        isActive: function (filebrowser) {
            return filebrowser.state.view === 'list';
        },
        exec: function (filebrowser) {
            filebrowser.e.fire('view.filebrowser', 'list');
        }
    },
    filter: {
        isInput: true,
        getContent: function (filebrowser, _, b) {
            var oldInput = b.container.querySelector('.jodit-input');
            if (oldInput) {
                return oldInput;
            }
            var input = filebrowser.c.element('input', {
                class: 'jodit-input',
                placeholder: filebrowser.i18n('Filter')
            });
            input.value = filebrowser.state.filterWord;
            filebrowser.e.on(input, 'keydown mousedown', filebrowser.async.debounce(function () {
                filebrowser.e.fire('filter.filebrowser', input.value);
            }, filebrowser.defaultTimeout));
            return input;
        }
    },
    sort: {
        isInput: true,
        getContent: function (fb) {
            var select = fb.c.fromHTML('<select class="jodit-input jodit-select">' +
                ("<option value=\"changed-asc\">" + fb.i18n('Sort by changed') + " (\u2B06)</option>") +
                ("<option value=\"changed-desc\">" + fb.i18n('Sort by changed') + " (\u2B07)</option>") +
                ("<option value=\"name-asc\">" + fb.i18n('Sort by name') + " (\u2B06)</option>") +
                ("<option value=\"name-desc\">" + fb.i18n('Sort by name') + " (\u2B07)</option>") +
                ("<option value=\"size-asc\">" + fb.i18n('Sort by size') + " (\u2B06)</option>") +
                ("<option value=\"size-desc\">" + fb.i18n('Sort by size') + " (\u2B07)</option>") +
                '</select>');
            select.value = fb.state.sortBy;
            fb.e
                .on('sort.filebrowser', function (value) {
                if (select.value !== value) {
                    select.value = value;
                }
            })
                .on(select, 'change', function () {
                fb.e.fire('sort.filebrowser', select.value);
            });
            return select;
        }
    }
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileBrowserItem = void 0;
var helpers_1 = __webpack_require__(1);
var FileBrowserItem = (function () {
    function FileBrowserItem(data) {
        this.data = data;
        helpers_1.extend(this, data);
    }
    FileBrowserItem.create = function (data) {
        return new FileBrowserItem(data);
    };
    Object.defineProperty(FileBrowserItem.prototype, "path", {
        get: function () {
            return helpers_1.normalizePath(this.data.source.path ? this.data.source.path + '/' : '/');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileBrowserItem.prototype, "imageURL", {
        get: function () {
            var timestamp = new Date().getTime().toString(), _a = this.data, thumbIsAbsolute = _a.thumbIsAbsolute, source = _a.source, thumb = _a.thumb, file = _a.file, path = thumb || file;
            return thumbIsAbsolute && path
                ? path
                : helpers_1.normalizeUrl(source.baseurl, source.path, path || '') +
                    '?_tmst=' +
                    timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileBrowserItem.prototype, "fileURL", {
        get: function () {
            var name = this.data.name;
            var _a = this.data, file = _a.file, fileIsAbsolute = _a.fileIsAbsolute, source = _a.source;
            if (file !== undefined) {
                name = file;
            }
            return fileIsAbsolute && name
                ? name
                : helpers_1.normalizeUrl(source.baseurl, source.path, name || '');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileBrowserItem.prototype, "time", {
        get: function () {
            var changed = this.data.changed;
            return ((changed &&
                (typeof changed === 'number'
                    ? new Date(changed).toLocaleString()
                    : changed)) ||
                '');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileBrowserItem.prototype, "uniqueHashKey", {
        get: function () {
            var data = this.data;
            var key = [
                data.sourceName,
                data.name,
                data.file,
                this.time,
                data.thumb
            ].join('_');
            key = key.toLowerCase().replace(/[^0-9a-z\-.]/g, '-');
            return key;
        },
        enumerable: false,
        configurable: true
    });
    return FileBrowserItem;
}());
exports.FileBrowserItem = FileBrowserItem;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SOURCE_NAME = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var ajax_1 = __webpack_require__(34);
exports.DEFAULT_SOURCE_NAME = 'default';
var possibleRules = [
    'allowFiles',
    'allowFileMove',
    'allowFileUpload',
    'allowFileUploadRemote',
    'allowFileRemove',
    'allowFileRename',
    'allowFolders',
    'allowFolderMove',
    'allowFolderCreate',
    'allowFolderRemove',
    'allowFolderRename',
    'allowImageResize',
    'allowImageCrop'
];
var DataProvider = (function () {
    function DataProvider(parent, options) {
        var _this = this;
        this.parent = parent;
        this.options = options;
        this.__currentPermissions = null;
        this.currentPath = '';
        this.currentSource = exports.DEFAULT_SOURCE_NAME;
        this.currentBaseUrl = '';
        this.ajaxInstances = [];
        this.getPathByUrl = function (url, success, onFailed) {
            var action = 'getLocalFileByUrl';
            _this.options[action].data.url = url;
            return _this.get(action, function (resp) {
                if (_this.o.isSuccess(resp)) {
                    success(resp.data.path, resp.data.name, resp.data.source);
                }
                else {
                    onFailed(helpers_1.error(_this.o.getMessage(resp)));
                }
            }, onFailed);
        };
    }
    DataProvider.prototype.canI = function (action) {
        var rule = 'allow' + action;
        if (false) {}
        return (this.__currentPermissions === null ||
            this.__currentPermissions[rule] === undefined ||
            this.__currentPermissions[rule]);
    };
    Object.defineProperty(DataProvider.prototype, "o", {
        get: function () {
            return this.options;
        },
        enumerable: false,
        configurable: true
    });
    DataProvider.prototype.get = function (name, success, error) {
        var opts = helpers_1.extend(true, {}, this.o.ajax, this.options[name] !== undefined ? this.options[name] : this.o.ajax);
        if (opts.prepareData) {
            opts.data = opts.prepareData.call(this, opts.data);
        }
        var ajax = new ajax_1.Ajax(this.parent, opts);
        var promise = ajax.send();
        this.ajaxInstances.push(ajax);
        if (success) {
            promise.then(success);
        }
        if (error) {
            promise.catch(error);
        }
        return promise;
    };
    DataProvider.prototype.permissions = function (path, source) {
        if (path === void 0) { path = this.currentPath; }
        if (source === void 0) { source = this.currentSource; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (!this.o.permissions) {
                    return [2, Promise.resolve()];
                }
                this.o.permissions.data.path = path;
                this.o.permissions.data.source = source;
                if (this.o.permissions.url) {
                    return [2, this.get('permissions').then(function (resp) {
                            var process = _this.o.permissions.process;
                            if (!process) {
                                process = _this.o.ajax.process;
                            }
                            if (process) {
                                var respData = process.call(self, resp);
                                if (respData.data.permissions) {
                                    _this.__currentPermissions = respData.data.permissions;
                                }
                            }
                        })];
                }
                return [2, Promise.resolve()];
            });
        });
    };
    DataProvider.prototype.items = function (path, source) {
        if (path === void 0) { path = this.currentPath; }
        if (source === void 0) { source = this.currentSource; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var opt;
            return tslib_1.__generator(this, function (_a) {
                opt = this.options;
                if (!opt.items) {
                    return [2, Promise.reject('Set Items api options')];
                }
                opt.items.data.path = path;
                opt.items.data.source = source;
                return [2, this.get('items')];
            });
        });
    };
    DataProvider.prototype.tree = function (path, source) {
        if (path === void 0) { path = this.currentPath; }
        if (source === void 0) { source = this.currentSource; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = helpers_1.normalizeRelativePath(path);
                        return [4, this.permissions(path, source)];
                    case 1:
                        _a.sent();
                        if (!this.o.folder) {
                            return [2, Promise.reject('Set Folder Api options')];
                        }
                        this.o.folder.data.path = path;
                        this.o.folder.data.source = source;
                        return [2, this.get('folder')];
                }
            });
        });
    };
    DataProvider.prototype.createFolder = function (name, path, source) {
        var _this = this;
        if (!this.o.c) {
            return Promise.reject('Set Create api options');
        }
        this.o.c.data.source = source;
        this.o.c.data.path = path;
        this.o.c.data.name = name;
        return this.get('create').then(function (resp) {
            _this.currentPath = path;
            _this.currentSource = source;
            return resp;
        });
    };
    DataProvider.prototype.move = function (filepath, path, source, isFile) {
        var mode = isFile
            ? 'fileMove'
            : 'folderMove';
        var option = this.options[mode];
        if (!option) {
            return Promise.reject('Set Move api options');
        }
        option.data.from = filepath;
        option.data.path = path;
        option.data.source = source;
        return this.get(mode);
    };
    DataProvider.prototype.fileRemove = function (path, file, source) {
        if (!this.o.fileRemove) {
            return Promise.reject('Set fileRemove api options');
        }
        this.o.fileRemove.data.path = path;
        this.o.fileRemove.data.name = file;
        this.o.fileRemove.data.source = source;
        return this.get('fileRemove');
    };
    DataProvider.prototype.folderRemove = function (path, file, source) {
        if (!this.o.folderRemove) {
            return Promise.reject('Set folderRemove api options');
        }
        this.o.folderRemove.data.path = path;
        this.o.folderRemove.data.name = file;
        this.o.folderRemove.data.source = source;
        return this.get('folderRemove');
    };
    DataProvider.prototype.folderRename = function (path, name, newname, source) {
        if (!this.o.folderRename) {
            return Promise.reject('Set folderRename api options');
        }
        this.o.folderRename.data.path = path;
        this.o.folderRename.data.name = name;
        this.o.folderRename.data.newname = newname;
        this.o.folderRename.data.source = source;
        return this.get('folderRename');
    };
    DataProvider.prototype.fileRename = function (path, name, newname, source) {
        if (!this.o.fileRename) {
            return Promise.reject('Set fileRename api options');
        }
        this.o.fileRename.data.path = path;
        this.o.fileRename.data.name = name;
        this.o.fileRename.data.newname = newname;
        this.o.fileRename.data.source = source;
        return this.get('fileRename');
    };
    DataProvider.prototype.crop = function (path, source, name, newname, box) {
        if (!this.o.crop) {
            this.o.crop = {
                data: {}
            };
        }
        if (this.o.crop.data === undefined) {
            this.o.crop.data = {
                action: 'crop'
            };
        }
        this.o.crop.data.newname = newname || name;
        if (box) {
            this.o.crop.data.box = box;
        }
        this.o.crop.data.path = path;
        this.o.crop.data.name = name;
        this.o.crop.data.source = source;
        return this.get('crop');
    };
    DataProvider.prototype.resize = function (path, source, name, newname, box) {
        if (!this.o.resize) {
            this.o.resize = {
                data: {}
            };
        }
        if (this.o.resize.data === undefined) {
            this.o.resize.data = {
                action: 'resize'
            };
        }
        this.o.resize.data.newname = newname || name;
        if (box) {
            this.o.resize.data.box = box;
        }
        this.o.resize.data.path = path;
        this.o.resize.data.name = name;
        this.o.resize.data.source = source;
        return this.get('resize');
    };
    DataProvider.prototype.destruct = function () {
        this.ajaxInstances.forEach(function (a) { return a.destruct(); });
        this.ajaxInstances.length = 0;
    };
    return DataProvider;
}());
exports.default = DataProvider;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stateListeners = void 0;
var consts_1 = __webpack_require__(19);
var dom_1 = __webpack_require__(2);
var normalize_1 = __webpack_require__(32);
var ui_1 = __webpack_require__(8);
var DEFAULT_SOURCE_NAME = 'default', ITEM_ACTIVE_CLASS = consts_1.ITEM_CLASS + '_active_true';
function stateListeners() {
    var _this = this;
    var _a = this, state = _a.state, files = _a.files, create = _a.create, options = _a.options, getDomElement = function (item) {
        var key = item.uniqueHashKey;
        if (_this.elementsMap[key]) {
            return _this.elementsMap[key].elm;
        }
        var elm = create.fromHTML(options.getThumbTemplate.call(_this, item, item.source, item.sourceName.toString()));
        elm.dataset.key = key;
        _this.elementsMap[key] = {
            item: item,
            elm: elm
        };
        return _this.elementsMap[key].elm;
    };
    state
        .on('beforeChange.activeElements', function () {
        state.activeElements.forEach(function (item) {
            var key = item.uniqueHashKey, elm = _this.elementsMap[key].elm;
            elm && elm.classList.remove(ITEM_ACTIVE_CLASS);
        });
    })
        .on('change.activeElements', function () {
        _this.e.fire('changeSelection');
        state.activeElements.forEach(function (item) {
            var key = item.uniqueHashKey, elm = _this.elementsMap[key].elm;
            elm && elm.classList.add(ITEM_ACTIVE_CLASS);
        });
    })
        .on('change.view', function () {
        files.classList.remove(consts_1.F_CLASS + '__files_view_tiles');
        files.classList.remove(consts_1.F_CLASS + '__files_view_list');
        files.classList.add(consts_1.F_CLASS + '__files_view_' + state.view);
        _this.storage.set(consts_1.F_CLASS + '_view', state.view);
    })
        .on('change.sortBy', function () {
        _this.storage.set(consts_1.F_CLASS + '_sortby', state.sortBy);
    })
        .on('change.elements', this.async.debounce(function () {
        dom_1.Dom.detach(files);
        if (state.elements.length) {
            state.elements.forEach(function (item) {
                _this.files.appendChild(getDomElement(item));
            });
        }
        else {
            files.appendChild(create.div(consts_1.F_CLASS + '_no_files', _this.i18n('There are no files')));
        }
    }, this.defaultTimeout))
        .on('change.folders', this.async.debounce(function () {
        dom_1.Dom.detach(_this.tree);
        var lastSource = DEFAULT_SOURCE_NAME, lastSource2 = null;
        var appendCreateButton = function (source, sourceName, force) {
            if (force === void 0) { force = false; }
            if (source &&
                lastSource2 &&
                (source !== lastSource2 || force) &&
                options.createNewFolder &&
                _this.dataProvider.canI('FolderCreate')) {
                _this.tree.appendChild(create.a('jodit-button jodit-filebrowser__addfolder', {
                    href: 'javascript:void(0)',
                    'data-path': normalize_1.normalizePath(source.path + '/'),
                    'data-source': sourceName
                }, ui_1.Icon.get('plus') + ' ' + _this.i18n('Add folder')));
                lastSource2 = source;
            }
        };
        state.folders.forEach(function (folder) {
            var name = folder.name, source = folder.source, sourceName = folder.sourceName;
            if (sourceName && sourceName !== lastSource) {
                _this.tree.appendChild(create.div(consts_1.F_CLASS + '__source-title', sourceName));
                lastSource = sourceName;
            }
            var folderElm = create.a(consts_1.F_CLASS + '__tree-item', {
                draggable: 'draggable',
                href: 'javascript:void(0)',
                'data-path': normalize_1.normalizePath(source.path, name + '/'),
                'data-name': name,
                'data-source': sourceName,
                'data-source-path': source.path
            }, create.span(consts_1.F_CLASS + '__tree-item-title', name));
            appendCreateButton(source, sourceName);
            lastSource2 = source;
            _this.tree.appendChild(folderElm);
            if (name === '..' || name === '.') {
                return;
            }
            if (options.deleteFolder &&
                _this.dataProvider.canI('FolderRename')) {
                folderElm.appendChild(create.element('i', {
                    class: 'jodit-icon_folder jodit-icon_folder_rename',
                    title: _this.i18n('Rename')
                }, ui_1.Icon.get('pencil')));
            }
            if (options.deleteFolder &&
                _this.dataProvider.canI('FolderRemove')) {
                folderElm.appendChild(create.element('i', {
                    class: 'jodit-icon_folder jodit-icon_folder_remove',
                    title: _this.i18n('Delete')
                }, ui_1.Icon.get('cancel')));
            }
        });
        appendCreateButton(lastSource2, lastSource, true);
    }, this.defaultTimeout));
}
exports.stateListeners = stateListeners;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var dialog_1 = __webpack_require__(14);
var dom_1 = __webpack_require__(2);
var consts_1 = __webpack_require__(19);
var helpers_1 = __webpack_require__(1);
var factories_1 = __webpack_require__(60);
var ui_1 = __webpack_require__(8);
var native_listeners_1 = __webpack_require__(61);
var CLASS_PREVIEW = consts_1.F_CLASS + '_preview_', preview_tpl_next = function (next, right) {
    if (next === void 0) { next = 'next'; }
    if (right === void 0) { right = 'right'; }
    return "<a href=\"javascript:void(0)\" class=\"" + CLASS_PREVIEW + "navigation " + CLASS_PREVIEW + "navigation-" + next + "\">" +
        '' +
        ui_1.Icon.get('angle-' + right) +
        '</a>';
};
exports.default = (function (self) {
    if (!self.o.contextMenu) {
        return function () { };
    }
    var contextmenu = factories_1.makeContextMenu(self);
    return function (e) {
        var a = native_listeners_1.getItem(e.target, self.dialog.container);
        if (!a) {
            return;
        }
        var item = a;
        var opt = self.options, ga = function (key) { return helpers_1.attr(item, key) || ''; };
        self.async.setTimeout(function () {
            contextmenu.show(e.clientX, e.clientY, [
                ga('data-is-file') !== '1' &&
                    opt.editImage &&
                    (self.dataProvider.canI('ImageResize') ||
                        self.dataProvider.canI('ImageCrop'))
                    ? {
                        icon: 'pencil',
                        title: 'Edit',
                        exec: function () {
                            self.openImageEditor(ga('href'), ga('data-name'), ga('data-path'), ga('data-source'));
                        }
                    }
                    : false,
                self.dataProvider.canI('FileRename')
                    ? {
                        icon: 'italic',
                        title: 'Rename',
                        exec: function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                self.e.fire('fileRename.filebrowser', ga('data-name'), ga('data-path'), ga('data-source'));
                                return [2];
                            });
                        }); }
                    }
                    : false,
                self.dataProvider.canI('FileRemove')
                    ? {
                        icon: 'bin',
                        title: 'Delete',
                        exec: function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, self.deleteFile(ga('data-name'), ga('data-source'))];
                                    case 1:
                                        _a.sent();
                                        self.state.activeElements = [];
                                        return [4, self.loadTree()];
                                    case 2:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        }); }
                    }
                    : false,
                opt.preview
                    ? {
                        icon: 'eye',
                        title: 'Preview',
                        exec: function () {
                            var preview = new dialog_1.Dialog({
                                fullsize: self.o.fullsize,
                                language: self.o.language,
                                buttons: ['fullsize', 'dialog.close']
                            }), temp_content = self.c.div(consts_1.F_CLASS + '_preview', consts_1.ICON_LOADER), preview_box = self.c.div(consts_1.F_CLASS + '_preview_box'), next = self.c.fromHTML(preview_tpl_next()), prev = self.c.fromHTML(preview_tpl_next('prev', 'left')), addLoadHandler = function (src) {
                                var image = self.c.element('img');
                                image.setAttribute('src', src);
                                var onload = function () {
                                    var _a;
                                    if (self.isInDestruct) {
                                        return;
                                    }
                                    self.e.off(image, 'load');
                                    dom_1.Dom.detach(temp_content);
                                    if (opt.showPreviewNavigation) {
                                        if (dom_1.Dom.prevWithClass(item, consts_1.ITEM_CLASS)) {
                                            temp_content.appendChild(prev);
                                        }
                                        if (dom_1.Dom.nextWithClass(item, consts_1.ITEM_CLASS)) {
                                            temp_content.appendChild(next);
                                        }
                                    }
                                    temp_content.appendChild(preview_box);
                                    preview_box.appendChild(image);
                                    preview.setPosition();
                                    (_a = self === null || self === void 0 ? void 0 : self.events) === null || _a === void 0 ? void 0 : _a.fire('previewOpenedAndLoaded');
                                };
                                self.e.on(image, 'load', onload);
                                if (image.complete) {
                                    onload();
                                }
                            };
                            self.e.on([next, prev], 'click', function () {
                                if (this.classList.contains(CLASS_PREVIEW + 'navigation-next')) {
                                    item = dom_1.Dom.nextWithClass(item, consts_1.ITEM_CLASS);
                                }
                                else {
                                    item = dom_1.Dom.prevWithClass(item, consts_1.ITEM_CLASS);
                                }
                                if (!item) {
                                    throw helpers_1.error('Need element');
                                }
                                dom_1.Dom.detach(temp_content);
                                dom_1.Dom.detach(preview_box);
                                temp_content.innerHTML = consts_1.ICON_LOADER;
                                addLoadHandler(ga('href'));
                            });
                            self.e.on('beforeDestruct', function () {
                                preview.destruct();
                            });
                            preview.container.classList.add(consts_1.F_CLASS + '_preview_dialog');
                            preview.setContent(temp_content);
                            preview.setPosition();
                            preview.open();
                            addLoadHandler(ga('href'));
                            self.events
                                .on('beforeDestruct', function () {
                                preview.destruct();
                            })
                                .fire('previewOpened');
                        }
                    }
                    : false,
                {
                    icon: 'upload',
                    title: 'Download',
                    exec: function () {
                        var url = ga('href');
                        if (url) {
                            self.ow.open(url);
                        }
                    }
                }
            ]);
        }, self.defaultTimeout);
        self === null || self === void 0 ? void 0 : self.e.on('beforeDestruct', function () {
            contextmenu.destruct();
        });
        e.stopPropagation();
        e.preventDefault();
        return false;
    };
});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.selfListeners = void 0;
var dialog_1 = __webpack_require__(14);
var checker_1 = __webpack_require__(5);
var helpers_1 = __webpack_require__(1);
function selfListeners() {
    var _this = this;
    var state = this.state, self = this;
    self.e
        .on('view.filebrowser', function (view) {
        if (view !== state.view) {
            state.view = view;
        }
    })
        .on('sort.filebrowser', function (value) {
        if (value !== state.sortBy) {
            state.sortBy = value;
            self.loadItems();
        }
    })
        .on('filter.filebrowser', function (value) {
        if (value !== state.filterWord) {
            state.filterWord = value;
            self.loadItems();
        }
    })
        .on('fileRemove.filebrowser', function () {
        if (self.state.activeElements.length) {
            dialog_1.Confirm(self.i18n('Are you sure?'), '', function (yes) {
                if (yes) {
                    var promises_1 = [];
                    self.state.activeElements.forEach(function (item) {
                        promises_1.push(self.deleteFile(item.file || item.name || '', item.sourceName));
                    });
                    self.state.activeElements = [];
                    Promise.all(promises_1).then(function () {
                        return self.loadTree();
                    });
                }
            }).bindDestruct(self);
        }
    })
        .on('edit.filebrowser', function () {
        if (self.state.activeElements.length === 1) {
            var file = _this.state.activeElements[0];
            self.openImageEditor(file.fileURL, file.file || '', file.path, file.sourceName);
        }
    })
        .on('fileRename.filebrowser', function (name, path, source) {
        if (self.state.activeElements.length === 1) {
            dialog_1.Prompt(self.i18n('Enter new name'), self.i18n('Rename'), function (newName) {
                if (!checker_1.isValidName(newName)) {
                    self.status(self.i18n('Enter new name'));
                    return false;
                }
                self.dataProvider
                    .fileRename(path, name, newName, source)
                    .then(function (resp) {
                    if (self.o.fileRename &&
                        self.o.fileRename.process) {
                        resp = self.o.fileRename.process.call(self, resp);
                    }
                    if (!self.o.isSuccess(resp)) {
                        throw helpers_1.error(self.o.getMessage(resp));
                    }
                    else {
                        self.state.activeElements = [];
                        self.status(self.o.getMessage(resp), true);
                    }
                    self.loadItems();
                })
                    .catch(self.status);
                return;
            }, self.i18n('type name'), name).bindDestruct(_this);
        }
    })
        .on('update.filebrowser', function () {
        self.loadTree();
    });
}
exports.selfListeners = selfListeners;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageEditor = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(182);
var autobind_decorator_1 = __webpack_require__(10);
var config_1 = __webpack_require__(4);
var component_1 = __webpack_require__(7);
var dialog_1 = __webpack_require__(14);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var button_1 = __webpack_require__(16);
var form_1 = __webpack_require__(183);
config_1.Config.prototype.imageeditor = {
    min_width: 20,
    min_height: 20,
    closeAfterSave: false,
    width: '85%',
    height: '85%',
    crop: true,
    resize: true,
    resizeUseRatio: true,
    resizeMinWidth: 20,
    resizeMinHeight: 20,
    cropUseRatio: true,
    cropDefaultWidth: '70%',
    cropDefaultHeight: '70%'
};
var jie = 'jodit-image-editor';
var TABS = {
    resize: 'resize',
    crop: 'crop'
};
var ImageEditor = (function (_super) {
    tslib_1.__extends(ImageEditor, _super);
    function ImageEditor(editor) {
        var _this = _super.call(this, editor) || this;
        _this.resizeUseRatio = true;
        _this.cropUseRatio = true;
        _this.clicked = false;
        _this.start_x = 0;
        _this.start_y = 0;
        _this.top_x = 0;
        _this.top_y = 0;
        _this.width = 0;
        _this.height = 0;
        _this.activeTab = TABS.resize;
        _this.naturalWidth = 0;
        _this.naturalHeight = 0;
        _this.ratio = 0;
        _this.new_h = 0;
        _this.new_w = 0;
        _this.diff_x = 0;
        _this.diff_y = 0;
        _this.cropBox = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
        _this.resizeBox = {
            w: 0,
            h: 0
        };
        _this.calcValueByPercent = function (value, percent) {
            var percentStr = percent.toString();
            var valueNbr = parseFloat(value.toString());
            var match;
            match = /^[\-+]?[0-9]+(px)?$/.exec(percentStr);
            if (match) {
                return parseInt(percentStr, 10);
            }
            match = /^([\-+]?[0-9.]+)%$/.exec(percentStr);
            if (match) {
                return Math.round(valueNbr * (parseFloat(match[1]) / 100));
            }
            return valueNbr || 0;
        };
        _this.calcCropBox = function () {
            var w = _this.crop_box.parentNode.offsetWidth * 0.8, h = _this.crop_box.parentNode.offsetHeight * 0.8;
            var wn = w, hn = h;
            if (w > _this.naturalWidth && h > _this.naturalHeight) {
                wn = _this.naturalWidth;
                hn = _this.naturalHeight;
            }
            else if (_this.ratio > w / h) {
                wn = w;
                hn = _this.naturalHeight * (w / _this.naturalWidth);
            }
            else {
                wn = _this.naturalWidth * (h / _this.naturalHeight);
                hn = h;
            }
            helpers_1.css(_this.crop_box, {
                width: wn,
                height: hn
            });
        };
        _this.showCrop = function () {
            if (!_this.cropImage) {
                return;
            }
            _this.calcCropBox();
            var w = _this.cropImage.offsetWidth ||
                _this.image.offsetWidth ||
                _this.image.naturalWidth;
            _this.new_w = _this.calcValueByPercent(w, _this.o.cropDefaultWidth);
            var h = _this.cropImage.offsetHeight ||
                _this.image.offsetHeight ||
                _this.image.naturalHeight;
            if (_this.cropUseRatio) {
                _this.new_h = _this.new_w / _this.ratio;
            }
            else {
                _this.new_h = _this.calcValueByPercent(h, _this.o.cropDefaultHeight);
            }
            helpers_1.css(_this.cropHandler, {
                backgroundImage: 'url(' + helpers_1.attr(_this.cropImage, 'src') + ')',
                width: _this.new_w,
                height: _this.new_h,
                left: w / 2 - _this.new_w / 2,
                top: h / 2 - _this.new_h / 2
            });
            _this.j.e.fire(_this.cropHandler, 'updatesize');
        };
        _this.updateCropBox = function () {
            if (!_this.cropImage) {
                return;
            }
            var ratioX = _this.cropImage.offsetWidth / _this.naturalWidth, ratioY = _this.cropImage.offsetHeight / _this.naturalHeight;
            _this.cropBox.x = helpers_1.css(_this.cropHandler, 'left') / ratioX;
            _this.cropBox.y = helpers_1.css(_this.cropHandler, 'top') / ratioY;
            _this.cropBox.w = _this.cropHandler.offsetWidth / ratioX;
            _this.cropBox.h = _this.cropHandler.offsetHeight / ratioY;
            _this.sizes.textContent =
                _this.cropBox.w.toFixed(0) + 'x' + _this.cropBox.h.toFixed(0);
        };
        _this.updateResizeBox = function () {
            _this.resizeBox.w = _this.image.offsetWidth || _this.naturalWidth;
            _this.resizeBox.h = _this.image.offsetHeight || _this.naturalHeight;
        };
        _this.setHandlers = function () {
            var self = _this;
            var _a = helpers_1.refs(_this.editor), widthInput = _a.widthInput, heightInput = _a.heightInput;
            self.j.e
                .on([
                self.editor.querySelector('.jodit_bottomright'),
                self.cropHandler
            ], "mousedown." + jie, function (e) {
                self.target = e.target;
                e.preventDefault();
                e.stopImmediatePropagation();
                self.clicked = true;
                self.start_x = e.clientX;
                self.start_y = e.clientY;
                if (self.activeTab === TABS.crop) {
                    self.top_x = helpers_1.css(self.cropHandler, 'left');
                    self.top_y = helpers_1.css(self.cropHandler, 'top');
                    self.width = self.cropHandler.offsetWidth;
                    self.height = self.cropHandler.offsetHeight;
                }
                else {
                    self.width = self.image.offsetWidth;
                    self.height = self.image.offsetHeight;
                }
            })
                .off(_this.j.ow, "." + jie + self.j.id)
                .on(_this.j.ow, "mousemove." + jie + self.j.id, _this.j.async.throttle(function (e) {
                if (self.clicked) {
                    self.diff_x = e.clientX - self.start_x;
                    self.diff_y = e.clientY - self.start_y;
                    if ((self.activeTab === TABS.resize &&
                        self.resizeUseRatio) ||
                        (self.activeTab === 'crop' && self.cropUseRatio)) {
                        if (self.diff_x) {
                            self.new_w = self.width + self.diff_x;
                            self.new_h = Math.round(self.new_w / self.ratio);
                        }
                        else {
                            self.new_h = self.height + self.diff_y;
                            self.new_w = Math.round(self.new_h * self.ratio);
                        }
                    }
                    else {
                        self.new_w = self.width + self.diff_x;
                        self.new_h = self.height + self.diff_y;
                    }
                    if (self.activeTab === TABS.resize) {
                        if (self.new_w > self.o.resizeMinWidth) {
                            helpers_1.css(self.image, 'width', self.new_w + 'px');
                            widthInput.value = self.new_w.toString();
                        }
                        if (self.new_h > self.o.resizeMinHeight) {
                            helpers_1.css(self.image, 'height', self.new_h + 'px');
                            heightInput.value = self.new_h.toString();
                        }
                        _this.j.e.fire(self.resizeHandler, 'updatesize');
                    }
                    else {
                        if (self.target !== self.cropHandler) {
                            if (self.top_x + self.new_w >
                                self.cropImage.offsetWidth) {
                                self.new_w =
                                    self.cropImage.offsetWidth - self.top_x;
                            }
                            if (self.top_y + self.new_h >
                                self.cropImage.offsetHeight) {
                                self.new_h =
                                    self.cropImage.offsetHeight -
                                        self.top_y;
                            }
                            helpers_1.css(self.cropHandler, {
                                width: self.new_w,
                                height: self.new_h
                            });
                        }
                        else {
                            if (self.top_x +
                                self.diff_x +
                                self.cropHandler.offsetWidth >
                                self.cropImage.offsetWidth) {
                                self.diff_x =
                                    self.cropImage.offsetWidth -
                                        self.top_x -
                                        self.cropHandler.offsetWidth;
                            }
                            helpers_1.css(self.cropHandler, 'left', self.top_x + self.diff_x);
                            if (self.top_y +
                                self.diff_y +
                                self.cropHandler.offsetHeight >
                                self.cropImage.offsetHeight) {
                                self.diff_y =
                                    self.cropImage.offsetHeight -
                                        self.top_y -
                                        self.cropHandler.offsetHeight;
                            }
                            helpers_1.css(self.cropHandler, 'top', self.top_y + self.diff_y);
                        }
                        _this.j.e.fire(self.cropHandler, 'updatesize');
                    }
                    e.stopImmediatePropagation();
                }
            }, 5))
                .on(_this.j.ow, "resize." + jie, function () {
                _this.j.e.fire(self.resizeHandler, 'updatesize');
                self.showCrop();
                _this.j.e.fire(self.cropHandler, 'updatesize');
            })
                .on(_this.j.ow, "mouseup." + jie + " " + self.j.id + " keydown." + jie + self.j.id, function (e) {
                if (self.clicked) {
                    self.clicked = false;
                    e.stopImmediatePropagation();
                }
            });
            helpers_1.$$('.jodit-button-group', self.editor).forEach(function (group) {
                var input = group.querySelector('input');
                self.j.e.on(group, 'click', function (e) {
                    input.checked = !input.checked;
                    self.j.e.fire(input, 'change');
                });
            });
            self.j.e
                .on(_this.editor, 'click.' + jie, function (e) {
                var title = dom_1.Dom.closest(e.target, function (node) {
                    return dom_1.Dom.isElement(node) &&
                        node.classList.contains(jie + "__slider-title");
                }, self.editor);
                var slide = title === null || title === void 0 ? void 0 : title.parentElement;
                if (!slide) {
                    return;
                }
                helpers_1.$$("." + jie + "__slider,." + jie + "__area", self.editor).forEach(function (elm) {
                    return elm.classList.remove(jie + "_active");
                });
                slide.classList.add(jie + "_active");
                self.activeTab =
                    helpers_1.attr(slide, '-area') || TABS.resize;
                var tab = self.editor.querySelector("." + jie + "__area." + jie + "__area_" + self.activeTab);
                if (tab) {
                    tab.classList.add(jie + "_active");
                }
                if (self.activeTab === 'crop') {
                    self.showCrop();
                }
            })
                .on(widthInput, "change." + jie + " mousedown." + jie + " keydown." + jie, self.j.async.debounce(function () {
                var value = parseInt(widthInput.value, 10);
                var another;
                if (value > self.o.min_width) {
                    helpers_1.css(self.image, 'width', value + 'px');
                    if (self.resizeUseRatio) {
                        another = Math.round(value / self.ratio);
                        if (another > self.o.min_height) {
                            helpers_1.css(self.image, 'height', another + 'px');
                            heightInput.value = another.toString();
                        }
                    }
                }
                _this.j.e.fire(self.resizeHandler, 'updatesize');
            }, 200))
                .on(heightInput, "change." + jie + " mousedown." + jie + " keydown." + jie, self.j.async.debounce(function () {
                if (_this.isDestructed) {
                    return;
                }
                var value = parseInt(heightInput.value, 10);
                var another;
                if (value > self.o.min_height) {
                    helpers_1.css(self.image, 'height', value + 'px');
                    if (self.resizeUseRatio) {
                        another = Math.round(value * self.ratio);
                        if (another > self.o.min_width) {
                            helpers_1.css(self.image, 'width', another + 'px');
                            widthInput.value = another.toString();
                        }
                    }
                }
                _this.j.e.fire(self.resizeHandler, 'updatesize');
            }, 200));
            var _b = helpers_1.refs(_this.editor), keepAspectRatioResize = _b.keepAspectRatioResize, keepAspectRatioCrop = _b.keepAspectRatioCrop;
            if (keepAspectRatioResize) {
                keepAspectRatioResize.addEventListener('change', function () {
                    _this.resizeUseRatio = keepAspectRatioResize.checked;
                });
            }
            if (keepAspectRatioCrop) {
                keepAspectRatioCrop.addEventListener('change', function () {
                    _this.cropUseRatio = keepAspectRatioCrop.checked;
                });
            }
            self.j.e
                .on(self.resizeHandler, 'updatesize', function () {
                helpers_1.css(self.resizeHandler, {
                    top: 0,
                    left: 0,
                    width: (self.image.offsetWidth || self.naturalWidth) + 'px',
                    height: (self.image.offsetHeight || self.naturalHeight) + 'px'
                });
                _this.updateResizeBox();
            })
                .on(self.cropHandler, 'updatesize', function () {
                if (!self.cropImage) {
                    return;
                }
                var new_x = helpers_1.css(self.cropHandler, 'left'), new_y = helpers_1.css(self.cropHandler, 'top'), new_width = self.cropHandler.offsetWidth, new_height = self.cropHandler.offsetHeight;
                if (new_x < 0) {
                    new_x = 0;
                }
                if (new_y < 0) {
                    new_y = 0;
                }
                if (new_x + new_width > self.cropImage.offsetWidth) {
                    new_width = self.cropImage.offsetWidth - new_x;
                    if (self.cropUseRatio) {
                        new_height = new_width / self.ratio;
                    }
                }
                if (new_y + new_height > self.cropImage.offsetHeight) {
                    new_height = self.cropImage.offsetHeight - new_y;
                    if (self.cropUseRatio) {
                        new_width = new_height * self.ratio;
                    }
                }
                helpers_1.css(self.cropHandler, {
                    width: new_width,
                    height: new_height,
                    left: new_x,
                    top: new_y,
                    backgroundPosition: -new_x - 1 + 'px ' + (-new_y - 1) + 'px',
                    backgroundSize: self.cropImage.offsetWidth +
                        'px ' +
                        self.cropImage.offsetHeight +
                        'px'
                });
                self.updateCropBox();
            });
            Object.values(self.buttons).forEach(function (button) {
                button.onAction(function () {
                    var data = {
                        action: self.activeTab,
                        box: self.activeTab === 'resize'
                            ? self.resizeBox
                            : self.cropBox
                    };
                    switch (button) {
                        case self.buttons.saveas:
                            dialog_1.Prompt(self.j.i18n('Enter new name'), self.j.i18n('Save in new file'), function (name) {
                                if (!helpers_1.trim(name)) {
                                    dialog_1.Alert(self.j.i18n('The name should not be empty')).bindDestruct(_this.j);
                                    return false;
                                }
                                self.onSave(name, data, self.hide, function (e) {
                                    dialog_1.Alert(e.message).bindDestruct(self.j);
                                });
                            }).bindDestruct(_this.j);
                            break;
                        case self.buttons.save:
                            self.onSave(undefined, data, self.hide, function (e) {
                                dialog_1.Alert(e.message).bindDestruct(self.j);
                            });
                            break;
                        case self.buttons.reset:
                            if (self.activeTab === 'resize') {
                                helpers_1.css(self.image, {
                                    width: null,
                                    height: null
                                });
                                widthInput.value = self.naturalWidth.toString();
                                heightInput.value = self.naturalHeight.toString();
                                self.j.e.fire(self.resizeHandler, 'updatesize');
                            }
                            else {
                                self.showCrop();
                            }
                            break;
                    }
                });
            });
        };
        _this.options =
            editor && editor.o && editor.o.imageeditor
                ? editor.o.imageeditor
                : config_1.Config.defaultOptions.imageeditor;
        var o = _this.options;
        _this.resizeUseRatio = o.resizeUseRatio;
        _this.cropUseRatio = o.cropUseRatio;
        _this.buttons = {
            reset: button_1.Button(_this.j, 'update', 'Reset'),
            save: button_1.Button(_this.j, 'save', 'Save'),
            saveas: button_1.Button(_this.j, 'save', 'Save as ...')
        };
        _this.activeTab = o.resize ? 'resize' : 'crop';
        _this.editor = form_1.form(_this.j, _this.options);
        var _a = helpers_1.refs(_this.editor), resizeBox = _a.resizeBox, cropBox = _a.cropBox;
        _this.resize_box = resizeBox;
        _this.crop_box = cropBox;
        _this.sizes = _this.editor.querySelector("." + jie + "__area." + jie + "__area_crop .jodit-image-editor__sizes");
        _this.resizeHandler = _this.editor.querySelector("." + jie + "__resizer");
        _this.cropHandler = _this.editor.querySelector("." + jie + "__croper");
        _this.dialog = new dialog_1.Dialog({
            fullsize: _this.j.o.fullsize,
            globalFullSize: _this.j.o.globalFullSize,
            language: _this.j.o.language,
            buttons: ['fullsize', 'dialog.close']
        });
        _this.dialog.setContent(_this.editor);
        _this.dialog.setSize(_this.o.width, _this.o.height);
        _this.dialog.setHeader([
            _this.buttons.reset,
            _this.buttons.save,
            _this.buttons.saveas
        ]);
        _this.setHandlers();
        return _this;
    }
    Object.defineProperty(ImageEditor.prototype, "o", {
        get: function () {
            return this.options;
        },
        enumerable: false,
        configurable: true
    });
    ImageEditor.prototype.hide = function () {
        this.dialog.close();
    };
    ImageEditor.prototype.open = function (url, save) {
        var _this = this;
        return this.j.async.promise(function (resolve) {
            var timestamp = new Date().getTime();
            _this.image = _this.j.c.element('img');
            helpers_1.$$('img,.jodit-icon_loader', _this.resize_box).forEach(dom_1.Dom.safeRemove);
            helpers_1.$$('img,.jodit-icon_loader', _this.crop_box).forEach(dom_1.Dom.safeRemove);
            helpers_1.css(_this.cropHandler, 'background', 'transparent');
            _this.onSave = save;
            _this.resize_box.appendChild(_this.j.c.element('i', { class: 'jodit-icon_loader' }));
            _this.crop_box.appendChild(_this.j.c.element('i', { class: 'jodit-icon_loader' }));
            if (/\?/.test(url)) {
                url += '&_tst=' + timestamp;
            }
            else {
                url += '?_tst=' + timestamp;
            }
            _this.image.setAttribute('src', url);
            _this.dialog.open();
            var _a = helpers_1.refs(_this.editor), widthInput = _a.widthInput, heightInput = _a.heightInput;
            var onload = function () {
                if (_this.isDestructed) {
                    return;
                }
                _this.image.removeEventListener('load', onload);
                _this.naturalWidth = _this.image.naturalWidth;
                _this.naturalHeight = _this.image.naturalHeight;
                widthInput.value = _this.naturalWidth.toString();
                heightInput.value = _this.naturalHeight.toString();
                _this.ratio = _this.naturalWidth / _this.naturalHeight;
                _this.resize_box.appendChild(_this.image);
                _this.cropImage = _this.image.cloneNode(true);
                _this.crop_box.appendChild(_this.cropImage);
                helpers_1.$$('.jodit-icon_loader', _this.editor).forEach(dom_1.Dom.safeRemove);
                if (_this.activeTab === 'crop') {
                    _this.showCrop();
                }
                _this.j.e.fire(_this.resizeHandler, 'updatesize');
                _this.j.e.fire(_this.cropHandler, 'updatesize');
                _this.dialog.setPosition();
                _this.j.e.fire('afterImageEditor');
                resolve(_this.dialog);
            };
            _this.image.addEventListener('load', onload);
            if (_this.image.complete) {
                onload();
            }
        });
    };
    ImageEditor.prototype.destruct = function () {
        if (this.isDestructed) {
            return;
        }
        if (this.dialog) {
            this.dialog.destruct();
            delete this.dialog;
        }
        dom_1.Dom.safeRemove(this.editor);
        delete this.resize_box;
        delete this.crop_box;
        delete this.sizes;
        delete this.resizeHandler;
        delete this.cropHandler;
        delete this.editor;
        if (this.j.e) {
            this.j.e.off(this.ow, "." + jie);
            this.j.e.off("." + jie);
        }
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ImageEditor.prototype, "hide", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ImageEditor.prototype, "open", null);
    return ImageEditor;
}(component_1.ViewComponent));
exports.ImageEditor = ImageEditor;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.form = void 0;
var ui_1 = __webpack_require__(8);
var jie = 'jodit-image-editor';
var gi = ui_1.Icon.get.bind(ui_1.Icon);
var act = function (el, className) {
    if (className === void 0) { className = 'jodti-image-editor_active'; }
    return el ? className : '';
};
exports.form = function (editor, o) {
    var i = editor.i18n.bind(editor);
    var switcher = function (label, ref, active) {
        if (active === void 0) { active = true; }
        return "<div class=\"jodit-form__group\">\n\t\t<label>" + i(label) + "</label>\n\t\t<div class=\"jodit-button-group jodit-button_radio_group\">\n\t\t\t<input " + act(active, 'checked') + " data-ref=\"" + ref + "\" type=\"checkbox\" class=\"jodit-input\"/>\n\n\t\t\t<button type=\"button\" data-yes=\"1\" class=\"jodit-ui-button jodit-ui-button_status_success\">" + i('Yes') + "</button>\n\n\t\t\t<button type=\"button\" class=\"jodit-ui-button jodit-ui-button_status_danger\">" + i('No') + "</button>\n\t\t</div>\n\t</div>";
    };
    return editor.create.fromHTML("<form class=\"" + jie + " jodit-properties\">\n\t\t<div class=\"jodit-grid jodit-grid_xs-column\">\n\t\t\t<div class=\"jodit_col-lg-3-4 jodit_col-sm-5-5\">\n\t\t\t" + (o.resize
        ? "<div class=\"" + jie + "__area " + jie + "__area_resize " + jie + "_active\">\n\t\t\t\t\t\t\t<div data-ref=\"resizeBox\" class=\"" + jie + "__box\"></div>\n\t\t\t\t\t\t\t<div class=\"" + jie + "__resizer\">\n\t\t\t\t\t\t\t\t<i class=\"jodit_bottomright\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>"
        : '') + "\n\t\t\t" + (o.crop
        ? "<div class=\"" + jie + "__area " + jie + "__area_crop " + act(!o.resize) + "\">\n\t\t\t\t\t\t\t<div data-ref=\"cropBox\" class=\"" + jie + "__box\">\n\t\t\t\t\t\t\t\t<div class=\"" + jie + "__croper\">\n\t\t\t\t\t\t\t\t\t<i class=\"jodit_bottomright\"></i>\n\t\t\t\t\t\t\t\t\t<i class=\"" + jie + "__sizes\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>"
        : '') + "\n\t\t\t</div>\n\t\t\t<div class=\"jodit_col-lg-1-4 jodit_col-sm-5-5\">\n\t\t\t" + (o.resize
        ? "<div data-area=\"resize\" class=\"" + jie + "__slider " + jie + "_active\">\n\t\t\t\t\t\t\t<div class=\"" + jie + "__slider-title\">\n\t\t\t\t\t\t\t\t" + gi('resize') + "\n\t\t\t\t\t\t\t\t" + i('Resize') + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"" + jie + "__slider-content\">\n\t\t\t\t\t\t\t\t<div class=\"jodit-form__group\">\n\t\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t\t" + i('Width') + "\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type=\"number\" data-ref=\"widthInput\" class=\"jodit-input\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"jodit-form__group\">\n\t\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t\t" + i('Height') + "\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type=\"number\" data-ref=\"heightInput\" class=\"jodit-input\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t" + switcher('Keep Aspect Ratio', 'keepAspectRatioResize') + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>"
        : '') + "\n\t\t\t" + (o.crop
        ? "<div data-area=\"crop\" class=\"" + jie + "__slider " + act(!o.resize) + "'\">\n\t\t\t\t\t\t\t<div class=\"" + jie + "__slider-title\">\n\t\t\t\t\t\t\t\t" + gi('crop') + "\n\t\t\t\t\t\t\t\t" + i('Crop') + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"" + jie + "__slider-content\">\n\t\t\t\t\t\t\t\t" + switcher('Keep Aspect Ratio', 'keepAspectRatioCrop') + "\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>"
        : '') + "\n\t\t\t</div>\n\t\t</div>\n\t</form>");
};


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Observer = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var component_1 = __webpack_require__(7);
var snapshot_1 = __webpack_require__(62);
var stack_1 = __webpack_require__(185);
var command_1 = __webpack_require__(186);
var decorators_1 = __webpack_require__(13);
config_1.Config.prototype.observer = {
    timeout: 100
};
var Observer = (function (_super) {
    tslib_1.__extends(Observer, _super);
    function Observer(editor) {
        var _this = _super.call(this, editor) || this;
        _this.stack = new stack_1.Stack();
        _this.snapshot = new snapshot_1.Snapshot(_this.j);
        _this.updateTick = 0;
        editor.e.on('afterAddPlace.observer', function () {
            if (_this.isInDestruct) {
                return;
            }
            _this.startValue = _this.snapshot.make();
            editor.events
                .on('internalChange', function () {
                _this.startValue = _this.snapshot.make();
            })
                .on(editor.editor, [
                'changeSelection',
                'selectionstart',
                'selectionchange',
                'mousedown',
                'mouseup',
                'keydown',
                'keyup'
            ]
                .map(function (f) { return f + '.observer'; })
                .join(' '), function () {
                if (_this.startValue.html ===
                    _this.j.getNativeEditorValue()) {
                    _this.startValue = _this.snapshot.make();
                }
            })
                .on(_this, 'change.observer', _this.onChange);
        });
        return _this;
    }
    Object.defineProperty(Observer.prototype, "startValue", {
        get: function () {
            return this.__startValue;
        },
        set: function (value) {
            this.__startValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Observer.prototype.upTick = function () {
        this.updateTick += 1;
    };
    Observer.prototype.onChange = function () {
        if (this.snapshot.isBlocked) {
            return;
        }
        this.updateStack();
    };
    Observer.prototype.updateStack = function (replace) {
        if (replace === void 0) { replace = false; }
        var newValue = this.snapshot.make();
        if (!snapshot_1.Snapshot.equal(newValue, this.startValue)) {
            var newCommand = new command_1.Command(this.startValue, newValue, this, this.updateTick);
            if (replace) {
                var command = this.stack.current();
                if (command && this.updateTick === command.tick) {
                    this.stack.replace(newCommand);
                }
            }
            else {
                this.stack.push(newCommand);
            }
            this.startValue = newValue;
            this.fireChangeStack();
        }
    };
    Observer.prototype.redo = function () {
        if (this.stack.redo()) {
            this.startValue = this.snapshot.make();
            this.fireChangeStack();
        }
    };
    Observer.prototype.undo = function () {
        if (this.stack.undo()) {
            this.startValue = this.snapshot.make();
            this.fireChangeStack();
        }
    };
    Observer.prototype.clear = function () {
        this.startValue = this.snapshot.make();
        this.stack.clear();
        this.fireChangeStack();
    };
    Observer.prototype.replaceSnapshot = function () {
        this.updateStack(true);
    };
    Observer.prototype.fireChangeStack = function () {
        var _a;
        this.j && !this.j.isInDestruct && ((_a = this.j.events) === null || _a === void 0 ? void 0 : _a.fire('changeStack'));
    };
    Observer.prototype.destruct = function () {
        if (this.j.events) {
            this.j.e.off('.observer');
        }
        this.snapshot.destruct();
        delete this.snapshot;
        delete this.stack;
        delete this.startValue;
        _super.prototype.destruct.call(this);
    };
    tslib_1.__decorate([
        decorators_1.debounce()
    ], Observer.prototype, "onChange", null);
    return Observer;
}(component_1.ViewComponent));
exports.Observer = Observer;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
var Stack = (function () {
    function Stack() {
        this.commands = [];
        this.stackPosition = -1;
    }
    Object.defineProperty(Stack.prototype, "length", {
        get: function () {
            return this.commands.length;
        },
        enumerable: false,
        configurable: true
    });
    Stack.prototype.clearRedo = function () {
        this.commands.length = this.stackPosition + 1;
    };
    Stack.prototype.clear = function () {
        this.commands.length = 0;
        this.stackPosition = -1;
    };
    Stack.prototype.push = function (command) {
        this.clearRedo();
        this.commands.push(command);
        this.stackPosition += 1;
    };
    Stack.prototype.replace = function (command) {
        this.commands[this.stackPosition] = command;
    };
    Stack.prototype.current = function () {
        return this.commands[this.stackPosition];
    };
    Stack.prototype.undo = function () {
        if (this.canUndo()) {
            if (this.commands[this.stackPosition]) {
                this.commands[this.stackPosition].undo();
            }
            this.stackPosition -= 1;
            return true;
        }
        return false;
    };
    Stack.prototype.redo = function () {
        if (this.canRedo()) {
            this.stackPosition += 1;
            if (this.commands[this.stackPosition]) {
                this.commands[this.stackPosition].redo();
            }
            return true;
        }
        return false;
    };
    Stack.prototype.canUndo = function () {
        return this.stackPosition >= 0;
    };
    Stack.prototype.canRedo = function () {
        return this.stackPosition < this.commands.length - 1;
    };
    return Stack;
}());
exports.Stack = Stack;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = void 0;
var Command = (function () {
    function Command(oldValue, newValue, observer, tick) {
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.observer = observer;
        this.tick = tick;
    }
    Command.prototype.undo = function () {
        this.observer.snapshot.restore(this.oldValue);
    };
    Command.prototype.redo = function () {
        this.observer.snapshot.restore(this.newValue);
    };
    return Command;
}());
exports.Command = Command;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBar = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(188);
var component_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(2);
var ProgressBar = (function (_super) {
    tslib_1.__extends(ProgressBar, _super);
    function ProgressBar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.progressBar = _this.j.c.div('jodit-progressbar', _this.j.c.div());
        return _this;
    }
    ProgressBar.prototype.show = function () {
        var container = this.j.workplace || this.j.container;
        container.appendChild(this.progressBar);
        return this;
    };
    ProgressBar.prototype.hide = function () {
        dom_1.Dom.safeRemove(this.progressBar);
        return this;
    };
    ProgressBar.prototype.progress = function (percentage) {
        this.progressBar.style.width = percentage.toFixed(2) + '%';
        return this;
    };
    ProgressBar.prototype.destruct = function () {
        this.hide();
        return _super.prototype.destruct.call(this);
    };
    return ProgressBar;
}(component_1.ViewComponent));
exports.ProgressBar = ProgressBar;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(63), exports);
tslib_1.__exportStar(__webpack_require__(191), exports);


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplyStyle = void 0;
var tslib_1 = __webpack_require__(0);
var autobind_decorator_1 = __webpack_require__(10);
var checker_1 = __webpack_require__(5);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var mode;
(function (mode) {
    mode["UNWRAP"] = "UNWRAP";
    mode["WRAP"] = "WRAP";
})(mode || (mode = {}));
var ApplyStyle = (function () {
    function ApplyStyle(jodit, style) {
        this.jodit = jodit;
        this.style = style;
    }
    ApplyStyle.prototype.apply = function () {
        var sel = this.jodit.selection;
        var selInfo = [];
        var isCollapsed = sel.isCollapsed();
        if (isCollapsed) {
            var font = this.jodit.createInside.element('font');
            sel.insertNode(font, false, false);
            sel.setCursorIn(font);
            selInfo = sel.save();
            this.applyToElement(font);
            dom_1.Dom.unwrap(font);
        }
        else {
            selInfo = sel.save();
            helpers_1.normalizeNode(sel.area.firstChild);
            sel.wrapInTag(this.applyToElement);
        }
        sel.restore(selInfo);
    };
    ApplyStyle.prototype.applyToElement = function (font) {
        var _this = this;
        var area = this.jodit.selection.area;
        if (this.checkSuitableParent(font) ||
            this.checkSuitableChild(font) ||
            this.checkClosestWrapper(font) ||
            this.unwrapChildren(font)) {
            return;
        }
        if (!this.mode) {
            this.mode = mode.WRAP;
        }
        if (this.mode !== mode.WRAP) {
            return;
        }
        var wrapper = font;
        if (this.style.elementIsBlock) {
            var ulReg_1 = /^(ul|ol|li|td|th|tr|tbody|table)$/i;
            var box_1 = dom_1.Dom.up(font, function (node) {
                if (node && dom_1.Dom.isBlock(node, _this.jodit.s.win)) {
                    if (ulReg_1.test(_this.style.element) ||
                        !ulReg_1.test(node.nodeName)) {
                        return true;
                    }
                }
                return false;
            }, area);
            if (box_1) {
                wrapper = box_1;
            }
            else {
                wrapper = this.wrapUnwrappedText(font);
            }
        }
        var newWrapper = dom_1.Dom.replace(wrapper, this.style.element, this.jodit.createInside);
        if (this.style.elementIsBlock) {
            this.postProcessListElement(newWrapper);
        }
        if (this.style.options.style && this.style.elementIsDefault) {
            helpers_1.css(newWrapper, this.style.options.style);
        }
    };
    ApplyStyle.prototype.checkSuitableParent = function (font) {
        var parentNode = font.parentNode;
        if (parentNode &&
            !dom_1.Dom.next(font, this.isNormalNode, parentNode) &&
            !dom_1.Dom.prev(font, this.isNormalNode, parentNode) &&
            this.isSuitableElement(parentNode, false) &&
            parentNode !== this.jodit.s.area &&
            (!dom_1.Dom.isBlock(parentNode, this.jodit.ew) ||
                this.style.elementIsBlock)) {
            this.toggleStyles(parentNode);
            return true;
        }
        return false;
    };
    ApplyStyle.prototype.checkSuitableChild = function (font) {
        var firstChild = font.firstChild;
        if (firstChild && this.jodit.s.isMarker(firstChild)) {
            firstChild = firstChild.nextSibling;
        }
        if (firstChild &&
            !dom_1.Dom.next(firstChild, this.isNormalNode, font) &&
            !dom_1.Dom.prev(firstChild, this.isNormalNode, font) &&
            this.isSuitableElement(firstChild, false)) {
            this.toggleStyles(firstChild);
            return true;
        }
        return false;
    };
    ApplyStyle.prototype.checkClosestWrapper = function (font) {
        var wrapper = dom_1.Dom.closest(font, this.isSuitableElement, this.jodit.editor);
        if (wrapper) {
            if (this.style.elementIsBlock) {
                this.toggleStyles(wrapper);
                return true;
            }
            var leftRange = this.jodit.s.createRange();
            leftRange.setStartBefore(wrapper);
            leftRange.setEndBefore(font);
            var leftFragment = leftRange.extractContents();
            if ((!leftFragment.textContent ||
                !helpers_1.trim(leftFragment.textContent).length) &&
                leftFragment.firstChild) {
                dom_1.Dom.unwrap(leftFragment.firstChild);
            }
            if (wrapper.parentNode) {
                wrapper.parentNode.insertBefore(leftFragment, wrapper);
            }
            leftRange.setStartAfter(font);
            leftRange.setEndAfter(wrapper);
            var rightFragment = leftRange.extractContents();
            if ((!rightFragment.textContent ||
                !helpers_1.trim(rightFragment.textContent).length) &&
                rightFragment.firstChild) {
                dom_1.Dom.unwrap(rightFragment.firstChild);
            }
            dom_1.Dom.after(wrapper, rightFragment);
            this.toggleStyles(wrapper);
            return true;
        }
        return false;
    };
    ApplyStyle.prototype.elementHasSameStyle = function (elm, rules) {
        return Boolean(checker_1.isPlainObject(rules) &&
            !dom_1.Dom.isTag(elm, 'font') &&
            dom_1.Dom.isHTMLElement(elm, this.jodit.ew) &&
            helpers_1.each(rules, function (property, checkValue) {
                var value = helpers_1.css(elm, property, undefined, true);
                return (!checker_1.isVoid(value) &&
                    value !== '' &&
                    !checker_1.isVoid(checkValue) &&
                    helpers_1.normalizeCssValue(property, checkValue)
                        .toString()
                        .toLowerCase() === value.toString().toLowerCase());
            }));
    };
    ApplyStyle.prototype.isSuitableElement = function (elm, strict) {
        if (strict === void 0) { strict = true; }
        if (!elm) {
            return false;
        }
        var _a = this.style, element = _a.element, elementIsDefault = _a.elementIsDefault, options = _a.options;
        var elmHasSameStyle = this.elementHasSameStyle(elm, options.style);
        var elmIsSame = elm.nodeName.toLowerCase() === element;
        return (((!elementIsDefault || !strict) && elmIsSame) ||
            (elmHasSameStyle && this.isNormalNode(elm)));
    };
    ApplyStyle.prototype.isNormalNode = function (elm) {
        return Boolean(elm !== null &&
            !dom_1.Dom.isEmptyTextNode(elm) &&
            !this.jodit.s.isMarker(elm));
    };
    ApplyStyle.prototype.toggleStyles = function (elm) {
        var _this = this;
        var style = this.style.options.style;
        if (style && elm.nodeName.toLowerCase() === this.style.defaultTag) {
            Object.keys(style).forEach(function (rule) {
                if (_this.mode === mode.UNWRAP ||
                    helpers_1.css(elm, rule) ===
                        helpers_1.normalizeCssValue(rule, style[rule])) {
                    helpers_1.css(elm, rule, '');
                    if (_this.mode === undefined) {
                        _this.mode = mode.UNWRAP;
                    }
                }
                else {
                    helpers_1.css(elm, rule, style[rule]);
                    if (_this.mode === undefined) {
                        _this.mode = mode.WRAP;
                    }
                }
            });
        }
        var isBlock = dom_1.Dom.isBlock(elm, this.jodit.ew);
        var isSuitableInline = !isBlock &&
            (!helpers_1.attr(elm, 'style') ||
                elm.nodeName.toLowerCase() !== this.style.defaultTag);
        var isSuitableBlock = !isSuitableInline &&
            isBlock &&
            elm.nodeName.toLowerCase() === this.style.element;
        if (isSuitableInline || isSuitableBlock) {
            dom_1.Dom.unwrap(elm);
            if (this.mode === undefined) {
                this.mode = mode.UNWRAP;
            }
        }
    };
    ApplyStyle.prototype.unwrapChildren = function (font) {
        var _this = this;
        var needUnwrap = [];
        var firstElementSuit;
        if (font.firstChild) {
            dom_1.Dom.find(font.firstChild, function (elm) {
                if (elm && _this.isSuitableElement(elm)) {
                    if (firstElementSuit === undefined) {
                        firstElementSuit = true;
                    }
                    needUnwrap.push(elm);
                }
                else {
                    if (firstElementSuit === undefined) {
                        firstElementSuit = false;
                    }
                }
                return false;
            }, font, true);
        }
        needUnwrap.forEach(dom_1.Dom.unwrap);
        return Boolean(firstElementSuit);
    };
    ApplyStyle.prototype.wrapUnwrappedText = function (elm) {
        var _a = this.jodit.selection, area = _a.area, win = _a.win;
        var edge = function (n, key) {
            if (key === void 0) { key = 'previousSibling'; }
            var edgeNode = n, node = n;
            while (node) {
                edgeNode = node;
                if (node[key]) {
                    node = node[key];
                }
                else {
                    node =
                        node.parentNode &&
                            !dom_1.Dom.isBlock(node.parentNode, win) &&
                            node.parentNode !== area
                            ? node.parentNode
                            : null;
                }
                if (dom_1.Dom.isBlock(node, win)) {
                    break;
                }
            }
            return edgeNode;
        };
        var start = edge(elm), end = edge(elm, 'nextSibling');
        var range = this.jodit.s.createRange();
        range.setStartBefore(start);
        range.setEndAfter(end);
        var fragment = range.extractContents();
        var wrapper = this.jodit.createInside.element(this.style.element);
        wrapper.appendChild(fragment);
        range.insertNode(wrapper);
        if (this.style.elementIsBlock) {
            this.postProcessListElement(wrapper);
            if (dom_1.Dom.isEmpty(wrapper) &&
                !dom_1.Dom.isTag(wrapper.firstElementChild, 'br')) {
                wrapper.appendChild(this.jodit.createInside.element('br'));
            }
        }
        return wrapper;
    };
    ApplyStyle.prototype.postProcessListElement = function (wrapper) {
        if (/^(OL|UL)$/i.test(this.style.element) &&
            !dom_1.Dom.isTag(wrapper.firstElementChild, 'li')) {
            var li = dom_1.Dom.replace(wrapper, 'li', this.jodit.createInside);
            var ul = dom_1.Dom.wrap(li, this.style.element, this.jodit);
            if (ul) {
                wrapper = ul;
            }
        }
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ApplyStyle.prototype, "applyToElement", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ApplyStyle.prototype, "isSuitableElement", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], ApplyStyle.prototype, "isNormalNode", null);
    return ApplyStyle;
}());
exports.ApplyStyle = ApplyStyle;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = void 0;
var tslib_1 = __webpack_require__(0);
var autobind_decorator_1 = __webpack_require__(10);
var consts = __webpack_require__(3);
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var style_1 = __webpack_require__(63);
var Select = (function () {
    function Select(jodit) {
        var _this = this;
        this.jodit = jodit;
        this.isMarker = function (elm) {
            return dom_1.Dom.isNode(elm, _this.win) &&
                dom_1.Dom.isElement(elm) &&
                dom_1.Dom.isTag(elm, 'span') &&
                elm.hasAttribute('data-' + consts.MARKER_CLASS);
        };
        this.eachSelection = function (callback) {
            var sel = _this.sel;
            if (sel && sel.rangeCount) {
                var range = sel.getRangeAt(0);
                var nodes_1 = [], startOffset = range.startOffset, length_1 = _this.area.childNodes.length, elementOffset = startOffset < length_1 ? startOffset : length_1 - 1, start = range.startContainer === _this.area
                    ? _this.area.childNodes[elementOffset]
                    : range.startContainer, end_1 = range.endContainer === _this.area
                    ? _this.area.childNodes[range.endOffset - 1]
                    : range.endContainer;
                dom_1.Dom.find(start, function (node) {
                    if (node &&
                        node !== _this.area &&
                        !dom_1.Dom.isEmptyTextNode(node) &&
                        !_this.isMarker(node)) {
                        nodes_1.push(node);
                    }
                    return (node === end_1 ||
                        (node && node.contains && node.contains(end_1)));
                }, _this.area, true, 'nextSibling', false);
                var forEvery_1 = function (current) {
                    if (!dom_1.Dom.isOrContains(_this.j.editor, current, true)) {
                        return;
                    }
                    if (current.nodeName.match(/^(UL|OL)$/)) {
                        return Array.from(current.childNodes).forEach(forEvery_1);
                    }
                    if (dom_1.Dom.isTag(current, 'li')) {
                        if (current.firstChild) {
                            current = current.firstChild;
                        }
                        else {
                            var currentB = _this.j.createInside.text(constants_1.INVISIBLE_SPACE);
                            current.appendChild(currentB);
                            current = currentB;
                        }
                    }
                    callback(current);
                };
                if (nodes_1.length === 0 && dom_1.Dom.isEmptyTextNode(start)) {
                    nodes_1.push(start);
                }
                nodes_1.forEach(forEvery_1);
            }
        };
        jodit.e.on('removeMarkers', function () {
            _this.removeMarkers();
        });
    }
    Object.defineProperty(Select.prototype, "j", {
        get: function () {
            return this.jodit;
        },
        enumerable: false,
        configurable: true
    });
    Select.prototype.errorNode = function (node) {
        if (!dom_1.Dom.isNode(node, this.win)) {
            throw helpers_1.error('Parameter node must be instance of Node');
        }
    };
    Object.defineProperty(Select.prototype, "area", {
        get: function () {
            return this.j.editor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "win", {
        get: function () {
            return this.j.ew;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "doc", {
        get: function () {
            return this.j.ed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "sel", {
        get: function () {
            if (this.j.o.shadowRoot) {
                return this.j.o.shadowRoot.getSelection();
            }
            return this.win.getSelection();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select.prototype, "range", {
        get: function () {
            var sel = this.sel;
            return sel && sel.rangeCount ? sel.getRangeAt(0) : this.createRange();
        },
        enumerable: false,
        configurable: true
    });
    Select.prototype.createRange = function (select) {
        if (select === void 0) { select = false; }
        var range = this.doc.createRange();
        if (select) {
            this.selectRange(range);
        }
        return range;
    };
    Select.prototype.remove = function () {
        var sel = this.sel, current = this.current();
        if (sel && current) {
            for (var i = 0; i < sel.rangeCount; i += 1) {
                sel.getRangeAt(i).deleteContents();
                sel.getRangeAt(i).collapse(true);
            }
        }
    };
    Select.prototype.clear = function () {
        var _a, _b;
        if ((_a = this.sel) === null || _a === void 0 ? void 0 : _a.rangeCount) {
            (_b = this.sel) === null || _b === void 0 ? void 0 : _b.removeAllRanges();
        }
    };
    Select.prototype.removeNode = function (node) {
        if (!dom_1.Dom.isOrContains(this.j.editor, node, true)) {
            throw helpers_1.error("Selection.removeNode can remove only editor's children");
        }
        dom_1.Dom.safeRemove(node);
        this.j.e.fire('afterRemoveNode', node);
    };
    Select.prototype.insertCursorAtPoint = function (x, y) {
        var _this = this;
        this.removeMarkers();
        try {
            var rng_1 = this.createRange();
            (function () {
                if (_this.doc.caretPositionFromPoint) {
                    var caret = _this.doc.caretPositionFromPoint(x, y);
                    if (caret) {
                        rng_1.setStart(caret.offsetNode, caret.offset);
                        return;
                    }
                }
                if (_this.doc.caretRangeFromPoint) {
                    var caret = _this.doc.caretRangeFromPoint(x, y);
                    rng_1.setStart(caret.startContainer, caret.startOffset);
                }
            })();
            rng_1.collapse(true);
            this.selectRange(rng_1);
            return true;
        }
        catch (_a) { }
        return false;
    };
    Select.prototype.removeMarkers = function () {
        helpers_1.$$('span[data-' + consts.MARKER_CLASS + ']', this.area).forEach(dom_1.Dom.safeRemove);
    };
    Select.prototype.marker = function (atStart, range) {
        if (atStart === void 0) { atStart = false; }
        var newRange = null;
        if (range) {
            newRange = range.cloneRange();
            newRange.collapse(atStart);
        }
        var marker = this.j.createInside.span();
        marker.id =
            consts.MARKER_CLASS +
                '_' +
                +new Date() +
                '_' +
                ('' + Math.random()).slice(2);
        marker.style.lineHeight = '0';
        marker.style.display = 'none';
        marker.setAttribute('data-' + consts.MARKER_CLASS, atStart ? 'start' : 'end');
        marker.appendChild(this.j.createInside.text(consts.INVISIBLE_SPACE));
        if (newRange) {
            if (dom_1.Dom.isOrContains(this.area, atStart ? newRange.startContainer : newRange.endContainer)) {
                newRange.insertNode(marker);
            }
        }
        return marker;
    };
    Select.prototype.restore = function (selectionInfo) {
        var _this = this;
        if (selectionInfo === void 0) { selectionInfo = []; }
        if (helpers_1.isArray(selectionInfo)) {
            var range_1 = false;
            selectionInfo.forEach(function (selection) {
                var end = _this.area.querySelector('#' + selection.endId), start = _this.area.querySelector('#' + selection.startId);
                if (!start) {
                    return;
                }
                range_1 = _this.createRange();
                if (selection.collapsed || !end) {
                    var previousNode = start.previousSibling;
                    if (dom_1.Dom.isText(previousNode)) {
                        range_1.setStart(previousNode, previousNode.nodeValue
                            ? previousNode.nodeValue.length
                            : 0);
                    }
                    else {
                        range_1.setStartBefore(start);
                    }
                    dom_1.Dom.safeRemove(start);
                    range_1.collapse(true);
                }
                else {
                    range_1.setStartAfter(start);
                    dom_1.Dom.safeRemove(start);
                    range_1.setEndBefore(end);
                    dom_1.Dom.safeRemove(end);
                }
            });
            if (range_1) {
                this.selectRange(range_1);
            }
        }
    };
    Select.prototype.save = function () {
        var sel = this.sel;
        if (!sel || !sel.rangeCount) {
            return [];
        }
        var info = [], length = sel.rangeCount, ranges = [];
        var i, start, end;
        for (i = 0; i < length; i += 1) {
            ranges[i] = sel.getRangeAt(i);
            if (ranges[i].collapsed) {
                start = this.marker(true, ranges[i]);
                info[i] = {
                    startId: start.id,
                    collapsed: true,
                    startMarker: start.outerHTML
                };
            }
            else {
                start = this.marker(true, ranges[i]);
                end = this.marker(false, ranges[i]);
                info[i] = {
                    startId: start.id,
                    endId: end.id,
                    collapsed: false,
                    startMarker: start.outerHTML,
                    endMarker: end.outerHTML
                };
            }
        }
        sel.removeAllRanges();
        for (i = length - 1; i >= 0; --i) {
            var startElm = this.doc.getElementById(info[i].startId);
            if (startElm) {
                if (info[i].collapsed) {
                    ranges[i].setStartAfter(startElm);
                    ranges[i].collapse(true);
                }
                else {
                    ranges[i].setStartBefore(startElm);
                    if (info[i].endId) {
                        var endElm = this.doc.getElementById(info[i].endId);
                        if (endElm) {
                            ranges[i].setEndAfter(endElm);
                        }
                    }
                }
            }
            try {
                sel.addRange(ranges[i].cloneRange());
            }
            catch (_a) { }
        }
        return info;
    };
    Select.prototype.focus = function () {
        var _a, _b;
        if (!this.isFocused()) {
            if (this.j.iframe) {
                if (this.doc.readyState === 'complete') {
                    this.j.iframe.focus();
                }
            }
            this.win.focus();
            this.area.focus();
            var sel = this.sel, range = (sel === null || sel === void 0 ? void 0 : sel.rangeCount) ? sel === null || sel === void 0 ? void 0 : sel.getRangeAt(0) : null;
            if (!range || !dom_1.Dom.isOrContains(this.area, range.startContainer)) {
                var range_2 = this.createRange();
                range_2.setStart(this.area, 0);
                range_2.collapse(true);
                this.selectRange(range_2, false);
            }
            if (!this.j.editorIsActive) {
                (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.fire('focus');
            }
            return true;
        }
        return false;
    };
    Select.prototype.isCollapsed = function () {
        var sel = this.sel;
        for (var r = 0; sel && r < sel.rangeCount; r += 1) {
            if (!sel.getRangeAt(r).collapsed) {
                return false;
            }
        }
        return true;
    };
    Select.prototype.isFocused = function () {
        return (this.doc.hasFocus &&
            this.doc.hasFocus() &&
            this.area === this.doc.activeElement);
    };
    Select.prototype.current = function (checkChild) {
        if (checkChild === void 0) { checkChild = true; }
        if (this.j.getRealMode() === consts.MODE_WYSIWYG) {
            var sel = this.sel;
            if (!sel || sel.rangeCount === 0) {
                return null;
            }
            var range = sel.getRangeAt(0);
            var node = range.startContainer, rightMode_1 = false;
            var child = function (nd) {
                return rightMode_1 ? nd.lastChild : nd.firstChild;
            };
            if (dom_1.Dom.isTag(node, 'br') && sel.isCollapsed) {
                return node;
            }
            if (!dom_1.Dom.isText(node)) {
                node = range.startContainer.childNodes[range.startOffset];
                if (!node) {
                    node =
                        range.startContainer.childNodes[range.startOffset - 1];
                    rightMode_1 = true;
                }
                if (node && sel.isCollapsed && !dom_1.Dom.isText(node)) {
                    if (!rightMode_1 && dom_1.Dom.isText(node.previousSibling)) {
                        node = node.previousSibling;
                    }
                    else if (checkChild) {
                        var current = child(node);
                        while (current) {
                            if (current && dom_1.Dom.isText(current)) {
                                node = current;
                                break;
                            }
                            current = child(current);
                        }
                    }
                }
                if (node && !sel.isCollapsed && !dom_1.Dom.isText(node)) {
                    var leftChild = node, rightChild = node;
                    do {
                        leftChild = leftChild.firstChild;
                        rightChild = rightChild.lastChild;
                    } while (leftChild && rightChild && !dom_1.Dom.isText(leftChild));
                    if (leftChild === rightChild &&
                        leftChild &&
                        dom_1.Dom.isText(leftChild)) {
                        node = leftChild;
                    }
                }
            }
            if (node && dom_1.Dom.isOrContains(this.area, node)) {
                return node;
            }
        }
        return null;
    };
    Select.prototype.insertNode = function (node, insertCursorAfter, fireChange) {
        var _a;
        if (insertCursorAfter === void 0) { insertCursorAfter = true; }
        if (fireChange === void 0) { fireChange = true; }
        this.errorNode(node);
        if (!this.isFocused() && this.j.isEditorMode()) {
            this.focus();
        }
        var sel = this.sel;
        if (!this.isCollapsed()) {
            this.j.execCommand('Delete');
        }
        if (sel && sel.rangeCount) {
            var range = sel.getRangeAt(0);
            if (dom_1.Dom.isOrContains(this.area, range.commonAncestorContainer)) {
                if (/^(BR|HR|IMG|VIDEO)$/i.test(range.startContainer.nodeName) &&
                    range.collapsed) {
                    (_a = range.startContainer.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(node, range.startContainer);
                }
                else {
                    range.deleteContents();
                    range.insertNode(node);
                }
            }
            else {
                this.area.appendChild(node);
            }
        }
        else {
            this.area.appendChild(node);
        }
        if (insertCursorAfter) {
            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                node.lastChild && this.setCursorAfter(node.lastChild);
            }
            else {
                this.setCursorAfter(node);
            }
        }
        if (fireChange && this.j.events) {
            this.j.e.fire('synchro');
        }
        if (this.j.events) {
            this.j.e.fire('afterInsertNode', node);
        }
    };
    Select.prototype.insertHTML = function (html) {
        if (html === '') {
            return;
        }
        var node = this.j.createInside.div(), fragment = this.j.createInside.fragment();
        var lastChild, lastEditorElement;
        if (!this.isFocused() && this.j.isEditorMode()) {
            this.focus();
        }
        if (!dom_1.Dom.isNode(html, this.win)) {
            node.innerHTML = html.toString();
        }
        else {
            node.appendChild(html);
        }
        if (!this.j.isEditorMode() &&
            this.j.e.fire('insertHTML', node.innerHTML) === false) {
            return;
        }
        lastChild = node.lastChild;
        if (!lastChild) {
            return;
        }
        while (node.firstChild) {
            lastChild = node.firstChild;
            fragment.appendChild(node.firstChild);
        }
        this.insertNode(fragment, false);
        if (lastChild) {
            this.setCursorAfter(lastChild);
        }
        else {
            this.setCursorIn(fragment);
        }
        lastEditorElement = this.area.lastChild;
        while (dom_1.Dom.isText(lastEditorElement) &&
            lastEditorElement.previousSibling &&
            lastEditorElement.nodeValue &&
            /^\s*$/.test(lastEditorElement.nodeValue)) {
            lastEditorElement = lastEditorElement.previousSibling;
        }
        if (lastChild) {
            if (lastEditorElement &&
                lastChild === lastEditorElement &&
                dom_1.Dom.isElement(lastChild)) {
                this.area.appendChild(this.j.createInside.element('br'));
            }
            this.setCursorAfter(lastChild);
        }
    };
    Select.prototype.insertImage = function (url, styles, defaultWidth) {
        var image = helpers_1.isString(url) ? this.j.createInside.element('img') : url;
        if (helpers_1.isString(url)) {
            image.setAttribute('src', url);
        }
        if (defaultWidth !== null) {
            var dw = defaultWidth.toString();
            if (dw &&
                'auto' !== dw &&
                String(dw).indexOf('px') < 0 &&
                String(dw).indexOf('%') < 0) {
                dw += 'px';
            }
            helpers_1.css(image, 'width', dw);
        }
        if (styles && typeof styles === 'object') {
            helpers_1.css(image, styles);
        }
        var onload = function () {
            if (image.naturalHeight < image.offsetHeight ||
                image.naturalWidth < image.offsetWidth) {
                image.style.width = '';
                image.style.height = '';
            }
            image.removeEventListener('load', onload);
        };
        this.j.e.on(image, 'load', onload);
        if (image.complete) {
            onload();
        }
        var result = this.insertNode(image);
        this.j.e.fire('afterInsertImage', image);
        return result;
    };
    Select.prototype.setCursorAfter = function (node) {
        var _this = this;
        this.errorNode(node);
        if (!dom_1.Dom.up(node, function (elm) {
            return elm === _this.area || (elm && elm.parentNode === _this.area);
        }, this.area)) {
            throw helpers_1.error('Node element must be in editor');
        }
        var range = this.createRange();
        var fakeNode = null;
        if (!dom_1.Dom.isText(node)) {
            fakeNode = this.j.createInside.text(consts.INVISIBLE_SPACE);
            range.setStartAfter(node);
            range.insertNode(fakeNode);
            range.selectNode(fakeNode);
        }
        else {
            range.setEnd(node, node.nodeValue !== null ? node.nodeValue.length : 0);
        }
        range.collapse(false);
        this.selectRange(range);
        return fakeNode;
    };
    Select.prototype.cursorInTheEdge = function (start, parentBlock) {
        var _a, _b;
        var end = !start, range = (_a = this.sel) === null || _a === void 0 ? void 0 : _a.getRangeAt(0), current = this.current(false);
        if (!range ||
            !current ||
            !dom_1.Dom.isOrContains(parentBlock, current, true)) {
            return null;
        }
        var container = start ? range.startContainer : range.endContainer;
        var offset = start ? range.startOffset : range.endOffset;
        var check = function (elm) {
            return elm && !dom_1.Dom.isTag(elm, 'br') && !dom_1.Dom.isEmptyTextNode(elm);
        };
        if (dom_1.Dom.isText(container)) {
            var text = ((_b = container.nodeValue) === null || _b === void 0 ? void 0 : _b.length) ? container.nodeValue : '';
            if (end && text.replace(constants_1.INVISIBLE_SPACE_REG_EXP_END(), '').length > offset) {
                return false;
            }
            var inv = constants_1.INVISIBLE_SPACE_REG_EXP_START().exec(text);
            if (start &&
                ((inv && inv[0].length < offset) || (!inv && offset > 0))) {
                return false;
            }
        }
        else {
            var children = Array.from(container.childNodes);
            if (end) {
                if (children.slice(offset).some(check)) {
                    return false;
                }
            }
            else {
                if (children.slice(0, offset).some(check)) {
                    return false;
                }
            }
        }
        return !helpers_1.call(start ? dom_1.Dom.prev : dom_1.Dom.next, current, check, parentBlock);
    };
    Select.prototype.cursorOnTheLeft = function (parentBlock) {
        return this.cursorInTheEdge(true, parentBlock);
    };
    Select.prototype.cursorOnTheRight = function (parentBlock) {
        return this.cursorInTheEdge(false, parentBlock);
    };
    Select.prototype.setCursorBefore = function (node) {
        var _this = this;
        this.errorNode(node);
        if (!dom_1.Dom.up(node, function (elm) {
            return elm === _this.area || (elm && elm.parentNode === _this.area);
        }, this.area)) {
            throw helpers_1.error('Node element must be in editor');
        }
        var range = this.createRange();
        var fakeNode = null;
        if (!dom_1.Dom.isText(node)) {
            fakeNode = this.j.createInside.text(consts.INVISIBLE_SPACE);
            range.setStartBefore(node);
            range.collapse(true);
            range.insertNode(fakeNode);
            range.selectNode(fakeNode);
        }
        else {
            range.setStart(node, node.nodeValue !== null ? node.nodeValue.length : 0);
        }
        range.collapse(true);
        this.selectRange(range);
        return fakeNode;
    };
    Select.prototype.setCursorIn = function (node, inStart) {
        var _this = this;
        if (inStart === void 0) { inStart = false; }
        this.errorNode(node);
        if (!dom_1.Dom.up(node, function (elm) {
            return elm === _this.area || (elm && elm.parentNode === _this.area);
        }, this.area)) {
            throw helpers_1.error('Node element must be in editor');
        }
        var range = this.createRange();
        var start = node, last = node;
        do {
            if (dom_1.Dom.isText(start)) {
                break;
            }
            last = start;
            start = inStart ? start.firstChild : start.lastChild;
        } while (start);
        if (!start) {
            var fakeNode = this.j.createInside.text(consts.INVISIBLE_SPACE);
            if (!/^(img|br|input)$/i.test(last.nodeName)) {
                last.appendChild(fakeNode);
                last = fakeNode;
            }
            else {
                start = last;
            }
        }
        range.selectNodeContents(start || last);
        range.collapse(inStart);
        this.selectRange(range);
        return last;
    };
    Select.prototype.selectRange = function (range, focus) {
        if (focus === void 0) { focus = true; }
        var sel = this.sel;
        if (focus && !this.isFocused()) {
            this.focus();
        }
        if (sel) {
            sel.removeAllRanges();
            sel.addRange(range);
        }
        this.j.e.fire('changeSelection');
    };
    Select.prototype.select = function (node, inward) {
        var _this = this;
        if (inward === void 0) { inward = false; }
        this.errorNode(node);
        if (!dom_1.Dom.up(node, function (elm) {
            return elm === _this.area || (elm && elm.parentNode === _this.area);
        }, this.area)) {
            throw helpers_1.error('Node element must be in editor');
        }
        var range = this.createRange();
        range[inward ? 'selectNodeContents' : 'selectNode'](node);
        this.selectRange(range);
    };
    Object.defineProperty(Select.prototype, "html", {
        get: function () {
            var sel = this.sel;
            if (sel && sel.rangeCount > 0) {
                var range = sel.getRangeAt(0);
                var clonedSelection = range.cloneContents();
                var div = this.j.createInside.div();
                div.appendChild(clonedSelection);
                return div.innerHTML;
            }
            return '';
        },
        enumerable: false,
        configurable: true
    });
    Select.prototype.wrapInTag = function (tagOrCallback) {
        var _this = this;
        helpers_1.$$('*[style*=font-size]', this.area).forEach(function (elm) {
            elm.style &&
                elm.style.fontSize &&
                elm.setAttribute('data-font-size', elm.style.fontSize.toString());
        });
        if (!this.isCollapsed()) {
            this.doc.execCommand('fontsize', false, '7');
        }
        else {
            var font = this.j.createInside.element('font');
            helpers_1.attr(font, 'size', 7);
            this.insertNode(font, false, false);
        }
        helpers_1.$$('*[data-font-size]', this.area).forEach(function (elm) {
            var fontSize = helpers_1.attr(elm, 'data-font-size');
            if (elm.style && fontSize) {
                elm.style.fontSize = fontSize;
                elm.removeAttribute('data-font-size');
            }
        });
        var result = [];
        helpers_1.$$('font[size="7"]', this.area).forEach(function (font) {
            try {
                if (font.firstChild &&
                    font.firstChild === font.lastChild &&
                    _this.isMarker(font.firstChild)) {
                    return;
                }
                if (helpers_1.isFunction(tagOrCallback)) {
                    tagOrCallback(font);
                }
                else {
                    result.push(dom_1.Dom.replace(font, tagOrCallback, _this.j.createInside));
                }
            }
            finally {
                if (font.parentNode) {
                    dom_1.Dom.unwrap(font);
                }
            }
        });
        return result;
    };
    Select.prototype.applyStyle = function (style, options) {
        if (options === void 0) { options = {}; }
        var styleElm = new style_1.Style({
            style: style,
            element: options.element,
            defaultTag: options.defaultTag
        });
        styleElm.apply(this.j);
    };
    Select.prototype.splitSelection = function (currentBox) {
        if (!this.isCollapsed()) {
            return null;
        }
        var leftRange = this.createRange();
        var range = this.range;
        leftRange.setStartBefore(currentBox);
        var cursorOnTheRight = this.cursorOnTheRight(currentBox);
        var cursorOnTheLeft = this.cursorOnTheLeft(currentBox);
        var br = null;
        if (cursorOnTheRight || cursorOnTheLeft) {
            br = this.j.createInside.element('br');
            range.insertNode(br);
            var clearBR = function (start, getNext) {
                var next = getNext(start);
                while (next) {
                    var nextSib = getNext(next);
                    if (next &&
                        (dom_1.Dom.isTag(next, 'br') || dom_1.Dom.isEmptyTextNode(next))) {
                        dom_1.Dom.safeRemove(next);
                    }
                    else {
                        break;
                    }
                    next = nextSib;
                }
            };
            clearBR(br, function (n) { return n.nextSibling; });
            clearBR(br, function (n) { return n.previousSibling; });
            if (cursorOnTheRight) {
                leftRange.setEndBefore(br);
                range.setEndBefore(br);
            }
            else {
                leftRange.setEndAfter(br);
                range.setEndAfter(br);
            }
        }
        else {
            leftRange.setEnd(range.startContainer, range.startOffset);
        }
        var fragment = leftRange.extractContents();
        if (currentBox.parentNode) {
            try {
                currentBox.parentNode.insertBefore(fragment, currentBox);
                if (cursorOnTheRight && br && br.parentNode) {
                    var range_3 = this.createRange();
                    range_3.setStartBefore(br);
                    this.selectRange(range_3);
                }
            }
            catch (e) {
                if (false) {}
            }
        }
        return currentBox.previousElementSibling;
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Select.prototype, "focus", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Select.prototype, "setCursorAfter", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Select.prototype, "setCursorBefore", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], Select.prototype, "setCursorIn", null);
    return Select;
}());
exports.Select = Select;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusBar = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(193);
var component_1 = __webpack_require__(7);
var dom_1 = __webpack_require__(2);
var StatusBar = (function (_super) {
    tslib_1.__extends(StatusBar, _super);
    function StatusBar(jodit, target) {
        var _this = _super.call(this, jodit) || this;
        _this.target = target;
        _this.container = jodit.c.div('jodit-status-bar');
        target.appendChild(_this.container);
        _this.hide();
        return _this;
    }
    StatusBar.prototype.hide = function () {
        this.container && this.container.classList.add('jodit_hidden');
    };
    StatusBar.prototype.show = function () {
        this.container && this.container.classList.remove('jodit_hidden');
    };
    StatusBar.prototype.getHeight = function () {
        return this.container.offsetHeight;
    };
    StatusBar.prototype.findEmpty = function (inTheRight) {
        if (inTheRight === void 0) { inTheRight = false; }
        var items = this.container.querySelectorAll('.jodit-status-bar__item' +
            (inTheRight ? '.jodit-status-bar__item-right' : ''));
        for (var i = 0; i < items.length; i += 1) {
            if (!items[i].innerHTML.trim().length) {
                return items[i];
            }
        }
    };
    StatusBar.prototype.append = function (child, inTheRight) {
        if (inTheRight === void 0) { inTheRight = false; }
        var wrapper = this.findEmpty(inTheRight) ||
            this.j.c.div('jodit-status-bar__item');
        if (inTheRight) {
            wrapper.classList.add('jodit-status-bar__item-right');
        }
        wrapper.appendChild(child);
        this.container.appendChild(wrapper);
        this.show();
        this.j.e.fire('resize');
    };
    StatusBar.prototype.destruct = function () {
        this.setStatus(component_1.STATUSES.beforeDestruct);
        dom_1.Dom.safeRemove(this.container);
        delete this.container;
        _super.prototype.destruct.call(this);
    };
    return StatusBar;
}(component_1.ViewComponent));
exports.StatusBar = StatusBar;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
var tslib_1 = __webpack_require__(0);
var consts = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var viewComponent_1 = __webpack_require__(47);
var global_1 = __webpack_require__(12);
var decorators_1 = __webpack_require__(13);
var Table = (function (_super) {
    tslib_1.__extends(Table, _super);
    function Table() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selected = new Set();
        return _this;
    }
    Table.prototype.recalculateStyles = function () {
        var style = global_1.getContainer(this.j, Table, 'style', true);
        var selectors = [];
        this.selected.forEach(function (td) {
            var selector = helpers_1.cssPath(td);
            selector && selectors.push(selector);
        });
        style.innerHTML = selectors.length
            ? selectors.join(',') + ("{" + this.j.o.table.selectionCellStyle + "}")
            : '';
    };
    Table.prototype.addSelection = function (td) {
        this.selected.add(td);
        this.recalculateStyles();
        var table = dom_1.Dom.closest(td, 'table', this.j.editor);
        if (table) {
            var cells = Table.selectedByTable.get(table) || new Set();
            cells.add(td);
            Table.selectedByTable.set(table, cells);
        }
    };
    Table.prototype.removeSelection = function (td) {
        this.selected.delete(td);
        this.recalculateStyles();
        var table = dom_1.Dom.closest(td, 'table', this.j.editor);
        if (table) {
            var cells = Table.selectedByTable.get(table);
            if (cells) {
                cells.delete(td);
                if (!cells.size) {
                    Table.selectedByTable.delete(table);
                }
            }
        }
    };
    Table.prototype.getAllSelectedCells = function () {
        return Array.from(this.selected);
    };
    Table.getSelectedCellsByTable = function (table) {
        var cells = Table.selectedByTable.get(table);
        return cells ? Array.from(cells) : [];
    };
    Table.prototype.destruct = function () {
        this.selected.clear();
        return _super.prototype.destruct.call(this);
    };
    Table.getRowsCount = function (table) {
        return table.rows.length;
    };
    Table.getColumnsCount = function (table) {
        var matrix = Table.formalMatrix(table);
        return matrix.reduce(function (max_count, cells) {
            return Math.max(max_count, cells.length);
        }, 0);
    };
    Table.formalMatrix = function (table, callback) {
        var matrix = [[]];
        var rows = Array.from(table.rows);
        var setCell = function (cell, i) {
            if (matrix[i] === undefined) {
                matrix[i] = [];
            }
            var colSpan = cell.colSpan, rowSpan = cell.rowSpan;
            var column, row, currentColumn = 0;
            while (matrix[i][currentColumn]) {
                currentColumn += 1;
            }
            for (row = 0; row < rowSpan; row += 1) {
                for (column = 0; column < colSpan; column += 1) {
                    if (matrix[i + row] === undefined) {
                        matrix[i + row] = [];
                    }
                    if (callback &&
                        callback(cell, i + row, currentColumn + column, colSpan, rowSpan) === false) {
                        return false;
                    }
                    matrix[i + row][currentColumn + column] = cell;
                }
            }
        };
        for (var i = 0; i < rows.length; i += 1) {
            var cells = Array.from(rows[i].cells);
            for (var j = 0; j < cells.length; j += 1) {
                if (setCell(cells[j], i) === false) {
                    return matrix;
                }
            }
        }
        return matrix;
    };
    Table.formalCoordinate = function (table, cell, max) {
        if (max === void 0) { max = false; }
        var i = 0, j = 0, width = 1, height = 1;
        Table.formalMatrix(table, function (td, ii, jj, colSpan, rowSpan) {
            if (cell === td) {
                i = ii;
                j = jj;
                width = colSpan || 1;
                height = rowSpan || 1;
                if (max) {
                    j += (colSpan || 1) - 1;
                    i += (rowSpan || 1) - 1;
                }
                return false;
            }
        });
        return [i, j, width, height];
    };
    Table.appendRow = function (table, line, after, create) {
        var row;
        if (!line) {
            var columnsCount = Table.getColumnsCount(table);
            row = create.element('tr');
            for (var j = 0; j < columnsCount; j += 1) {
                row.appendChild(create.element('td'));
            }
        }
        else {
            row = line.cloneNode(true);
            helpers_1.$$('td,th', line).forEach(function (cell) {
                var rowspan = helpers_1.attr(cell, 'rowspan');
                if (rowspan && parseInt(rowspan, 10) > 1) {
                    var newRowSpan = parseInt(rowspan, 10) - 1;
                    helpers_1.attr(cell, 'rowspan', newRowSpan > 1 ? newRowSpan : null);
                }
            });
            helpers_1.$$('td,th', row).forEach(function (cell) {
                cell.innerHTML = '';
            });
        }
        if (after && line && line.nextSibling) {
            line.parentNode &&
                line.parentNode.insertBefore(row, line.nextSibling);
        }
        else if (!after && line) {
            line.parentNode && line.parentNode.insertBefore(row, line);
        }
        else {
            (helpers_1.$$(':scope>tbody', table)[0] || table).appendChild(row);
        }
    };
    Table.removeRow = function (table, rowIndex) {
        var box = Table.formalMatrix(table);
        var dec;
        var row = table.rows[rowIndex];
        helpers_1.each(box[rowIndex], function (j, cell) {
            dec = false;
            if (rowIndex - 1 >= 0 && box[rowIndex - 1][j] === cell) {
                dec = true;
            }
            else if (box[rowIndex + 1] && box[rowIndex + 1][j] === cell) {
                if (cell.parentNode === row &&
                    cell.parentNode.nextSibling) {
                    dec = true;
                    var nextCell = j + 1;
                    while (box[rowIndex + 1][nextCell] === cell) {
                        nextCell += 1;
                    }
                    var nextRow = dom_1.Dom.next(cell.parentNode, function (elm) { return dom_1.Dom.isTag(elm, 'tr'); }, table);
                    if (box[rowIndex + 1][nextCell]) {
                        nextRow.insertBefore(cell, box[rowIndex + 1][nextCell]);
                    }
                    else {
                        nextRow.appendChild(cell);
                    }
                }
            }
            else {
                dom_1.Dom.safeRemove(cell);
            }
            if (dec &&
                (cell.parentNode === row || cell !== box[rowIndex][j - 1])) {
                var rowSpan = cell.rowSpan;
                helpers_1.attr(cell, 'rowspan', rowSpan - 1 > 1 ? (rowSpan - 1).toString() : null);
            }
        });
        dom_1.Dom.safeRemove(row);
    };
    Table.appendColumn = function (table, j, after, create) {
        var box = Table.formalMatrix(table);
        var i;
        if (j === undefined || j < 0) {
            j = Table.getColumnsCount(table) - 1;
        }
        for (i = 0; i < box.length; i += 1) {
            var cell = create.element('td');
            var td = box[i][j];
            var added = false;
            if (after) {
                if ((box[i] && td && j + 1 >= box[i].length) ||
                    td !== box[i][j + 1]) {
                    if (td.nextSibling) {
                        td.parentNode &&
                            td.parentNode.insertBefore(cell, td.nextSibling);
                    }
                    else {
                        td.parentNode && td.parentNode.appendChild(cell);
                    }
                    added = true;
                }
            }
            else {
                if (j - 1 < 0 ||
                    (box[i][j] !== box[i][j - 1] && box[i][j].parentNode)) {
                    td.parentNode &&
                        td.parentNode.insertBefore(cell, box[i][j]);
                    added = true;
                }
            }
            if (!added) {
                box[i][j].setAttribute('colspan', (parseInt(helpers_1.attr(box[i][j], 'colspan') || '1', 10) + 1).toString());
            }
        }
    };
    Table.removeColumn = function (table, j) {
        var box = Table.formalMatrix(table);
        var dec;
        helpers_1.each(box, function (i, cells) {
            var td = cells[j];
            dec = false;
            if (j - 1 >= 0 && box[i][j - 1] === td) {
                dec = true;
            }
            else if (j + 1 < cells.length && box[i][j + 1] === td) {
                dec = true;
            }
            else {
                dom_1.Dom.safeRemove(td);
            }
            if (dec && (i - 1 < 0 || td !== box[i - 1][j])) {
                var colSpan = td.colSpan;
                helpers_1.attr(td, 'colspan', colSpan - 1 > 1 ? (colSpan - 1).toString() : null);
            }
        });
    };
    Table.getSelectedBound = function (table, selectedCells) {
        var bound = [
            [Infinity, Infinity],
            [0, 0]
        ];
        var box = Table.formalMatrix(table);
        var i, j, k;
        for (i = 0; i < box.length; i += 1) {
            for (j = 0; box[i] && j < box[i].length; j += 1) {
                if (selectedCells.includes(box[i][j])) {
                    bound[0][0] = Math.min(i, bound[0][0]);
                    bound[0][1] = Math.min(j, bound[0][1]);
                    bound[1][0] = Math.max(i, bound[1][0]);
                    bound[1][1] = Math.max(j, bound[1][1]);
                }
            }
        }
        for (i = bound[0][0]; i <= bound[1][0]; i += 1) {
            for (k = 1, j = bound[0][1]; j <= bound[1][1]; j += 1) {
                while (box[i] && box[i][j - k] && box[i][j] === box[i][j - k]) {
                    bound[0][1] = Math.min(j - k, bound[0][1]);
                    bound[1][1] = Math.max(j - k, bound[1][1]);
                    k += 1;
                }
                k = 1;
                while (box[i] && box[i][j + k] && box[i][j] === box[i][j + k]) {
                    bound[0][1] = Math.min(j + k, bound[0][1]);
                    bound[1][1] = Math.max(j + k, bound[1][1]);
                    k += 1;
                }
                k = 1;
                while (box[i - k] && box[i][j] === box[i - k][j]) {
                    bound[0][0] = Math.min(i - k, bound[0][0]);
                    bound[1][0] = Math.max(i - k, bound[1][0]);
                    k += 1;
                }
                k = 1;
                while (box[i + k] && box[i][j] === box[i + k][j]) {
                    bound[0][0] = Math.min(i + k, bound[0][0]);
                    bound[1][0] = Math.max(i + k, bound[1][0]);
                    k += 1;
                }
            }
        }
        return bound;
    };
    Table.normalizeTable = function (table) {
        var i, j, min, not;
        var __marked = [], box = Table.formalMatrix(table);
        for (j = 0; j < box[0].length; j += 1) {
            min = 1000000;
            not = false;
            for (i = 0; i < box.length; i += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].colSpan < 2) {
                    not = true;
                    break;
                }
                min = Math.min(min, box[i][j].colSpan);
            }
            if (!not) {
                for (i = 0; i < box.length; i += 1) {
                    if (box[i][j] === undefined) {
                        continue;
                    }
                    Table.__mark(box[i][j], 'colspan', box[i][j].colSpan - min + 1, __marked);
                }
            }
        }
        for (i = 0; i < box.length; i += 1) {
            min = 1000000;
            not = false;
            for (j = 0; j < box[i].length; j += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].rowSpan < 2) {
                    not = true;
                    break;
                }
                min = Math.min(min, box[i][j].rowSpan);
            }
            if (!not) {
                for (j = 0; j < box[i].length; j += 1) {
                    if (box[i][j] === undefined) {
                        continue;
                    }
                    Table.__mark(box[i][j], 'rowspan', box[i][j].rowSpan - min + 1, __marked);
                }
            }
        }
        for (i = 0; i < box.length; i += 1) {
            for (j = 0; j < box[i].length; j += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].hasAttribute('rowspan') &&
                    box[i][j].rowSpan === 1) {
                    box[i][j].removeAttribute('rowspan');
                }
                if (box[i][j].hasAttribute('colspan') &&
                    box[i][j].colSpan === 1) {
                    box[i][j].removeAttribute('colspan');
                }
                if (box[i][j].hasAttribute('class') &&
                    !helpers_1.attr(box[i][j], 'class')) {
                    box[i][j].removeAttribute('class');
                }
            }
        }
        Table.__unmark(__marked);
    };
    Table.mergeSelected = function (table, jodit) {
        var html = [], bound = Table.getSelectedBound(table, Table.getSelectedCellsByTable(table));
        var w = 0, first = null, first_j = 0, td, cols = 0, rows = 0;
        var __marked = [];
        if (bound && (bound[0][0] - bound[1][0] || bound[0][1] - bound[1][1])) {
            Table.formalMatrix(table, function (cell, i, j, cs, rs) {
                if (i >= bound[0][0] && i <= bound[1][0]) {
                    if (j >= bound[0][1] && j <= bound[1][1]) {
                        td = cell;
                        if (td.__i_am_already_was) {
                            return;
                        }
                        td.__i_am_already_was = true;
                        if (i === bound[0][0] && td.style.width) {
                            w += td.offsetWidth;
                        }
                        if (helpers_1.trim(cell.innerHTML.replace(/<br(\/)?>/g, '')) !== '') {
                            html.push(cell.innerHTML);
                        }
                        if (cs > 1) {
                            cols += cs - 1;
                        }
                        if (rs > 1) {
                            rows += rs - 1;
                        }
                        if (!first) {
                            first = cell;
                            first_j = j;
                        }
                        else {
                            Table.__mark(td, 'remove', 1, __marked);
                            instance(jodit).removeSelection(td);
                        }
                    }
                }
            });
            cols = bound[1][1] - bound[0][1] + 1;
            rows = bound[1][0] - bound[0][0] + 1;
            if (first) {
                if (cols > 1) {
                    Table.__mark(first, 'colspan', cols, __marked);
                }
                if (rows > 1) {
                    Table.__mark(first, 'rowspan', rows, __marked);
                }
                if (w) {
                    Table.__mark(first, 'width', ((w / table.offsetWidth) * 100).toFixed(consts.ACCURACY) + '%', __marked);
                    if (first_j) {
                        Table.setColumnWidthByDelta(table, first_j, 0, true, __marked);
                    }
                }
                first.innerHTML = html.join('<br/>');
                instance(jodit).addSelection(first);
                delete first.__i_am_already_was;
                Table.__unmark(__marked);
                Table.normalizeTable(table);
                helpers_1.each(Array.from(table.rows), function (index, tr) {
                    if (!tr.cells.length) {
                        dom_1.Dom.safeRemove(tr);
                    }
                });
            }
        }
    };
    Table.splitHorizontal = function (table, jodit) {
        var coord, td, tr, parent, after;
        var __marked = [];
        Table.getSelectedCellsByTable(table).forEach(function (cell) {
            td = jodit.createInside.element('td');
            td.appendChild(jodit.createInside.element('br'));
            tr = jodit.createInside.element('tr');
            coord = Table.formalCoordinate(table, cell);
            if (cell.rowSpan < 2) {
                Table.formalMatrix(table, function (tdElm, i, j) {
                    if (coord[0] === i &&
                        coord[1] !== j &&
                        tdElm !== cell) {
                        Table.__mark(tdElm, 'rowspan', tdElm.rowSpan + 1, __marked);
                    }
                });
                dom_1.Dom.after(dom_1.Dom.closest(cell, 'tr', table), tr);
                tr.appendChild(td);
            }
            else {
                Table.__mark(cell, 'rowspan', cell.rowSpan - 1, __marked);
                Table.formalMatrix(table, function (tdElm, i, j) {
                    if (i > coord[0] &&
                        i < coord[0] + cell.rowSpan &&
                        coord[1] > j &&
                        tdElm.parentNode
                            .rowIndex === i) {
                        after = tdElm;
                    }
                    if (coord[0] < i && tdElm === cell) {
                        parent = table.rows[i];
                    }
                });
                if (after) {
                    dom_1.Dom.after(after, td);
                }
                else {
                    parent.insertBefore(td, parent.firstChild);
                }
            }
            if (cell.colSpan > 1) {
                Table.__mark(td, 'colspan', cell.colSpan, __marked);
            }
            Table.__unmark(__marked);
            instance(jodit).removeSelection(cell);
        });
        this.normalizeTable(table);
    };
    Table.splitVertical = function (table, jodit) {
        var coord, td, percentage;
        var __marked = [];
        Table.getSelectedCellsByTable(table).forEach(function (cell) {
            coord = Table.formalCoordinate(table, cell);
            if (cell.colSpan < 2) {
                Table.formalMatrix(table, function (tdElm, i, j) {
                    if (coord[1] === j &&
                        coord[0] !== i &&
                        tdElm !== cell) {
                        Table.__mark(tdElm, 'colspan', tdElm.colSpan + 1, __marked);
                    }
                });
            }
            else {
                Table.__mark(cell, 'colspan', cell.colSpan - 1, __marked);
            }
            td = jodit.createInside.element('td');
            td.appendChild(jodit.createInside.element('br'));
            if (cell.rowSpan > 1) {
                Table.__mark(td, 'rowspan', cell.rowSpan, __marked);
            }
            var oldWidth = cell.offsetWidth;
            dom_1.Dom.after(cell, td);
            percentage = oldWidth / table.offsetWidth / 2;
            Table.__mark(cell, 'width', (percentage * 100).toFixed(consts.ACCURACY) + '%', __marked);
            Table.__mark(td, 'width', (percentage * 100).toFixed(consts.ACCURACY) + '%', __marked);
            Table.__unmark(__marked);
            instance(jodit).removeSelection(cell);
        });
        Table.normalizeTable(table);
    };
    Table.setColumnWidthByDelta = function (table, j, delta, noUnmark, marked) {
        var box = Table.formalMatrix(table);
        var i, w, percent;
        for (i = 0; i < box.length; i += 1) {
            w = box[i][j].offsetWidth;
            percent = ((w + delta) / table.offsetWidth) * 100;
            Table.__mark(box[i][j], 'width', percent.toFixed(consts.ACCURACY) + '%', marked);
        }
        if (!noUnmark) {
            Table.__unmark(marked);
        }
    };
    Table.__mark = function (cell, key, value, marked) {
        marked.push(cell);
        if (!cell.__marked_value) {
            cell.__marked_value = {};
        }
        cell.__marked_value[key] = value === undefined ? 1 : value;
    };
    Table.__unmark = function (marked) {
        marked.forEach(function (cell) {
            if (cell.__marked_value) {
                helpers_1.each(cell.__marked_value, function (key, value) {
                    switch (key) {
                        case 'remove':
                            dom_1.Dom.safeRemove(cell);
                            break;
                        case 'rowspan':
                            if (value > 1) {
                                cell.setAttribute('rowspan', value.toString());
                            }
                            else {
                                cell.removeAttribute('rowspan');
                            }
                            break;
                        case 'colspan':
                            if (value > 1) {
                                cell.setAttribute('colspan', value.toString());
                            }
                            else {
                                cell.removeAttribute('colspan');
                            }
                            break;
                        case 'width':
                            cell.style.width = value.toString();
                            break;
                    }
                    delete cell.__marked_value[key];
                });
                delete cell.__marked_value;
            }
        });
    };
    Table.selectedByTable = new WeakMap();
    tslib_1.__decorate([
        decorators_1.debounce()
    ], Table.prototype, "recalculateStyles", null);
    return Table;
}(viewComponent_1.ViewComponent));
exports.Table = Table;
var instance = function (j) { return j.getInstance('Table', j.o); };


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(58), exports);
tslib_1.__exportStar(__webpack_require__(59), exports);


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uploader = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(197);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var ajax_1 = __webpack_require__(34);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var component_1 = __webpack_require__(7);
var global_1 = __webpack_require__(12);
config_1.Config.prototype.enableDragAndDropFileToEditor = true;
config_1.Config.prototype.uploader = {
    url: '',
    insertImageAsBase64URI: false,
    imagesExtensions: ['jpg', 'png', 'jpeg', 'gif'],
    headers: null,
    data: null,
    filesVariableName: function (i) {
        return "files[" + i + "]";
    },
    withCredentials: false,
    pathVariableName: 'path',
    format: 'json',
    method: 'POST',
    prepareData: function (formData) {
        return formData;
    },
    isSuccess: function (resp) {
        return resp.success;
    },
    getMessage: function (resp) {
        return resp.data.messages !== undefined && helpers_1.isArray(resp.data.messages)
            ? resp.data.messages.join(' ')
            : '';
    },
    process: function (resp) {
        return resp.data;
    },
    error: function (e) {
        this.j.e.fire('errorMessage', e.message, 'error', 4000);
    },
    defaultHandlerSuccess: function (resp) {
        var _this = this;
        var j = this.j;
        if (!helpers_1.isJoditObject(j)) {
            return;
        }
        if (resp.files && resp.files.length) {
            resp.files.forEach(function (filename, index) {
                var _a = resp.isImages && resp.isImages[index]
                    ? ['img', 'src']
                    : ['a', 'href'], tagName = _a[0], attr = _a[1];
                var elm = j.createInside.element(tagName);
                elm.setAttribute(attr, resp.baseurl + filename);
                if (tagName === 'a') {
                    elm.textContent = resp.baseurl + filename;
                }
                if (helpers_1.isJoditObject(_this.j)) {
                    if (tagName === 'img') {
                        _this.j.s.insertImage(elm, null, _this.j.o.imageDefaultWidth);
                    }
                    else {
                        _this.j.s.insertNode(elm);
                    }
                }
            });
        }
    },
    defaultHandlerError: function (e) {
        this.j.e.fire('errorMessage', e.message);
    },
    contentType: function (requestData) {
        return this.j.ow.FormData !== undefined &&
            typeof requestData !== 'string'
            ? false
            : 'application/x-www-form-urlencoded; charset=UTF-8';
    }
};
var Uploader = (function (_super) {
    tslib_1.__extends(Uploader, _super);
    function Uploader(editor, options) {
        var _this = _super.call(this, editor) || this;
        _this.path = '';
        _this.source = 'default';
        _this.ajaxInstances = [];
        _this.options = helpers_1.extend(true, {}, config_1.Config.defaultOptions.uploader, helpers_1.isJoditObject(editor) ? editor.o.uploader : null, options);
        return _this;
    }
    Uploader.dataURItoBlob = function (dataURI) {
        var byteString = atob(dataURI.split(',')[1]), mimeString = dataURI
            .split(',')[0]
            .split(':')[1]
            .split(';')[0], ab = new ArrayBuffer(byteString.length), ia = new Uint8Array(ab);
        for (var i = 0; i < byteString.length; i += 1) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ia], { type: mimeString });
    };
    Object.defineProperty(Uploader.prototype, "o", {
        get: function () {
            return this.options;
        },
        enumerable: false,
        configurable: true
    });
    Uploader.prototype.buildData = function (data) {
        if (this.o.buildData && typeof this.o.buildData === 'function') {
            return this.o.buildData.call(this, data);
        }
        var FD = this.j.ow.FormData;
        if (FD !== undefined) {
            if (data instanceof FD) {
                return data;
            }
            if (typeof data === 'string') {
                return data;
            }
            var newdata_1 = new FD();
            Object.keys(data).forEach(function (key) {
                newdata_1.append(key, data[key]);
            });
            return newdata_1;
        }
        return data;
    };
    Uploader.prototype.send = function (data, success) {
        var _this = this;
        var requestData = this.buildData(data), sendData = function (request) {
            var ajax = new ajax_1.Ajax(_this.j || _this, {
                xhr: function () {
                    var xhr = new XMLHttpRequest();
                    if (_this.j.ow.FormData !== undefined &&
                        xhr.upload) {
                        xhr.upload.addEventListener('progress', function (evt) {
                            if (evt.lengthComputable) {
                                var percentComplete = evt.loaded / evt.total;
                                percentComplete *= 100;
                                _this.j.progressbar
                                    .show()
                                    .progress(percentComplete);
                                if (percentComplete >= 100) {
                                    _this.j.progressbar.hide();
                                }
                            }
                        }, false);
                    }
                    else {
                        _this.j.progressbar.hide();
                    }
                    return xhr;
                },
                method: _this.o.method || 'POST',
                data: request,
                url: _this.o.url,
                headers: _this.o.headers,
                queryBuild: _this.o.queryBuild,
                contentType: _this.o.contentType.call(_this, request),
                dataType: _this.o.format || 'json',
                withCredentials: _this.o.withCredentials || false
            });
            _this.ajaxInstances.push(ajax);
            var removeAjaxInstanceFromList = function () {
                var index = _this.ajaxInstances.indexOf(ajax);
                if (index !== -1) {
                    _this.ajaxInstances.splice(index, 1);
                }
            };
            return ajax
                .send()
                .then(function (resp) {
                removeAjaxInstanceFromList();
                success.call(_this, resp);
            })
                .catch(function (error) {
                removeAjaxInstanceFromList();
                _this.o.error.call(_this, error);
            });
        };
        if (requestData instanceof Promise) {
            return requestData.then(sendData).catch(function (error) {
                _this.o.error.call(_this, error);
            });
        }
        else {
            return sendData(requestData);
        }
    };
    Uploader.prototype.sendFiles = function (files, handlerSuccess, handlerError, process) {
        var _this = this;
        if (!files) {
            return Promise.reject(helpers_1.error('Need files'));
        }
        var uploader = this;
        var fileList = Array.from(files);
        if (!fileList.length) {
            return Promise.reject(helpers_1.error('Need files'));
        }
        var promises = [];
        if (this.o.insertImageAsBase64URI) {
            var file_1, i = void 0;
            var _loop_1 = function () {
                file_1 = fileList[i];
                if (file_1 && file_1.type) {
                    var mime = file_1.type.match(/\/([a-z0-9]+)/i);
                    var extension = mime[1]
                        ? mime[1].toLowerCase()
                        : '';
                    if (this_1.o.imagesExtensions.includes(extension)) {
                        var reader_1 = new FileReader();
                        promises.push(new Promise(function (resolve, reject) {
                            reader_1.onerror = reject;
                            reader_1.onloadend = function () {
                                var resp = {
                                    baseurl: '',
                                    files: [reader_1.result],
                                    isImages: [true]
                                };
                                if (typeof (handlerSuccess ||
                                    uploader.options
                                        .defaultHandlerSuccess) === 'function') {
                                    (handlerSuccess ||
                                        uploader.options
                                            .defaultHandlerSuccess).call(uploader, resp);
                                }
                                resolve(resp);
                            };
                            reader_1.readAsDataURL(file_1);
                        }));
                        fileList[i] = null;
                    }
                }
            };
            var this_1 = this;
            for (i = 0; i < fileList.length; i += 1) {
                _loop_1();
            }
        }
        fileList = fileList.filter(function (a) { return a; });
        if (fileList.length) {
            var form_1 = new FormData();
            form_1.append(this.o.pathVariableName, uploader.path);
            form_1.append('source', uploader.source);
            var file = void 0;
            for (var i = 0; i < fileList.length; i += 1) {
                file = fileList[i];
                if (file) {
                    var mime = file.type.match(/\/([a-z0-9]+)/i);
                    var extension = mime && mime[1] ? mime[1].toLowerCase() : '';
                    var newName = fileList[i].name ||
                        Math.random()
                            .toString()
                            .replace('.', '');
                    if (extension) {
                        var extForReg = extension;
                        if (['jpeg', 'jpg'].includes(extForReg)) {
                            extForReg = 'jpeg|jpg';
                        }
                        var reEnd = new RegExp('.(' + extForReg + ')$', 'i');
                        if (!reEnd.test(newName)) {
                            newName += '.' + extension;
                        }
                    }
                    form_1.append(this.o.filesVariableName(i), fileList[i], newName);
                }
            }
            if (process) {
                process(form_1);
            }
            if (uploader.o.data && helpers_1.isPlainObject(uploader.o.data)) {
                Object.keys(uploader.o.data).forEach(function (key) {
                    form_1.append(key, uploader.o.data[key]);
                });
            }
            uploader.o.prepareData.call(this, form_1);
            promises.push(uploader
                .send(form_1, function (resp) {
                if (_this.o.isSuccess.call(uploader, resp)) {
                    if (typeof (handlerSuccess ||
                        uploader.o.defaultHandlerSuccess) === 'function') {
                        (handlerSuccess ||
                            uploader.options
                                .defaultHandlerSuccess).call(uploader, uploader.o.process.call(uploader, resp));
                    }
                }
                else {
                    if (typeof (handlerError ||
                        uploader.o.defaultHandlerError)) {
                        (handlerError ||
                            uploader.options
                                .defaultHandlerError).call(uploader, helpers_1.error(uploader.o.getMessage.call(uploader, resp)));
                        return;
                    }
                }
            })
                .then(function () {
                _this.j.events && _this.j.e.fire('filesWereUploaded');
            }));
        }
        return Promise.all(promises);
    };
    Uploader.prototype.setPath = function (path) {
        this.path = path;
    };
    Uploader.prototype.setSource = function (source) {
        this.source = source;
    };
    Uploader.prototype.bind = function (form, handlerSuccess, handlerError) {
        var _this = this;
        var self = this, onPaste = function (e) {
            var i, file, extension;
            var cData = e.clipboardData;
            var process = function (formdata) {
                if (file) {
                    formdata.append('extension', extension);
                    formdata.append('mimetype', file.type);
                }
            };
            if (cData && cData.files && cData.files.length) {
                _this.sendFiles(cData.files, handlerSuccess, handlerError);
                return false;
            }
            if (constants_1.IS_IE) {
                if (cData &&
                    (!cData.types.length || cData.types[0] !== constants_1.TEXT_PLAIN)) {
                    var div_1 = _this.j.c.div('', {
                        tabindex: -1,
                        style: 'left: -9999px; top: 0; width: 0; height: 100%;line-height: 140%; ' +
                            'overflow: hidden; position: fixed; z-index: 2147483647; word-break: break-all;',
                        contenteditable: true
                    });
                    global_1.getContainer(_this.j, Uploader).appendChild(div_1);
                    var selection_1 = helpers_1.isJoditObject(_this.j)
                        ? _this.j.s.save()
                        : null, restore_1 = function () {
                        return selection_1 &&
                            helpers_1.isJoditObject(_this.j) &&
                            _this.j.s.restore(selection_1);
                    };
                    div_1.focus();
                    _this.j.async.setTimeout(function () {
                        var child = div_1.firstChild;
                        dom_1.Dom.safeRemove(div_1);
                        if (child && child.hasAttribute('src')) {
                            var src = helpers_1.attr(child, 'src') || '';
                            restore_1();
                            self.sendFiles([Uploader.dataURItoBlob(src)], handlerSuccess, handlerError);
                        }
                    }, _this.j.defaultTimeout);
                }
                return;
            }
            if (cData && cData.items && cData.items.length) {
                var items = cData.items;
                for (i = 0; i < items.length; i += 1) {
                    if (items[i].kind === 'file' &&
                        items[i].type === 'image/png') {
                        file = items[i].getAsFile();
                        if (file) {
                            var mime = file.type.match(/\/([a-z0-9]+)/i);
                            extension = mime[1]
                                ? mime[1].toLowerCase()
                                : '';
                            _this.sendFiles([file], handlerSuccess, handlerError, process);
                        }
                        e.preventDefault();
                        break;
                    }
                }
            }
        };
        if (this.j && this.j.editor !== form) {
            self.j.e.on(form, 'paste', onPaste);
        }
        else {
            self.j.e.on('beforePaste', onPaste);
        }
        var hasFiles = function (event) {
            return Boolean(event.dataTransfer &&
                event.dataTransfer.files &&
                event.dataTransfer.files.length !== 0);
        };
        self.j.e
            .on(form, 'dragend dragover dragenter dragleave drop', function (e) {
            e.preventDefault();
        })
            .on(form, 'dragover', function (event) {
            if (hasFiles(event)) {
                form.classList.contains('jodit_draghover') ||
                    form.classList.add('jodit_draghover');
                event.preventDefault();
            }
        })
            .on(form, 'dragend', function (event) {
            if (hasFiles(event)) {
                form.classList.contains('jodit_draghover') &&
                    form.classList.remove('jodit_draghover');
                event.preventDefault();
            }
        })
            .on(form, 'drop', function (event) {
            form.classList.remove('jodit_draghover');
            if (hasFiles(event) &&
                event.dataTransfer &&
                event.dataTransfer.files) {
                event.preventDefault();
                event.stopImmediatePropagation();
                _this.sendFiles(event.dataTransfer.files, handlerSuccess, handlerError);
            }
        });
        var inputFile = form.querySelector('input[type=file]');
        if (inputFile) {
            self.j.e.on(inputFile, 'change', function () {
                self.sendFiles(this.files, handlerSuccess, handlerError).then(function () {
                    inputFile.value = '';
                    if (!/safari/i.test(navigator.userAgent)) {
                        inputFile.type = '';
                        inputFile.type = 'file';
                    }
                });
            });
        }
    };
    Uploader.prototype.uploadRemoteImage = function (url, handlerSuccess, handlerError) {
        var _this = this;
        var uploader = this;
        uploader.send({
            action: 'fileUploadRemote',
            url: url
        }, function (resp) {
            if (uploader.o.isSuccess.call(uploader, resp)) {
                if (typeof handlerSuccess === 'function') {
                    handlerSuccess.call(uploader, _this.o.process.call(_this, resp));
                }
                else {
                    _this.o.defaultHandlerSuccess.call(uploader, _this.o.process.call(_this, resp));
                }
            }
            else {
                if (typeof (handlerError || uploader.o.defaultHandlerError) === 'function') {
                    (handlerError || _this.o.defaultHandlerError).call(uploader, helpers_1.error(uploader.o.getMessage.call(_this, resp)));
                    return;
                }
            }
        });
    };
    Uploader.prototype.destruct = function () {
        this.setStatus(component_1.STATUSES.beforeDestruct);
        this.ajaxInstances.forEach(function (ajax) {
            try {
                ajax.destruct();
            }
            catch (_a) { }
        });
        delete this.options;
        _super.prototype.destruct.call(this);
    };
    return Uploader;
}(component_1.ViewComponent));
exports.Uploader = Uploader;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var checker_1 = __webpack_require__(5);
var ar_1 = __webpack_require__(199);
var cs_cz_1 = __webpack_require__(200);
var de_1 = __webpack_require__(201);
var en_1 = __webpack_require__(202);
var es_1 = __webpack_require__(203);
var fr_1 = __webpack_require__(204);
var he_1 = __webpack_require__(205);
var hu_1 = __webpack_require__(206);
var id_1 = __webpack_require__(207);
var it_1 = __webpack_require__(208);
var ja_1 = __webpack_require__(209);
var ko_1 = __webpack_require__(210);
var nl_1 = __webpack_require__(211);
var pl_1 = __webpack_require__(212);
var pt_br_1 = __webpack_require__(213);
var ru_1 = __webpack_require__(214);
var tr_1 = __webpack_require__(215);
var zh_cn_1 = __webpack_require__(216);
var zh_tw_1 = __webpack_require__(217);
var exp = {
    ar: ar_1.default,
    cs_cz: cs_cz_1.default,
    de: de_1.default,
    en: en_1.default,
    es: es_1.default,
    fr: fr_1.default,
    he: he_1.default,
    hu: hu_1.default,
    id: id_1.default,
    it: it_1.default,
    ja: ja_1.default,
    ko: ko_1.default,
    nl: nl_1.default,
    pl: pl_1.default,
    pt_br: pt_br_1.default,
    ru: ru_1.default,
    tr: tr_1.default,
    zh_cn: zh_cn_1.default,
    zh_tw: zh_tw_1.default
};
var get = function (value) { return value.default || value; }, hashLang = {};
if (checker_1.isArray(get(en_1.default))) {
    get(en_1.default).forEach(function (key, index) {
        hashLang[index] = key;
    });
}
Object.keys(exp).forEach(function (lang) {
    var list = get(exp[lang]);
    if (checker_1.isArray(list)) {
        exp[lang] = {};
        list.forEach(function (value, index) {
            exp[lang][hashLang[index]] = value;
        });
    }
});
exports.default = exp;


/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports.default = ["إبدأ في الكتابة...","حول جوديت","محرر جوديت","دليل مستخدم جوديت","يحتوي على مساعدة مفصلة للاستخدام","للحصول على معلومات حول الترخيص، يرجى الذهاب لموقعنا:","شراء النسخة الكاملة","حقوق الطبع والنشر © XDSoft.net - Chupurnov Valeriy. كل الحقوق محفوظة.","مِرْساة","فتح في نافذة جديدة","فتح المحرر في الحجم الكامل","مسح التنسيق","ملء اللون أو تعيين لون النص","إعادة","تراجع","عريض","مائل","إدراج قائمة غير مرتبة","إدراج قائمة مرتبة","محاذاة للوسط","محاذاة مثبتة","محاذاة لليسار","محاذاة لليمين","إدراج خط أفقي","إدراج صورة","ادخال الملف","إدراج فيديو يوتيوب/فيميو ","إدراج رابط","حجم الخط","نوع الخط","إدراج كتلة تنسيق","عادي","عنوان 1","عنوان 2","عنوان 3","عنوان 4","إقتباس","كود","إدراج","إدراج جدول","تقليل المسافة البادئة","زيادة المسافة البادئة","تحديد أحرف خاصة","إدراج حرف خاص","تنسيق الرسم","تغيير الوضع","هوامش","أعلى","يمين","أسفل","يسار","الأنماط","الطبقات","محاذاة","اليمين","الوسط","اليسار","--غير مضبوط--","Src","العنوان","العنوان البديل","الرابط","افتح الرابط في نافذة جديدة","الصورة","ملف","متقدم","خصائص الصورة","إلغاء","حسنا","متصفح الملفات","حدث خطأ في تحميل القائمة ","حدث خطأ في تحميل المجلدات","هل أنت واثق؟","أدخل اسم المجلد","إنشاء مجلد","أكتب إسم","إسقاط صورة","إسقاط الملف","أو أنقر","النص البديل","رفع","تصفح","الخلفية","نص","أعلى","الوسط","الأسفل","إدراج عمود قبل","إدراج عمود بعد","إدراج صف أعلى","إدراج صف أسفل","حذف الجدول","حذف الصف","حذف العمود","خلية فارغة","%d حرف","%d كلام","اضرب من خلال","أكد","حرف فوقي","مخطوطة","قطع الاختيار","اختر الكل","استراحة","البحث عن","استبدل ب","يحل محل","معجون","اختر محتوى للصق","مصدر","بالخط العريض","مائل","شغل","صلة","إلغاء","كرر","طاولة","صورة","نظيف","فقرة","حجم الخط","فيديو","الخط","حول المحرر","طباعة","رمز","أكد","شطب","المسافة البادئة","نتوء","ملء الشاشة","الحجم التقليدي","نسخ التنسيق","الخط","قائمة","قائمة مرقمة","قطع","اختر الكل","قانون","فتح الرابط","تعديل الرابط","سمة Nofollow","إزالة الرابط","تحديث","لتحرير","مراجعة","URL","تحرير","محاذاة أفقية","فلتر","عن طريق التغيير","بالاسم","حسب الحجم","إضافة مجلد","إعادة","احتفظ","حفظ باسم","تغيير الحجم","حجم القطع","عرض","ارتفاع","حافظ على النسب","أن","لا","حذف","تميز","تميز %s","محاذاة عمودية","انشق، مزق","اذهب","أضف العمود","اضف سطر","رخصة %s","حذف","انقسام عمودي","تقسيم أفقي","الحدود","يشبه الكود الخاص بك HTML. تبقي كما HTML؟","الصق ك HTML","احتفظ","إدراج كنص","إدراج النص فقط","يمكنك فقط تحرير صورك الخاصة. تحميل هذه الصورة على المضيف؟","تم تحميل الصورة بنجاح على الخادم!","لوحة","لا توجد ملفات في هذا الدليل.","إعادة تسمية","أدخل اسم جديد","معاينة","تحميل","لصق من الحافظة","متصفحك لا يدعم إمكانية الوصول المباشر إلى الحافظة.","نسخ التحديد","نسخ","دائرة نصف قطرها الحدود","عرض كل","تطبيق"]

/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports.default = ["Napiš něco","O Jodit","Editor Jodit","Jodit Uživatelská příručka","obsahuje detailní nápovědu","Pro informace o licenci, prosím, přejděte na naši stránku:","Koupit plnou verzi","Copyright © XDSoft.net - Chupurnov Valeriy. Všechna práva vyhrazena.","Anchor","Otevřít v nové záložce","Otevřít v celoobrazovkovém režimu","Vyčistit formátování","Barva výplně a písma","Vpřed","Zpět","Tučné","Kurzíva","Odrážky","Číslovaný seznam","Zarovnat na střed","Zarovnat do bloku","Zarovnat vlevo","Zarovnat vpravo","Vložit horizontální linku","Vložit obrázek","Vložit soubor","Vložit video (YT/Vimeo)","Vložit odkaz","Velikost písma","Typ písma","Formátovat blok","Normální text","Nadpis 1","Nadpis 2","Nadpis 3","Nadpis 4","Citát","Kód","Vložit","Vložit tabulku","Zmenšit odsazení","Zvětšit odsazení","Vybrat speciální symbol","Vložit speciální symbol","Použít formát","Změnit mód","Okraje","horní","pravý","spodní","levý","Styly","Třídy","Zarovnání","Vpravo","Na střed","Vlevo","--nenastaveno--","src","Titulek","Alternativní text (alt)","Link","Otevřít link v nové záložce","Obrázek","soubor","Rozšířené","Vlastnosti obrázku","Zpět","Ok","Prohlížeč souborů","Chyba při načítání seznamu souborů","Chyba při načítání složek","Jste si jistý(á)?","Název složky","Vytvořit složku","název","Přetáhněte sem obrázek","Přetáhněte sem soubor","nebo klikněte","Alternativní text","Nahrát","Server","Pozadí","Text","Nahoru","Na střed","Dolu","Vložit sloupec před","Vložit sloupec za","Vložit řádek nad","Vložit řádek pod","Vymazat tabulku","Vymazat řádku","Vymazat sloupec","Vyčistit buňku","Znaky: %d","Slova: %d","Přeškrtnuto","Podtrženo","Horní index","Dolní index","Vyjmout označené","Označit vše","Zalomení","Najdi","Nahradit za","Nahradit","Vložit","Vyber obsah pro vložení","HTML","tučně","kurzíva","štětec","odkaz","zpět","vpřed","tabulka","obrázek","guma","odstavec","velikost písma","video","písmo","о editoru","tisk","symbol","podtrženo","přeškrtnuto","zvětšit odsazení","zmenšit odsazení","celoobrazovkový režim","smrsknout","Kopírovat formát","Linka","Odrážka","Číslovaný seznam","Vyjmout","Označit vše","Kód","Otevřít odkaz","Upravit odkaz","Atribut no-follow","Odstranit odkaz","Aktualizovat","Chcete-li upravit","Zobrazit","URL","Editovat","Horizontální zarovnání","Filtr","Dle poslední změny","Dle názvu","Dle velikosti","Přidat složku","Reset","Uložit","Uložit jako...","Změnit rozměr","Ořezat","Šířka","Výška","Ponechat poměr","Ano","Ne","Vyjmout","Označit","Označit %s","Vertikální zarovnání","Rozdělit","Spojit","Přidat sloupec","Přidat řádek","Licence: %s","Vymazat","Rozdělit vertikálně","Rozdělit horizontálně","Okraj","Váš text se podobá HTML. Vložit ho jako HTML?","Vložit jako HTML","Ponechat originál","Vložit jako TEXT","Vložit pouze TEXT","Můžete upravovat pouze své obrázky. Načíst obrázek?","Obrázek byl úspěšně nahrán!","paleta","V tomto adresáři nejsou žádné soubory.","přejmenovat","Zadejte nový název","náhled","Stažení","Vložit ze schránky","Váš prohlížeč nepodporuje přímý přístup do schránky.","Kopírovat výběr","kopírování","Border radius","Zobrazit všechny","Platí"]

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports.default = ["Bitte geben Sie einen Text ein","Über Jodit","Jodit Editor","Das Jodit Benutzerhandbuch","beinhaltet ausführliche Informationen wie Sie den Editor verwenden können.","Für Lizenz-Informationen, besuchen Sie bitte unsere Webseite:","Vollversion kaufen","Copyright © XDSoft.net - Chupurnov Valeriy. Alle Rechte vorbehalten.","Anker","In neuer Registerkarte öffnen","Editor in voller Größe öffnen","Formatierung löschen","Füllfarbe oder Textfarbe ändern","Wiederholen","Rückgängig machen","Fett","Kursiv","Ungeordnete Liste einfügen","Sortierte Liste einfügen","Mittig ausrichten","Blocksatz","Links ausrichten","Rechts ausrichten","Horizontale Linie einfügen","Bild einfügen","Datei einfügen","Youtube/vimeo Video einfügen","Link einfügen","Schriftgröße","Schriftfamilie","Formatblock einfügen","Normal","Überschrift 1","Überschrift 2","Überschrift 3","Überschrift 4","Zitat","Code","Einfügen","Tabelle einfügen","Einzug verkleinern","Einzug vergrößern","Sonderzeichen auswählen","Sonderzeichen einfügen","Format kopieren","Änderungsmodus","Ränder","Oben","Rechts","Unten","Links","CSS Stiel","CSS Klassen","Ausrichten","Rechts","Zentriert","Links","Keine","Pfad","Titel","Alternativer Text","Link","Link in neuem Tab öffnen","Bild","Datei","Fortgeschritten","Bildeigenschaften","Abbrechen","OK","Dateibrowser","Fehler beim Laden der Liste","Fehler beim Laden der Ordner","Sind Sie sicher?","Geben Sie den Verzeichnisnamen ein","Verzeichnis erstellen","Typname","Bild hier hinziehen","Datei löschen","oder hier klicken","Alternativtext","Hochladen","Auswählen","Hintergrund","Text","Oben","Mittig","Unten","Spalte einfügen vor","Spalte einfügen nach","Zeile einfügen oberhalb","Zeile unterhalb einfügen","Tabelle löschen","Zeile löschen","Spalte löschen","Leere Zelle","Zeichen: %d","Wörter: %d","Durchschlagen","Unterstreichen","hochgestellt","Index","Auswahl ausschneid","Wählen Sie Alle aus","Pause","Suche nach","Ersetzen durch","Ersetzen","Einfügen","Wählen Sie Inhalt zum Einfügen","HTML","Fett gedruckt","kursiv","Bürste","Verknüpfung","rückgängig machen","wiederholen","Tabelle","Bild","Radiergummi","Absatz","Schriftgröße","Video","Schriftart","Über","drucken","Symbol","unterstreichen","durchgestrichen","Einzug","Aussenseiter","Vollgröße","schrumpfen","Format kopierenт","die Linie","Liste von","Nummerierte Liste","Schnitt","Wählen Sie Alle aus","Code einbetten","Link öffnen","Link bearbeiten","Nofollow-Attribut","Link entfernen","Aktualisieren","Bearbeiten","Ansehen","URL","Bearbeiten","Horizontale Ausrichtung","filter","Sortieren nach geändert","Nach Name sortieren","Nach Größe sortiert","Ordner hinzufügen","Wiederherstellen","Speichern","Speichern als","Ändern Sie die Größe","Größe anpassen","Breite","Höhe","Halten Sie Proportionen","Ja","Nein","Entfernen","Markieren","Markieren: %s","Vertikale Ausrichtung","Split","Verschmelzen","Spalte hinzufügen","Zeile hinzufügen",null,"Löschen","Split vertikal","Split horizontally","Rand","Es scheint als dass Sie HTML-Text einfügen möchten","Als HTML einfügen?","Original speichern","Als Text einfügen","Nur Text einfügen","Sie können nur Ihre eigenen Bilder bearbeiten. Laden Sie dieses Bild auf dem Host herunter?","Das Bild wurde erfolgreich auf den Server hochgeladen!null","Palette","In diesem Verzeichnis befinden sich keine Dateien.","umbenennen","Geben Sie einen neuen Namen ein","Vorschau","Herunterladen","Aus der Zwischenablage einfügen","Ihr browser unterstützt kein direkter Zugriff auf die Zwischenablage.","Auswahl kopieren","kopieren","Border-radius","Alle anzeigen","Bewerben"]

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports.default = ["Type something","About Jodit","Jodit Editor","Jodit User's Guide","contains detailed help for using","For information about the license, please go to our website:","Buy full version","Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.","Anchor","Open in new tab","Open editor in fullsize","Clear Formatting","Fill color or set the text color","Redo","Undo","Bold","Italic","Insert Unordered List","Insert Ordered List","Align Center","Align Justify","Align Left","Align Right","Insert Horizontal Line","Insert Image","Insert file","Insert youtube/vimeo video","Insert link","Font size","Font family","Insert format block","Normal","Heading 1","Heading 2","Heading 3","Heading 4","Quote","Code","Insert","Insert table","Decrease Indent","Increase Indent","Select Special Character","Insert Special Character","Paint format","Change mode","Margins","top","right","bottom","left","Styles","Classes","Align","Right","Center","Left","--Not Set--","Src","Title","Alternative","Link","Open link in new tab","Image","file","Advanced","Image properties","Cancel","Ok","File Browser","Error on load list","Error on load folders","Are you sure?","Enter Directory name","Create directory","type name","Drop image","Drop file","or click","Alternative text","Upload","Browse","Background","Text","Top","Middle","Bottom","Insert column before","Insert column after","Insert row above","Insert row below","Delete table","Delete row","Delete column","Empty cell","Chars: %d","Words: %d","Strike through","Underline","superscript","subscript","Cut selection","Select all","Break","Search for","Replace with","Replace","Paste","Choose Content to Paste","source","bold","italic","brush","link","undo","redo","table","image","eraser","paragraph","fontsize","video","font","about","print","symbol","underline","strikethrough","indent","outdent","fullsize","shrink","copyformat","hr","ul","ol","cut","selectall","Embed code","Open link","Edit link","No follow","Unlink","Update","pencil","Eye"," URL","Edit","Horizontal align","Filter","Sort by changed","Sort by name","Sort by size","Add folder","Reset","Save","Save as ...","Resize","Crop","Width","Height","Keep Aspect Ratio","Yes","No","Remove","Select","Select %s","Vertical align","Split","Merge","Add column","Add row","License: %s","Delete","Split vertical","Split horizontal","Border","Your code is similar to HTML. Keep as HTML?","Paste as HTML","Keep","Insert as Text","Insert only Text","You can only edit your own images. Download this image on the host?","The image has been successfully uploaded to the host!","palette","There are no files","Rename","Enter new name","preview","download","Paste from clipboard","Your browser doesn't support direct access to the clipboard.","Copy selection","copy","Border radius","Show all","Apply"]

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports.default = ["Escriba algo...","Acerca de Jodit","Jodit Editor","Guía de usuario Jodit","contiene ayuda detallada para el uso.","Para información sobre la licencia, por favor visite nuestro sitio:","Compre la versión completa","Copyright © XDSoft.net - Chupurnov Valeriy. Todos los derechos reservados.","Anclar","Abrir en nueva pestaña","Abrir editor en pantalla completa","Limpiar formato","Color de relleno o de letra","Rehacer","Deshacer","Negrita","Cursiva","Insertar lista no ordenada","Insertar lista ordenada","Alinear Centrado","Alinear Justificado","Alinear Izquierda","Alinear Derecha","Insertar línea horizontal","Insertar imagen","Insertar archivo","Insertar video de Youtube/vimeo","Insertar vínculo","Tamaño de letra","Familia de letra","Insertar bloque","Normal","Encabezado 1","Encabezado 2","Encabezado 3","Encabezado 4","Cita","Código","Insertar","Insertar tabla","Disminuir sangría","Aumentar sangría","Seleccionar caracter especial","Insertar caracter especial","Copiar formato","Cambiar modo","Márgenes","arriba","derecha","abajo","izquierda","Estilos CSS","Clases CSS","Alinear","Derecha","Centrado","Izquierda","--No Establecido--","Fuente","Título","Texto Alternativo","Vínculo","Abrir vínculo en nueva pestaña","Imagen","Archivo","Avanzado","Propiedades de imagen","Cancelar","Aceptar","Buscar archivo","Error al cargar la lista","Error al cargar las carpetas","¿Está seguro?","Entre nombre de carpeta","Crear carpeta","Entre el nombre","Soltar imagen","Soltar archivo","o click","Texto alternativo","Subir","Buscar","Fondo","Texto","Arriba","Centro","Abajo","Insertar columna antes","Interar columna después","Insertar fila arriba","Insertar fila debajo","Borrar tabla","Borrar fila","Borrar columna","Vaciar celda","Caracteres: %d","Palabras: %d","Tachado","Subrayado","superíndice","subíndice","Cortar selección","Seleccionar todo","Pausa","Buscar","Reemplazar con","Reemplazar","Pegar","Seleccionar contenido para pegar","HTML","negrita","cursiva","Brocha","Vínculo","deshacer","rehacer","Tabla","Imagen","Borrar","Párrafo","Tamaño de letra","Video","Letra","Acerca de","Imprimir","Símbolo","subrayar","tachar","sangría","quitar sangría","Tamaño completo","encoger","Copiar formato","línea horizontal","lista sin ordenar","lista ordenada","Cortar","Seleccionar todo","Incluir código","Abrir vínculo","Editar vínculo","No seguir","Desvincular","Actualizar","Para editar","Ver","URL","Editar","Alineación horizontal","filtrar","Ordenar por fecha modificación","Ordenar por nombre","Ordenar por tamaño","Agregar carpeta","Resetear","Guardar","Guardar como...","Redimensionar","Recortar","Ancho","Alto","Mantener relación de aspecto","Si","No","Quitar","Seleccionar","Seleccionar: %s","Alineación vertical","Dividir","Mezclar","Agregar columna","Agregar fila",null,"Borrar","Dividir vertical","Dividir horizontal","Borde","El código es similar a HTML. ¿Mantener como HTML?","Pegar como HTML?","Mantener","Insertar como texto","Insertar solo texto","Solo puedes editar tus propias imágenes. ¿Descargar esta imagen en el servidor?","¡La imagen se ha subido correctamente al servidor!","paleta","No hay archivos en este directorio.","renombrar","Ingresa un nuevo nombre","avance","Descargar","Pegar desde el portapapeles","Su navegador no soporta el acceso directo en el portapapeles.","Selección de copia","copia","Radio frontera","Mostrar todos los","Aplicar"]

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports.default = ["Ecrivez ici","A propos de Jodit","Editeur Jodit","Guide de l'utilisateur","Aide détaillée à l'utilisation","Consulter la licence sur notre site web:","Acheter la version complète","Copyright © XDSoft.net - Chupurnov Valeriy. Tous droits réservés.","Ancre","Ouvrir dans un nouvel onglet","Ouvrir l'éditeur en pleine page","Supprimer le formattage","Modifier la couleur du fond ou du texte","Refaire","Défaire","Gras","Italique","Liste non ordonnée","Liste ordonnée","Centrer","Justifier","Aligner à gauche ","Aligner à droite","Insérer une ligne horizontale","Insérer une image","Insérer un fichier","Insérer une vidéo","Insérer un lien","Taille des caractères","Famille des caractères","Bloc formatté","Normal","Titre 1","Titre 2","Titre 3","Titre 4","Citation","Code","Insérer","Insérer un tableau","Diminuer le retrait","Retrait plus","Sélectionnez un caractère spécial","Insérer un caractère spécial","Cloner le format","Mode wysiwyg <-> code html","Marges","haut","droite","Bas","gauche","Styles","Classes","Alignement","Droite","Centre","Gauche","--Non disponible--","Source","Titre","Alternative","Lien","Ouvrir le lien dans un nouvel onglet","Image","fichier","Avancé","Propriétés de l'image","Effacer","OK","Explorateur de fichiers","Erreur de liste de chargement","Erreur de dossier de chargement","Etes-vous sûrs ?","Entrer le non de dossier","Créer un dossier","type de fichier","Coller une image","Déposer un fichier","ou cliquer","Texte de remplacemement","Charger","Chercher","Arrière-plan","Texte","Haut","Milieu","Bas","Insérer une colonne avant","Insérer une colonne après","Insérer une ligne en dessus","Insérer une ligne en dessous","Supprimer le tableau","Supprimer la ligne","Supprimer la colonne","Vider la cellule","Symboles: %d","Mots: %d","Frapper à travers","Souligner","exposant","indice","Couper la sélection","Tout sélectionner","Pause","Rechercher","Remplacer par","Remplacer","Coller","Choisissez le contenu à coller","la source","graisseux","italique","verser","lien","abolir","prêt","graphique","Image","la gommen","clause","taille de police","Video","police","à propos de l'éditeur","impression","caractère","souligné","barré","indentation","indifférent","taille réelle","taille conventionnelle","Format de copie","la ligne","Liste des","Liste numérotée","Couper","Sélectionner tout",null,"Ouvrir le lien","Modifier le lien","Attribut Nofollow","Supprimer le lien","Mettre à jour","Pour éditer","Voir","URL",null,"Alignement horizontal","Filtre","Trier par modifié","Trier par nom","Classer par taille","Ajouter le dossier","Restaurer","Sauvegarder","Enregistrer sous","Changer la taille","Taille de garniture","Largeur","Hauteur","Garder les proportions","Oui","Non","Supprimer","Mettre en évidence","Mettre en évidence: %s","Alignement vertical","Split","aller","Ajouter une colonne","Ajouter une rangée",null,"Effacer","Split vertical","Split horizontal",null,"Votre texte que vous essayez de coller est similaire au HTML. Collez-le en HTML?","Coller en HTML?","Sauvegarder l'original","Coller en tant que texte","Coller le texte seulement","Vous ne pouvez éditer que vos propres images. Téléchargez cette image sur l'hôte?","L'image a été téléchargée avec succès sur le serveur!null","Palette","Il n'y a aucun fichier dans ce répertoire.","renommer","Entrez un nouveau nom","Aperçu","Télécharger","Coller à partir du presse-papiers","Votre navigateur ne prend pas en charge l'accès direct à la presse-papiers.","Copier la sélection","copie","Rayon des frontières","Afficher tous les","Appliquer"]

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports.default = ["הקלד משהו...","About Jodit","Jodit Editor","Jodit User's Guide","contains detailed help for using.","For information about the license, please go to our website:","Buy full version","Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.","מקום עיגון","פתח בכרטיסיה חדשה","פתח את העורך בחלון חדש","נקה עיצוב","שנה צבע טקסט או רקע","בצע שוב","בטל","מודגש","נטוי","הכנס רשימת תבליטים","הכנס רשימה ממוספרת","מרכז","ישר ","ישר לשמאל","ישר לימין","הכנס קו אופקי","הכנס תמונה","הכנס קובץ","הכנס סרטון וידאו מYouTube/Vimeo","הכנס קישור","גודל גופן","גופן","מעוצב מראש","רגיל","כותרת 1","כותרת 2","כותרת 3","כותרת 4","ציטוט","קוד","הכנס","הכנס טבלה","הקטן כניסה","הגדל כניסה","בחר תו מיוחד","הכנס תו מיוחד","העתק עיצוב","החלף מצב","ריווח","עליון","ימין","תחתון","שמאל","עיצוב CSS","מחלקת CSS","יישור","ימין","מרכז","שמאל","--לא נקבע--","מקור","כותרת","כיתוב חלופי","קישור","פתח בכרטיסיה חדשה","תמונה","קובץ","מתקדם","מאפייני תמונה","ביטול","אישור","סייר הקבצים","שגיאה  בזמן טעינת רשימה","שגיאה בזמן טעינת תקיות","האם אתה בטוח?","הכנס שם תקיה","צור תקיה","סוג הקובץ","הסר תמונה","הסר קובץ","או לחץ","כיתוב חלופי","העלה","סייר","רקע","טקסט","עליון","מרכז","תחתון","הכנס עמודה לפני","הכנס עמודה אחרי","הכנס שורה מעל","הכנס שורה מתחת","מחק טבלה","מחק שורה","מחק עמודה","רוקן תא","תווים: %d","מילים: %d","קו חוצה","קו תחתון","superscript","subscript","גזור בחירה","בחר הכל","שבירת שורה","חפש","החלף ב","החלף","הדבק","בחר תוכן להדבקה","HTML","מודגש","נטוי","מברשת","קישור","בטל","בצע שוב","טבלה","תמונה","מחק","פסקה","גודל גופן","וידאו","גופן","עלינו","הדפס","תו מיוחד","קו תחתון","קו חוצה","הגדל כניסה","הקטן כניסה","גודל מלא","כווץ","העתק עיצוב","קו אופקי","רשימת תבליטים","רשימה ממוספרת","חתוך","בחר הכל","הוסף קוד","פתח קישור","ערוך קישור","ללא מעקב","בטל קישור","עדכן","כדי לערוך","הצג","כתובת","ערוך","יישור אופקי","סנן","מין לפי שינוי","מיין לפי שם","מיין לפי גודל","הוסף תקייה","אפס","שמור","שמור בשם...","שנה גודל","חתוך","רוחב","גובה","שמור יחס","כן","לא","הסר","בחר","נבחר: %s","יישור אנכי","פיצול","מזג","הוסף עמודה","הוסף שורה",null,"מחק","פיצול אנכי","פיצול אופקי","מסגרת","הקוד דומה לHTML, האם להשאיר כHTML","הדבק כHTML","השאר","הכנס כטקסט","הכנס טקסט בלבד","רק קבצים המשוייכים שלך ניתנים לעריכה. האם להוריד את הקובץ?","התמונה עלתה בהצלחה!","לוח","אין קבצים בספריה זו.","הונגרית","הזן שם חדש","תצוגה מקדימה","הורד","להדביק מהלוח","הדפדפן שלך לא תומך גישה ישירה ללוח.","העתק בחירה","העתק","רדיוס הגבול","הצג את כל","החל"]

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports.default = ["Írjon be valamit","Joditról","Jodit Editor","Jodit útmutató","további segítséget tartalmaz","További licence információkért látogassa meg a weboldalunkat:","Teljes verzió megvásárlása","Copyright © XDSoft.net - Chupurnov Valeriy. Minden jog fenntartva.","Horgony","Megnyitás új lapon","Megnyitás teljes méretben","Formázás törlése","Háttér/szöveg szín","Újra","Visszavon","Félkövér","Dőlt","Pontozott lista","Számozott lista","Középre zárt","Sorkizárt","Balra zárt","Jobbra zárt","Vízszintes vonal beszúrása","Kép beszúrás","Fájl beszúrás","Youtube videó beszúrása","Link beszúrás","Betűméret","Betűtípus","Formázott blokk beszúrása","Normál","Fejléc 1","Fejléc 2","Fejléc 3","Fejléc 4","Idézet","Kód","Beszúr","Táblázat beszúrása","Behúzás csökkentése","Behúzás növelése","Speciális karakter kiválasztása","Speciális karakter beszúrása","Kép formázása","Nézet váltása","Szegélyek","felső","jobb","alsó","bal","CSS stílusok","CSS osztályok","Igazítás","Jobbra","Középre","Balra","Nincs","Forrás","Cím","Helyettesítő szöveg","Link","Link megnyitása új lapon","Kép","Fájl","Haladó","Kép tulajdonságai","Mégsem","OK","Fájl tallózó","Hiba a lista betöltése közben","Hiba a mappák betöltése közben","Biztosan ezt szeretné?","Írjon be egy mappanevet","Mappa létrehozása","írjon be bevet","Húzza ide a képet","Húzza ide a fájlt","vagy kattintson","Helyettesítő szöveg","Feltölt","Tallóz","Háttér","Szöveg","Fent","Középen","Lent","Oszlop beszúrás elé","Oszlop beszúrás utána","Sor beszúrás fölé","Sor beszúrás alá","Táblázat törlése","Sor törlése","Oszlop törlése","Cella tartalmának törlése","Karakterek száma: %d","Szavak száma: %d","Áthúzott","Aláhúzott","Felső index","Alsó index","Kivágás","Összes kijelölése","Szünet","Keresés","Csere erre","Csere","Beillesztés","Válasszon tartalmat a beillesztéshez","HTML","Félkövér","Dőlt","Ecset","Link","Visszavon","Újra","Táblázat","Kép","Törlés","Paragráfus","Betűméret","Videó","Betű","Rólunk","Nyomtat","Szimbólum","Aláhúzott","Áthúzott","Behúzás","Aussenseiter","Teljes méret","Összenyom","Formátum másolás","Egyenes vonal","Lista","Számozott lista","Kivág","Összes kijelölése","Beágyazott kód","Link megnyitása","Link szerkesztése","Nincs követés","Link leválasztása","Frissít","Szerkesztés","felülvizsgálat","URL","Szerkeszt","Vízszintes igazítás","Szűrő","Rendezés módosítás szerint","Rendezés név szerint","Rendezés méret szerint","Mappa hozzáadás","Visszaállít","Mentés","Mentés másként...","Átméretezés","Kivág","Szélesség","Magasság","Képarány megtartása","Igen","Nem","Eltávolít","Kijelöl","Kijelöl: %s","Függőleges igazítás","Felosztás","Összevonás","Oszlop hozzáadás","Sor hozzáadás",null,"Törlés","Függőleges felosztás","Vízszintes felosztás","Szegély","A beillesztett szöveg HTML-nek tűnik. Megtartsuk HTML-ként?","Beszúrás HTML-ként","Megtartás","Beszúrás szövegként","Csak szöveg beillesztése","Csak a saját képeit tudja szerkeszteni. Letölti ezt a képet?","Kép sikeresen feltöltve!","Palette","Er zijn geen bestanden in deze map.","átnevezés","Adja meg az új nevet","előnézet","Letöltés","Illessze be a vágólap","A böngésző nem támogatja a közvetlen hozzáférést biztosít a vágólapra.","Másolás kiválasztása","másolás","Határ sugár","Összes","Alkalmazni"]

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports.default = ["Ketik sesuatu","Tentang Jodit","Editor Jodit","Panduan Pengguna Jodit","mencakup detail bantuan penggunaan","Untuk informasi tentang lisensi, silakan kunjungi website:","Beli versi lengkap","Hak Cipta © XDSoft.net - Chupurnov Valeriy. Hak cipta dilindungi undang-undang.","Tautan","Buka di tab baru","Buka editor dalam ukuran penuh","Hapus Pemformatan","Isi warna atau atur warna teks","Ulangi","Batalkan","Tebal","Miring","Sisipkan Daftar Tidak Berurut","Sisipkan Daftar Berurut","Tengah","Penuh","Kiri","Kanan","Sisipkan Garis Horizontal","Sisipkan Gambar","Sisipkan Berkas","Sisipkan video youtube/vimeo","Sisipkan tautan","Ukuran font","Keluarga font","Sisipkan blok format","Normal","Heading 1","Heading 2","Heading 3","Heading 4","Kutip","Kode","Sisipkan","Sisipkan tabel","Kurangi Indentasi","Tambah Indentasi","Pilih Karakter Spesial","Sisipkan Karakter Spesial","Formar warna","Ubah mode","Batas","atas","kanan","bawah","kiri","Gaya","Class","Rata","Kanan","Tengah","Kiri","--Tidak diset--","Src","Judul","Teks alternatif","Tautan","Buka tautan di tab baru","Gambar","berkas","Lanjutan","Properti gambar","Batal","Ya","Penjelajah Berkas","Error ketika memuat list","Error ketika memuat folder","Apakah Anda yakin?","Masukkan nama Direktori","Buat direktori","ketik nama","Letakkan gambar","Letakkan berkas","atau klik","Teks alternatif","Unggah","Jelajahi","Latar Belakang","Teks","Atas","Tengah","Bawah","Sisipkan kolom sebelumnya","Sisipkan kolom setelahnya","Sisipkan baris di atasnya","Sisipkan baris di bawahnya","Hapus tabel","Hapus baris","Hapus kolom","Kosongkan cell","Karakter: %d","Kata: %d","Coret","Garis Bawah","Superskrip","Subskrip","Potong pilihan","Pilih semua","Berhenti","Mencari","Ganti dengan","Ganti","Paste","Pilih konten untuk dipaste","sumber","tebal","miring","sikat","tautan","batalkan","ulangi","tabel","gambar","penghapus","paragraf","ukuran font","video","font","tentang","cetak","simbol","garis bawah","coret","menjorok ke dalam","menjorok ke luar","ukuran penuh","menyusut","salin format","hr","ul","ol","potong","Pilih semua","Kode embed","Buka tautan","Edit tautan","No follow","Hapus tautan","Perbarui","pensil","Mata","URL","Edit","Perataan horizontal","Filter","Urutkan berdasarkan perubahan","Urutkan berdasarkan nama","Urutkan berdasarkan ukuran","Tambah folder","Reset","Simpan","Simpan sebagai...","Ubah ukuran","Crop","Lebar","Tinggi","Jaga aspek rasio","Ya","Tidak","Copot","Pilih","Pilih %s","Rata vertikal","Bagi","Gabungkan","Tambah kolom","tambah baris","Lisensi: %s","Hapus","Bagi secara vertikal","Bagi secara horizontal","Bingkai","Kode Anda cenderung ke HTML. Biarkan sebagai HTML?","Paste sebagai HTML","Jaga","Sisipkan sebagai teks","Sisipkan hanya teks","Anda hanya dapat mengedit gambar Anda sendiri. Unduh gambar ini di host?","Gambar telah sukses diunggah ke host!","palet","Tidak ada berkas","ganti nama","Masukkan nama baru","pratinjau","Unduh","Paste dari clipboard","Browser anda tidak mendukung akses langsung ke clipboard.","Copy seleksi","copy","Border radius","Tampilkan semua","Menerapkan"]

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports.default = ["Scrivi qualcosa...","A proposito di Jodit","Jodit Editor","Guida utente di Jodit","contiene una guida dettagliata per l'uso.","Per informazioni sulla licenza, si prega di visitare il nostro sito:","Acquista la versione completa","Copyright © XDSoft.net - Chupurnov Valeriy. Alle Rechte vorbehalten.","Ancora","Apri in una nuova scheda","Apri l'editor a schermo intero","Formato chiaro","Riempi colore o lettera","Ripristina","Annulla","Grassetto","Corsivo","Inserisci lista non ordinata","Inserisci l'elenco ordinato","Allinea Centra","Allineare Giustificato","Allinea a Sinistra","Allinea a Destra","Inserisci la linea orizzontale","Inserisci immagine","Inserisci un file","Inserisci video Youtube/Vimeo","Inserisci il link","Dimensione del carattere","Tipo di font","Inserisci blocco","Normale","Heading 1","Heading 2","Heading 3","Heading 4","Citazione","Codice","Inserisci","Inserisci tabella","Riduci il rientro","Aumenta il rientro","Seleziona una funzione speciale","Inserisci un carattere speciale","Copia formato","Cambia modo","Margini","su","destra","giù","sinistra","Stili CSS","Classi CSS","Allinea","Destra","Centro","Sinistra","--Non Impostato--","Fonte","Titolo","Testo Alternativo","Link","Apri il link in una nuova scheda","Immagine","Archivio","Avanzato","Proprietà dell'immagine","Annulla","Accetta","Cerca il file","Errore durante il caricamento dell'elenco","Errore durante il caricamento delle cartelle","Sei sicuro?","Inserisci il nome della cartella","Crea cartella","Entre el nombre","Rilascia l'immagine","Rilascia file","o click","Testo alternativo","Carica","Sfoglia","Sfondo","Testo","Su","Centro","Sotto","Inserisci prima la colonna","Inserisci colonna dopo","Inserisci la riga sopra","Inserisci la riga sotto","Elimina tabella","Elimina riga","Elimina colonna","Cella vuota","Caratteri: %d","Parole: %d","Barrato","Sottolineato","indice","deponente","Taglia la selezione","Seleziona tutto","Pausa","Cerca","Sostituisci con","Sostituisci","Incolla","Seleziona il contenuto da incollare","HTML","Grassetto","Corsivo","Pennello","Link","Annulla","Ripristina","Tabella","Immagine","Gomma","Paragrafo","Dimensione del carattere","Video","Font","Approposito di","Stampa","Simbolo","Sottolineato","Barrato","trattino","annulla rientro","A grandezza normale","comprimere","Copia il formato","linea orizzontale","lista non ordinata","lista ordinata","Taglia","Seleziona tutto","Includi codice","Apri link","Modifica link","Non seguire","Togli link","Aggiornare","Per modificare","Recensione"," URL","Modifica","Allineamento orizzontale","Filtro","Ordina per data di modifica","Ordina per nome","Ordina per dimensione","Aggiungi cartella","Reset","Salva","Salva con nome...","Ridimensiona","Tagliare","Larghezza","Altezza","Mantenere le proporzioni","Si","No","Rimuovere","Seleziona","Seleziona: %s","Allineamento verticala","Dividere","Fondi","Aggiungi colonna","Aggiungi riga",null,"Cancella","Dividere verticalmente","Diviso orizzontale","Bordo","Il codice è simile all'HTML. Mantieni come HTML?","Incolla come HTML?","Mantieni","Inserisci come testo","Inserisci solo il testo","Puoi modificare solo le tue immagini. Scarica questa immagine sul server?","L'immagine è stata caricata con successo sul server!","tavolozza","Non ci sono file in questa directory.","ungherese","Inserisci un nuovo nome","anteprima","Scaricare","Incolla dagli appunti","Il tuo browser non supporta l'accesso diretto agli appunti.","Selezione di copia","copia","Border radius","Mostra tutti","Applicare"]

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports.default = ["なにかタイプしてください","Joditについて","Jodit Editor","Jodit ユーザーズ・ガイド","詳しい使い方","ライセンス詳細についてはJodit Webサイトを確認ください：","フルバージョンを購入","Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.","Anchor","新しいタブで開く","エディターのサイズ（フル/ノーマル）","書式をクリア","テキストの色","やり直し","元に戻す","太字","斜体","箇条書き","番号付きリスト","中央揃え","両端揃え","左揃え","右揃え","区切り線を挿入","画像を挿入","ファイルを挿入","Youtube/Vimeo 動画","リンクを挿入","フォントサイズ","フォント","テキストのスタイル","指定なし","タイトル1","タイトル2","タイトル3","タイトル4","引用","コード","挿入","表を挿入","インデント減","インデント増","特殊文字を選択","特殊文字を挿入","書式を貼付け","編集モード切替え","マージン","上","右","下","左","スタイル","クラス","配置","右寄せ","中央寄せ","左寄せ","指定なし","ソース","タイトル","代替テキスト","リンク","新しいタブで開く","画像","ファイル","高度な設定","画像のプロパティー","キャンセル","確定","File Browser","Error on load list","Error on load folders","Are you sure?","Enter Directory name","Create directory","type name","ここに画像をドロップ","ここにファイルをドロップ","or クリック","代替テキスト","アップロード","ブラウズ","背景","文字","上","中央","下","左に列を挿入","右に列を挿入","上に行を挿入","下に行を挿入","表を削除","行を削除","列を削除","セルを空にする","文字数: %d","単語数: %d","取り消し線","下線","上付き文字","下付き文字","切り取り","すべて選択","Pause","検索","置換","置換","貼付け","選択した内容を貼付け","source","bold","italic","brush","link","undo","redo","table","image","eraser","paragraph","fontsize","video","font","about","print","symbol","underline","strikethrough","indent","outdent","fullsize","shrink","copyformat","分割線","箇条書き","番号付きリスト","切り取り","すべて選択","埋め込みコード","リンクを開く","リンクを編集","No follow","リンク解除","更新","鉛筆","サイトを確認","URL","編集","水平方向の配置","Filter","Sort by changed","Sort by name","Sort by size","Add folder","リセット","保存","Save as ...","リサイズ","Crop","幅","高さ","縦横比を保持","はい","いいえ","移除","選択","選択: %s","垂直方向の配置","分割","セルの結合","列を追加","行を追加",null,"削除","セルの分割（垂直方向）","セルの分割（水平方向）","境界線","HTMLコードを保持しますか？","HTMLで貼付け","HTMLを保持","HTMLをテキストにする","テキストだけ","You can only edit your own images. Download this image on the host?","The image has been successfully uploaded to the host!","パレット","There are no files","Rename","Enter new name","プレビュー","ダウンロード","貼り付け","お使いのブラウザはクリップボードを使用できません","コピー","copy","角の丸み","全て表示","適用"]

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports.default = ["무엇이든 입력하세요","Jodit에 대하여","Jodit Editor","Jodit 사용자 안내서","자세한 도움말이 들어있어요","라이센스에 관해서는 Jodit 웹 사이트를 방문해주세요：","풀 버전 구입하기","© XDSoft.net - Chupurnov Valeriy. 에게 저작권과 모든 권리가 있습니다.","Anchor","새 탭에서 열기","전체 크기로 보기","서식 지우기","글씨 색상","재실행","실행 취소","굵게","기울임","글머리 목록","번호 목록","가운데 정렬","양쪽 정렬","왼쪽 정렬","오른쪽 정렬","수평 구분선 넣기","이미지 넣기","파일 넣기","Youtube/Vimeo 동영상","링크 넣기","글꼴 크기","글꼴","블록 요소 넣기","일반 텍스트","제목 1","제목 2","제목 3","제목 4","인용","코드","붙여 넣기","테이블","들여쓰기 감소","들여쓰기 증가","특수문자 선택","특수문자 입력","페인트 형식","편집모드 변경","마진","위","오른쪽","아래","왼쪽","스타일","클래스","정렬","오른쪽으로","가운데로","왼쪽으로","--지정 안 함--","경로(src)","제목","대체 텍스트(alt)","링크","새 탭에서 열기",null,"파일","고급","이미지 속성","취소","확인","파일 탐색기","목록 불러오기 에러","폴더 불러오기","정말 진행할까요?","디렉토리 이름 입력","디렉토리 생성","이름 입력","이미지 드래그","파일 드래그","혹은 클릭","대체 텍스트","업로드","탐색","배경","텍스트","위","중앙","아래","이전 열에 삽입","다음 열에 삽입","위 행에 삽입","아래 행에 삽입","테이블 삭제","행 삭제","열 삭제","빈 셀","문자수: %d","단어수: %d","취소선","밑줄","윗첨자","아래첨자","선택 잘라내기","모두 선택","구분자","검색","대체하기","대체","붙여넣기","붙여넣을 내용 선택","HTML 소스","볼드","이탤릭","브러시","링크","실행 취소","재실행","테이블","이미지","지우개","문단","글꼴 크기","비디오","글꼴","편집기 정보","프린트","기호","밑줄","취소선","들여쓰기","내어쓰기","전체 화면","일반 화면","복사 형식","구분선","글머리 목록","번호 목록","잘라내기","모두 선택","Embed 코드","링크 열기","링크 편집","No follow","링크 제거","갱신","연필","사이트 확인","URL","편집","수평 정렬","필터","변경일 정렬","이름 정렬","크기 정렬","새 폴더","초기화","저장","새로 저장하기 ...","리사이즈","크롭","가로 길이","세로 높이","비율 유지하기","네","아니오","제거","선택","선택: %s","수직 정렬","분할","셀 병합","열 추가","행 추가","라이센스: %s","삭제","세로 셀 분할","가로 셀 분할","외곽선","HTML 코드로 감지했어요. 코드인채로 붙여넣을까요?","HTML로 붙여넣기","원본 유지","텍스트로 넣기","텍스트만 넣기","외부 이미지는 편집할 수 없어요. 외부 이미지를 다운로드 할까요?","이미지를 무사히 업로드 했어요!","팔레트","파일이 없어요","이름 변경","새 이름 입력","리미보기","다운로드","클립보드 붙여넣기","사용중인 브라우저가 클립보드 접근을 지원하지 않아요.","선택 복사","복사","둥근 테두리","모두 보기","적용"]

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports.default = ["Begin met typen..","Over Jodit","Jodit Editor","Jodit gebruikershandleiding","bevat gedetailleerde informatie voor gebruik.","Voor informatie over de licentie, ga naar onze website:","Volledige versie kopen","Copyright © XDSoft.net - Chupurnov Valeriy. Alle rechten voorbehouden.","Anker","Open in nieuwe tab","Editor in volledig scherm openen","Opmaak verwijderen","Vulkleur of tekstkleur aanpassen","Opnieuw","Ongedaan maken","Vet","Cursief","Geordende list invoegen","Ongeordende lijst invoegen","Centreren","Uitlijnen op volledige breedte","Links uitlijnen","Rechts uitlijnen","Horizontale lijn invoegen","Afbeelding invoegen","Bestand invoegen","Youtube/Vimeo video invoegen","Link toevoegen","Tekstgrootte","Lettertype","Format blok invoegen","Normaal","Koptekst 1","Koptekst 2","Koptekst 3","Koptekst 4","Citaat","Code","Invoegen","Tabel invoegen","Inspringing verkleinen","Inspringing vergroten","Symbool selecteren","Symbool invoegen","Opmaak kopieren","Modus veranderen","Marges","Boven","Rechts","Onder","Links","CSS styles","CSS classes","Uitlijning","Rechts","Gecentreerd","Links","--Leeg--","Src","Titel","Alternatieve tekst","Link","Link in nieuwe tab openen","Afbeelding","Bestand","Geavanceerd","Afbeeldingseigenschappen","Annuleren","OK","Bestandsbrowser","Fout bij het laden van de lijst","Fout bij het laden van de mappenlijst","Weet je het zeker?","Geef de map een naam","Map aanmaken","Type naam","Sleep hier een afbeelding naartoe","Sleep hier een bestand naartoe","of klik","Alternatieve tekst","Uploaden","Bladeren","Achtergrond","Tekst","Boven","Midden","Onder","Kolom invoegen (voor)","Kolom invoegen (na)","Rij invoegen (boven)","Rij invoegen (onder)","Tabel verwijderen","Rij verwijderen","Kolom verwijderen","Cel leegmaken","Tekens: %d","Woorden: %d","Doorstrepen","Onderstrepen","Superscript","Subscript","Selectie knippen","Selecteer alles","Enter","Zoek naar","Vervangen door","Vervangen","Plakken","Kies content om te plakken","Broncode","vet","cursief","kwast","link","ongedaan maken","opnieuw","tabel","afbeelding","gum","paragraaf","lettergrootte","video","lettertype","over","afdrukken","symbool","onderstreept","doorgestreept","inspringen","minder inspringen","volledige grootte","kleiner maken","opmaak kopiëren","horizontale lijn","lijst","genummerde lijst","knip","alles selecteren","Embed code","link openen","link aanpassen","niet volgen","link verwijderen","Updaten","Om te bewerken","Recensie"," URL","Bewerken","Horizontaal uitlijnen","Filteren","Sorteren op wijzigingsdatum","Sorteren op naam","Sorteren op grootte","Map toevoegen","Herstellen","Opslaan","Opslaan als ...","Grootte aanpassen","Bijknippen","Breedte","Hoogte","Verhouding behouden","Ja","Nee","Verwijderen","Selecteren","Selecteer: %s","Verticaal uitlijnen","Splitsen","Samenvoegen","Kolom toevoegen","Rij toevoegen",null,"Verwijderen","Verticaal splitsen","Horizontaal splitsen","Rand","Deze code lijkt op HTML. Als HTML behouden?","Invoegen als HTML","Origineel behouden","Als tekst invoegen","Als onopgemaakte tekst invoegen","Je kunt alleen je eigen afbeeldingen aanpassen. Deze afbeelding downloaden?","De afbeelding is succesvol geüploadet!","Palette","Er zijn geen bestanden in deze map.","Hongaars","Voer een nieuwe naam in","voorvertoning","Download","Plakken van klembord","Uw browser ondersteunt geen directe toegang tot het klembord.","Selectie kopiëren","kopiëren","Border radius","Toon alle","Toepassing"]

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports.default = ["Napisz coś","O Jodit","Edytor Jodit","Instrukcja Jodit","zawiera szczegółowe informacje dotyczące użytkowania.","Odwiedź naszą stronę, aby uzyskać więcej informacji na temat licencji:","Zakup pełnej wersji","Copyright © XDSoft.net - Chupurnov Valeriy. Wszystkie prawa zastrzeżone.","Kotwica","Otwórz w nowej zakładce","Otwórz edytor w pełnym rozmiarze","Wyczyść formatowanie","Kolor wypełnienia lub ustaw kolor tekstu","Ponów","Cofnij","Pogrubienie","Kursywa","Wstaw listę wypunktowaną","Wstaw listę numeryczną","Wyśrodkuj","Wyjustuj","Wyrównaj do lewej","Wyrównaj do prawej","Wstaw linię poziomą","Wstaw grafikę","Wstaw plik","Wstaw film Youtube/vimeo","Wstaw link","Rozmiar tekstu","Krój czcionki","Wstaw formatowanie","Normalne","Nagłówek 1","Nagłówek 2","Nagłówek 3","Nagłówek 4","Cytat","Kod","Wstaw","Wstaw tabelę","Zmniejsz wcięcie","Zwiększ wcięcie","Wybierz znak specjalny","Wstaw znak specjalny","Malarz formatów","Zmień tryb","Marginesy","Górny","Prawy","Dolny","Levy","Style CSS","Klasy CSS","Wyrównanie","Prawa","środek","Lewa","brak","Źródło","Tytuł","Tekst alternatywny","Link","Otwórz w nowej zakładce","Grafika","Plik","Zaawansowane","Właściwości grafiki","Anuluj","OK","Przeglądarka plików","Błąd ładowania listy plików","Błąd ładowania folderów","Czy jesteś pewien?","Wprowadź nazwę folderu","Utwórz folder","wprowadź nazwę","Upuść plik graficzny","Upuść plik","lub kliknij tu","Tekst alternatywny","Wczytaj","Przeglądaj","Tło","Treść","Góra","Środek","Dół","Wstaw kolumnę przed","Wstaw kolumnę po","Wstaw wiersz przed","Wstaw wiersz po","Usuń tabelę","Usuń wiersz","Usuń kolumnę","Wyczyść komórkę","Znaki: %d","Słowa: %d","Przekreślenie","Podkreślenie","indeks górny","index dolny","Wytnij zaznaczenie","Wybierz wszystko","Przerwa","Szukaj","Zamień na","Zamień","Wklej","Wybierz zawartość do wklejenia","HTML","pogrubienie","kursywa","pędzel","link","cofnij","ponów","tabela","grafika","wyczyść","akapit","rozmiar czcionki","wideo","czcionka","O programie","drukuj","symbol","podkreślenie","przekreślenie","wcięcie","wycięcie","pełen rozmiar","przytnij","format kopii","linia pozioma","lista","lista numerowana","wytnij","zaznacz wszystko","Wstaw kod","otwórz link","edytuj link","Atrybut no-follow","Usuń link","Aktualizuj","edytuj","szukaj","URL","Edytuj","Wyrównywanie w poziomie","Filtruj","Sortuj wg zmiany","Sortuj wg nazwy","Sortuj wg rozmiaru","Dodaj folder","wyczyść","zapisz","zapisz jako","Zmień rozmiar","Przytnij","Szerokość","Wysokość","Zachowaj proporcje","Tak","Nie","Usuń","Wybierz","Wybierz: %s","Wyrównywanie w pionie","Podziel","Scal","Dodaj kolumnę","Dodaj wiersz",null,"Usuń","Podziel w pionie","Podziel w poziomie","Obramowanie","Twój kod wygląda jak HTML. Zachować HTML?","Wkleić jako HTML?","Oryginalny tekst","Wstaw jako tekst","Wstaw tylko treść","Możesz edytować tylko swoje grafiki. Czy chcesz pobrać tą grafikę?","Grafika została pomyślnienie dodana na serwer","Paleta","Brak plików.","zmień nazwę","Wprowadź nową nazwę","podgląd","pobierz","Wklej ze schowka","Twoja przeglądarka nie obsługuje schowka","Kopiuj zaznaczenie","kopiuj","Zaokrąglenie krawędzi","Pokaż wszystkie","Zastosuj"]

/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports.default = ["Escreva algo...","Sobre o Jodit","Editor Jodit","Guia de usuário Jodit","contém ajuda detalhada para o uso.","Para informação sobre a licença, por favor visite nosso site:","Compre a versão completa","Copyright © XDSoft.net - Chupurnov Valeriy. Todos os direitos reservados.","Link","Abrir em nova aba","Abrir editor em tela cheia","Limpar formatação","Cor de preenchimento ou cor do texto","Refazer","Desfazer","Negrito","Itálico","Inserir lista não ordenada","Inserir lista ordenada","Centralizar","Justificar","Alinhar à Esquerda","Alinhar à Direita","Inserir linha horizontal","Inserir imagem","Inserir arquivo","Inserir vídeo do Youtube/vimeo","Inserir link","Tamanho da letra","Fonte","Inserir bloco","Normal","Cabeçalho 1","Cabeçalho 2","Cabeçalho 3","Cabeçalho 4","Citação","Código","Inserir","Inserir tabela","Diminuir recuo","Aumentar recuo","Selecionar caractere especial","Inserir caractere especial","Copiar formato","Mudar modo","Margens","cima","direta","baixo","esquerda","Estilos CSS","Classes CSS","Alinhamento","Direita","Centro","Esquerda","--Não Estabelecido--","Fonte","Título","Texto Alternativo","Link","Abrir link em nova aba","Imagem","Arquivo","Avançado","Propriedades da imagem","Cancelar","Ok","Procurar arquivo","Erro ao carregar a lista","Erro ao carregar as pastas","Você tem certeza?","Escreva o nome da pasta","Criar pasta","Escreva seu nome","Soltar imagem","Soltar arquivo","ou clique","Texto alternativo","Upload","Explorar","Fundo","Texto","Cima","Meio","Baixo","Inserir coluna antes","Inserir coluna depois","Inserir linha acima","Inserir linha abaixo","Excluir tabela","Excluir linha","Excluir coluna","Limpar célula","Caracteres: %d","Palavras: %d","Tachado","Sublinhar","sobrescrito","subscrito","Cortar seleção","Selecionar tudo","Pausa","Procurar por","Substituir com","Substituir","Colar","Escolher conteúdo para colar","HTML","negrito","itálico","pincel","link","desfazer","refazer","tabela","imagem","apagar","parágrafo","tamanho da letra","vídeo","fonte","Sobre de","Imprimir","Símbolo","sublinhar","tachado","recuar","diminuir recuo","Tamanho completo","diminuir","Copiar formato","linha horizontal","lista não ordenada","lista ordenada","Cortar","Selecionar tudo","Incluir código","Abrir link","Editar link","Não siga","Remover link","Atualizar","Editar","Visualizar","URL","Editar","Alinhamento horizontal","filtrar","Ordenar por modificação","Ordenar por nome","Ordenar por tamanho","Adicionar pasta","Resetar","Salvar","Salvar como...","Redimensionar","Recortar","Largura","Altura","Manter a proporção","Sim","Não","Remover","Selecionar","Selecionar: %s","Alinhamento vertical","Dividir","Mesclar","Adicionar coluna","Adicionar linha",null,"Excluir","Dividir vertical","Dividir horizontal","Borda","Seu código é similar ao HTML. Manter como HTML?","Colar como HTML?","Manter","Inserir como Texto","Inserir somente o Texto","Você só pode editar suas próprias imagens. Baixar essa imagem pro servidor?","A imagem foi enviada com sucesso para o servidor!","Palette","Não há arquivos nesse diretório.","Húngara","Digite um novo nome","preview","Baixar","Colar da área de transferência","O seu navegador não oferece suporte a acesso direto para a área de transferência.","Selecção de cópia","cópia","Border radius","Mostrar todos os","Aplicar"]

/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports.default = ["Напишите что-либо","О Jodit","Редактор Jodit","Jodit Руководство пользователя","содержит детальную информацию по использованию","Для получения сведений о лицензии , пожалуйста, перейдите на наш сайт:","Купить полную версию","Авторские права © XDSoft.net - Чупурнов Валерий. Все права защищены.","Анкор","Открывать ссылку в новой вкладке","Открыть редактор в полном размере","Очистить форматирование","Цвет заливки или цвет текста","Повтор","Отмена","Жирный","Наклонный","Вставка маркированного списка","Вставить нумерованный список","Выровнять по центру","Выровнять по ширине","Выровнять по левому краю","Выровнять по правому краю","Вставить горизонтальную линию","Вставить изображение","Вставить файл","Вставьте видео","Вставить ссылку","Размер шрифта","Шрифт","Вставить блочный элемент","Нормальный текст","Заголовок 1","Заголовок 2","Заголовок 3","Заголовок 4","Цитата","Код","Вставить","Вставить таблицу","Уменьшить отступ","Увеличить отступ","Выберите специальный символ","Вставить специальный символ","Формат краски","Источник","Отступы","сверху","справа","снизу","слева","Стили","Классы","Выравнивание","По правому краю","По центру","По левому краю","--не устанавливать--","src","Заголовок","Альтернативный текст (alt)","Ссылка","Открывать ссылку в новом окне",null,"Файл","Расширенные","Свойства изображения","Отмена","Ок","Браузер файлов","Ошибка при загрузке списка изображений","Ошибка при загрузке списка директорий","Вы уверены?","Введите название директории","Создать директорию","введите название","Перетащите сюда изображение","Перетащите сюда файл","или нажмите","Альтернативный текст","Загрузка","Сервер","Фон","Текст"," К верху","По середине","К низу","Вставить столбец до","Вставить столбец после","Вставить ряд выше","Вставить ряд ниже","Удалить таблицу","Удалять ряд","Удалить столбец","Очистить ячейку","Символов: %d","Слов: %d","Перечеркнуть","Подчеркивание","верхний индекс","индекс","Вырезать","Выделить все","Разделитель","Найти","Заменить на","Заменить","Вставить","Выбрать контент для вставки","HTML","жирный","курсив","заливка","ссылка","отменить","повторить","таблица","Изображение","очистить","параграф","размер шрифта","видео","шрифт","о редакторе","печать","символ","подчеркнутый","перечеркнутый","отступ","выступ","во весь экран","обычный размер","Копировать формат","линия","Список","Нумерованный список","Вырезать","Выделить все","Код","Открыть ссылку","Редактировать ссылку","Атрибут nofollow","Убрать ссылку","Обновить","Редактировать","Просмотр","URL","Редактировать","Горизонтальное выравнивание","Фильтр","По изменению","По имени","По размеру","Добавить папку","Восстановить","Сохранить","Сохранить как","Изменить размер","Обрезать размер","Ширина","Высота","Сохранять пропорции","Да","Нет","Удалить","Выделить","Выделить: %s","Вертикальное выравнивание","Разделить","Объединить в одну","Добавить столбец","Добавить строку","Лицензия: %s","Удалить","Разделить по вертикали","Разделить по горизонтали","Рамка","Ваш текст, который вы пытаетесь вставить похож на HTML. Вставить его как HTML?","Вставить как HTML?","Сохранить оригинал","Вставить как текст","Вставить только текст","Вы можете редактировать только свои собственные изображения. Загрузить это изображение на ваш сервер?","Изображение успешно загружено на сервер!","палитра","В данном каталоге нет файлов","Переименовать","Введите новое имя","Предпросмотр","Скачать","Вставить из буфера обмена","Ваш браузер не поддерживает прямой доступ к буферу обмена.","Скопировать выделенное","копия","Радиус границы","Показать все","Применить"]

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports.default = ["Bir şey yazın.","Jodit Hakkında","Jodit Editor","Jodit Kullanım Kılavuzu","kullanım için detaylı bilgiler içerir","Lisans hakkında bilgi için lütfen web sitemize gidin:","Tam versiyon satın al","Copyright © XDSoft.net - Chupurnov Valeriy. Tüm Hakları Saklıdır","Bağlantı","Yeni sekmede aç","Tam ekran editör","Stili temizle","Dolgu ve yazı rengi seç","İleri Al","Geri Al","Kalın","İtalik","Sırasız Liste Ekle","Sıralı Liste Ekle","Ortala","Kenarlara Yasla","Sola Yasla","Sağa Yasla","Yatay Çizgi Ekle","Resim Ekle","Dosya Ekle","Youtube/vimeo Videosu Ekle","Bağlantı Ekle","Font Boyutu","Font Ailesi","Blok Ekle","Normal","Başlık 1","Başlık 2","Başlık 3","Başlık 4","Alıntı","Code","Ekle","Tablo Ekle","Girintiyi Azalt","Girintiyi Arttır","Özel Karakter Seç","Özel Karakter Ekle","Resim Biçimi","Mod Değiştir","MEsafeler","Üst","Sağ","Alt","Sol","CSS Stilleri","CSS Sınıfları","Hizalama","Sağ","Ortalı","Sol","Belirlenmedi","Kaynak","Başlık","Alternatif Yazı","Link","Bağlantıyı yeni sekmede aç","Resim","Dosya","Gelişmiş","Resim özellikleri","İptal","Tamam","Dosya Gezgini","Liste yüklenirken hata oluştu","Klasörler yüklenirken hata oluştur","Emin misiniz?","Dizin yolu giriniz","Dizin oluştur","Typname","Resim bırak","Dosya bırak","veya tıkla","Alternatif yazı","Yükle","Ekle","Arka plan","Yazı","Üst","Orta","Aşağı","Öncesine kolon ekle","Sonrasına kolon ekle","Üstüne satır ekle","Altına satır ekle","Tabloyu sil","Satır sil","Kolon sil","Hücreyi boşalt","Harfler: %d","Kelimeler: %d","Durchschlagen","Alt çizgi","Üst yazı","Alt yazı","Seçilimi kes","Tümünü seç","Durdur","Ara","Şununla değiştir","Değiştir","Yapıştır","Yapıştırılacak içerik seç","Kaynak","Kalın","italik","Fırça","Bağlantı","Geri al","İleri al","Tablo","Resim","Silgi","Paragraf","Font boyutu","Video","Font","Hakkında","Yazdır","Sembol","Alt çizgi","Üstü çizili","Girinti","Çıkıntı","Tam ekran","Küçült","Kopyalama Biçimi","Ayraç","Sırasız liste","Sıralı liste","Kes","Tümünü seç","Kod ekle","Bağlantıyı aç","Bağlantıyı düzenle","Nofollow özelliği","Bağlantıyı kaldır","Güncelle","Düzenlemek için","Yorumu","URL","Düzenle","Yatay hizalama","Filtre","Değişime göre sırala","İsme göre sırala","Boyuta göre sırala","Klasör ekle","Sıfırla","Kaydet","Farklı kaydet","Boyutlandır","Kırp","Genişlik","Yükseklik","En boy oranını koru","Evet","Hayır","Sil","Seç","Seç: %s","Dikey hizalama","Ayır","Birleştir","Kolon ekle","Satır ekle",null,"Sil","Dikey ayır","Yatay ayır","Kenarlık","Kodunuz HTML koduna benziyor. HTML olarak devam etmek ister misiniz?","HTML olarak yapıştır","Sakla","Yazı olarak ekle","Nur Text einfügen","Sadece kendi resimlerinizi düzenleyebilirsiniz. Bu görseli kendi hostunuza indirmek ister misiniz?","Görsel başarıyla hostunuza yüklendi","Palette","Bu dizinde dosya yok.","Macarca","Yeni isim girin","Ön izleme","İndir","Panodan yapıştır ","Tarayıcınız pano doğrudan erişim desteklemiyor.","Kopya seçimi","kopya","Sınır yarıçapı","Tümünü Göster ","Uygula"]

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports.default = ["输入一些内容","关于Jodit","Jodit Editor","开发者指南","使用帮助","有关许可证的信息，请访问我们的网站：","购买完整版本","Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.","Anchor","在新窗口打开","全屏编辑","清除样式","颜色","重做","撤销","粗体","斜体","符号列表","编号","居中","对齐文本","左对齐","右对齐","分割线","图片","文件","youtube/vimeo 视频","链接","字号","字体","格式块","文本","标题1","标题2","标题3","标题4","引用","代码","插入","表格","减少缩进","增加缩进","选择特殊符号","特殊符号","格式复制","改变模式","外边距（Margins）","top","right","bottom","left","样式","Classes","对齐方式","居右","居中","居左","无","Src","Title","Alternative","Link","在新窗口打开链接","图片","file","高级","图片属性","取消","确定","文件管理","加载list错误","加载folders错误","你确定吗？","输入路径","创建路径","type name","拖动图片到此","拖动文件到此","或点击","Alternative text","上传","浏览","背景色","文字","顶部","中间","底部","在之前插入列","在之后插入列","在之前插入行","在之后插入行","删除表格","删除行","删除列","清除内容","字符数: %d","单词数: %d","删除线","下划线","上标","下标","剪切","全选","Pause","查找","替换为","替换","粘贴","选择内容并粘贴","源码","粗体","斜体","颜色","链接","撤销","重做","表格","图片","橡皮擦","段落","字号","视频","字体","关于","打印","符号","下划线","上出现","增加缩进","减少缩进","全屏","收缩","复制格式","分割线","无序列表","顺序列表","剪切","全选","嵌入代码","打开链接","编辑链接","No follow","Unlink","更新","铅笔","回顧","URL",null,"水平对齐","筛选","修改时间排序","名称排序","大小排序","新建文件夹","重置","保存","保存为","调整大小","Crop","宽","高","保存长宽比","是","不","移除","选择","选择: %s","垂直对齐","拆分","合并","添加列","添加行",null,"删除","垂直拆分","水平拆分","边框","你粘贴的文本是一段html代码，是否保留源格式","html粘贴","保留源格式","把html代码视为普通文本","只保留文本","你只能编辑你自己的图片。Download this image on the host?","图片上传成功","调色板","此目录中沒有文件。","重命名","输入新名称","预览","下载","粘贴从剪贴板","你浏览器不支持直接访问的剪贴板。","复制的选择","复制","边界半径","显示所有","适用"]

/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports.default = ["輸入一些內容","關於Jodit","Jodit Editor","開發者指南","使用幫助","有關許可證的信息，請訪問我們的網站：","購買完整版本","Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.","Anchor","在新窗口打開","全屏編輯","清除樣式","顏色","重做","撤銷","粗體","斜體","符號列表","編號","居中","對齊文本","左對齊","右對齊","分割線","圖片","文件","youtube/vimeo 影片","鏈接","字號","字體","格式塊","文本","標題1","標題2","標題3","標題4","引用","代碼","插入","表格","減少縮進","增加縮進","選擇特殊符號","特殊符號","格式複製","改變模式","外邊距（Margins）","top","right","bottom","left","樣式","Classes","對齊方式","居右","居中","居左","無","Src","Title","Alternative","Link","在新窗口打開鏈接","圖片","file","高級","圖片屬性","取消","確定","文件管理","加載list錯誤","加載folders錯誤","你確定嗎？","輸入路徑","創建路徑","type name","拖動圖片到此","拖動文件到此","或點擊","Alternative text","上傳","瀏覽","背景色","文字","頂部","中間","底部","在之前插入列","在之後插入列","在之前插入行","在之後插入行","刪除表格","刪除行","刪除列","清除內容","字符數: %d","單詞數: %d","刪除線","下劃線","上標","下標","剪切","全選","Pause","查找","替換為","替換","黏貼","選擇內容並黏貼","源碼","粗體","斜體","顏色","鏈接","撤銷","重做","表格","圖片","橡皮擦","段落","字號","影片","字體","關於","打印","符號","下劃線","上出現","增加縮進","減少縮進","全屏","收縮","複製格式","分割線","無序列表","順序列表","剪切","全選","嵌入代碼","打開鏈接","編輯鏈接","No follow","Unlink","更新","鉛筆","回顧","URL",null,"水平對齊","篩選","修改時間排序","名稱排序","大小排序","新建文件夾","重置","保存","保存為","調整大小","Crop","寬","高","保存長寬比","是","不","移除","選擇","選擇: %s","垂直對齊","拆分","合併","添加列","添加行",null,"刪除","垂直拆分","水平拆分","邊框","你黏貼的文本是一段html代碼，是否保留源格式","html黏貼","保留源格式","把html代碼視為普通文本","只保留文本","妳只能編輯妳自己的圖片。Download this image on the host?","圖片上傳成功","調色板","此目錄中沒有文件。","重命名","輸入新名稱","預覽","下載","วางจากคลิปบอร์ด","ของเบราว์เซอร์ไม่สนับสนุนโดยตรงเข้าไปยังคลิปบอร์ด","คัดลอกส่วนที่เลือก","คัดลอก","เส้นขอบรัศมี","แสดงทั้งหมด","ปรับใช้"]

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var add_new_line_1 = __webpack_require__(219);
Object.defineProperty(exports, "addNewLine", { enumerable: true, get: function () { return add_new_line_1.addNewLine; } });
var about_1 = __webpack_require__(221);
Object.defineProperty(exports, "about", { enumerable: true, get: function () { return about_1.about; } });
var autofocus_1 = __webpack_require__(223);
Object.defineProperty(exports, "autofocus", { enumerable: true, get: function () { return autofocus_1.autofocus; } });
var delete_1 = __webpack_require__(224);
Object.defineProperty(exports, "Delete", { enumerable: true, get: function () { return delete_1.Delete; } });
var bold_1 = __webpack_require__(225);
Object.defineProperty(exports, "bold", { enumerable: true, get: function () { return bold_1.bold; } });
var clean_html_1 = __webpack_require__(226);
Object.defineProperty(exports, "cleanHtml", { enumerable: true, get: function () { return clean_html_1.cleanHtml; } });
var wrap_text_nodes_1 = __webpack_require__(227);
Object.defineProperty(exports, "WrapTextNodes", { enumerable: true, get: function () { return wrap_text_nodes_1.WrapTextNodes; } });
var clipboard_1 = __webpack_require__(64);
Object.defineProperty(exports, "clipboard", { enumerable: true, get: function () { return clipboard_1.clipboard; } });
Object.defineProperty(exports, "paste", { enumerable: true, get: function () { return clipboard_1.paste; } });
Object.defineProperty(exports, "pasteStorage", { enumerable: true, get: function () { return clipboard_1.pasteStorage; } });
var color_1 = __webpack_require__(231);
Object.defineProperty(exports, "color", { enumerable: true, get: function () { return color_1.color; } });
var drag_and_drop_1 = __webpack_require__(232);
Object.defineProperty(exports, "DragAndDrop", { enumerable: true, get: function () { return drag_and_drop_1.DragAndDrop; } });
var drag_and_drop_element_1 = __webpack_require__(233);
Object.defineProperty(exports, "DragAndDropElement", { enumerable: true, get: function () { return drag_and_drop_element_1.DragAndDropElement; } });
var enter_1 = __webpack_require__(234);
Object.defineProperty(exports, "enter", { enumerable: true, get: function () { return enter_1.enter; } });
var error_messages_1 = __webpack_require__(235);
Object.defineProperty(exports, "errorMessages", { enumerable: true, get: function () { return error_messages_1.errorMessages; } });
var font_1 = __webpack_require__(237);
Object.defineProperty(exports, "font", { enumerable: true, get: function () { return font_1.font; } });
var format_block_1 = __webpack_require__(238);
Object.defineProperty(exports, "formatBlock", { enumerable: true, get: function () { return format_block_1.formatBlock; } });
var fullsize_1 = __webpack_require__(239);
Object.defineProperty(exports, "fullsize", { enumerable: true, get: function () { return fullsize_1.fullsize; } });
var hotkeys_1 = __webpack_require__(241);
Object.defineProperty(exports, "hotkeys", { enumerable: true, get: function () { return hotkeys_1.hotkeys; } });
var iframe_1 = __webpack_require__(242);
Object.defineProperty(exports, "iframe", { enumerable: true, get: function () { return iframe_1.iframe; } });
tslib_1.__exportStar(__webpack_require__(243), exports);
var indent_1 = __webpack_require__(251);
Object.defineProperty(exports, "indent", { enumerable: true, get: function () { return indent_1.indent; } });
var inline_popup_1 = __webpack_require__(252);
Object.defineProperty(exports, "inlinePopup", { enumerable: true, get: function () { return inline_popup_1.inlinePopup; } });
var justify_1 = __webpack_require__(67);
Object.defineProperty(exports, "justify", { enumerable: true, get: function () { return justify_1.justify; } });
var limit_1 = __webpack_require__(258);
Object.defineProperty(exports, "limit", { enumerable: true, get: function () { return limit_1.limit; } });
var link_1 = __webpack_require__(259);
Object.defineProperty(exports, "link", { enumerable: true, get: function () { return link_1.link; } });
var media_1 = __webpack_require__(261);
Object.defineProperty(exports, "media", { enumerable: true, get: function () { return media_1.media; } });
var mobile_1 = __webpack_require__(262);
Object.defineProperty(exports, "mobile", { enumerable: true, get: function () { return mobile_1.mobile; } });
var ordered_list_1 = __webpack_require__(263);
Object.defineProperty(exports, "orderedList", { enumerable: true, get: function () { return ordered_list_1.orderedList; } });
var placeholder_1 = __webpack_require__(264);
Object.defineProperty(exports, "placeholder", { enumerable: true, get: function () { return placeholder_1.placeholder; } });
var redo_undo_1 = __webpack_require__(266);
Object.defineProperty(exports, "redoUndo", { enumerable: true, get: function () { return redo_undo_1.redoUndo; } });
var resizer_1 = __webpack_require__(267);
Object.defineProperty(exports, "resizer", { enumerable: true, get: function () { return resizer_1.resizer; } });
var search_1 = __webpack_require__(269);
Object.defineProperty(exports, "search", { enumerable: true, get: function () { return search_1.search; } });
var size_1 = __webpack_require__(271);
Object.defineProperty(exports, "size", { enumerable: true, get: function () { return size_1.size; } });
var source_1 = __webpack_require__(273);
Object.defineProperty(exports, "source", { enumerable: true, get: function () { return source_1.source; } });
var stat_1 = __webpack_require__(281);
Object.defineProperty(exports, "stat", { enumerable: true, get: function () { return stat_1.stat; } });
var sticky_1 = __webpack_require__(282);
Object.defineProperty(exports, "sticky", { enumerable: true, get: function () { return sticky_1.sticky; } });
var symbols_1 = __webpack_require__(284);
Object.defineProperty(exports, "symbols", { enumerable: true, get: function () { return symbols_1.symbols; } });
tslib_1.__exportStar(__webpack_require__(287), exports);
var tooltip_1 = __webpack_require__(293);
Object.defineProperty(exports, "tooltip", { enumerable: true, get: function () { return tooltip_1.tooltip; } });
var xpath_1 = __webpack_require__(295);
Object.defineProperty(exports, "xpath", { enumerable: true, get: function () { return xpath_1.xpath; } });


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNewLine = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(220);
var config_1 = __webpack_require__(4);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.addNewLine = true;
config_1.Config.prototype.addNewLineOnDBLClick = true;
config_1.Config.prototype.addNewLineTagsTriggers = [
    'table',
    'iframe',
    'img',
    'hr',
    'jodit'
];
config_1.Config.prototype.addNewLineDeltaShow = 20;
var ns = 'addnewline';
var addNewLine = (function (_super) {
    tslib_1.__extends(addNewLine, _super);
    function addNewLine() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.line = _this.j.c.fromHTML("<div role=\"button\" tabIndex=\"-1\" title=\"" + _this.j.i18n('Break') + "\" class=\"jodit-add-new-line\"><span>" + modules_1.Icon.get('enter') + "</span></div>");
        _this.isMatchedTag = function (node) {
            return Boolean(node &&
                _this.j.o.addNewLineTagsTriggers.includes(node.nodeName.toLowerCase()));
        };
        _this.preview = false;
        _this.lineInFocus = false;
        _this.isShown = false;
        _this.hideForce = function () {
            if (!_this.isShown) {
                return;
            }
            _this.isShown = false;
            _this.j.async.clearTimeout(_this.timeout);
            _this.lineInFocus = false;
            modules_1.Dom.safeRemove(_this.line);
        };
        _this.hide = function () {
            if (!_this.isShown || _this.lineInFocus) {
                return;
            }
            _this.timeout = _this.j.async.setTimeout(_this.hideForce, {
                timeout: 500,
                label: 'add-new-line-hide'
            });
        };
        _this.canGetFocus = function (elm) {
            return (elm !== null &&
                modules_1.Dom.isBlock(elm, _this.j.ew) &&
                !/^(img|table|iframe|hr)$/i.test(elm.nodeName));
        };
        _this.onClickLine = function (e) {
            var editor = _this.j;
            var p = editor.createInside.element(editor.o.enter);
            if (_this.preview && _this.current && _this.current.parentNode) {
                _this.current.parentNode.insertBefore(p, _this.current);
            }
            else {
                editor.editor.appendChild(p);
            }
            editor.s.setCursorIn(p);
            helpers_1.scrollIntoView(p, editor.editor, editor.ed);
            editor.e.fire('synchro');
            _this.hideForce();
            e.preventDefault();
        };
        _this.onDblClickEditor = function (e) {
            var editor = _this.j;
            if (!editor.o.readonly &&
                editor.o.addNewLineOnDBLClick &&
                e.target === editor.editor &&
                editor.s.isCollapsed()) {
                var editorBound = helpers_1.offset(editor.editor, editor, editor.ed);
                var top_1 = e.pageY - editor.ew.pageYOffset;
                var p = editor.createInside.element(editor.o.enter);
                if (Math.abs(top_1 - editorBound.top) <
                    Math.abs(top_1 - (editorBound.height + editorBound.top)) &&
                    editor.editor.firstChild) {
                    editor.editor.insertBefore(p, editor.editor.firstChild);
                }
                else {
                    editor.editor.appendChild(p);
                }
                editor.s.setCursorIn(p);
                editor.setEditorValue();
                _this.hideForce();
                e.preventDefault();
            }
        };
        _this.onMouseMove = function (e) {
            var editor = _this.j;
            var currentElement = editor.ed.elementFromPoint(e.clientX, e.clientY);
            if (!modules_1.Dom.isHTMLElement(currentElement, editor.ew) ||
                modules_1.Dom.isOrContains(_this.line, currentElement)) {
                return;
            }
            if (!modules_1.Dom.isOrContains(editor.editor, currentElement)) {
                return;
            }
            if (!_this.isMatchedTag(currentElement)) {
                currentElement = modules_1.Dom.closest(currentElement, _this.isMatchedTag, editor.editor);
            }
            if (!currentElement) {
                _this.hide();
                return;
            }
            if (_this.isMatchedTag(currentElement)) {
                var parentBox = modules_1.Dom.up(currentElement, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor);
                if (parentBox && parentBox !== editor.editor) {
                    currentElement = parentBox;
                }
            }
            var pos = helpers_1.position(currentElement, _this.j);
            var top = false;
            var clientY = e.clientY;
            if (_this.j.iframe) {
                var top_2 = helpers_1.position(_this.j.iframe, _this.j, true).top;
                clientY += top_2;
            }
            var delta = _this.j.o.addNewLineDeltaShow;
            if (Math.abs(clientY - pos.top) <= delta) {
                top = pos.top;
                _this.preview = true;
            }
            if (Math.abs(clientY - (pos.top + pos.height)) <= delta) {
                top = pos.top + pos.height;
                _this.preview = false;
            }
            if (top !== false &&
                !helpers_1.call(_this.preview ? modules_1.Dom.prev : modules_1.Dom.next, currentElement, _this.canGetFocus, editor.editor)) {
                _this.line.style.top = top + 'px';
                _this.current = currentElement;
                _this.show();
            }
            else {
                _this.current = false;
                _this.hide();
            }
        };
        return _this;
    }
    addNewLine.prototype.show = function () {
        if (this.isShown || this.j.o.readonly || this.j.isLocked) {
            return;
        }
        this.isShown = true;
        this.j.async.clearTimeout(this.timeout);
        this.line.classList.toggle('jodit-add-new-line_after', !this.preview);
        this.j.container.appendChild(this.line);
        this.line.style.width = this.j.editor.clientWidth + 'px';
    };
    addNewLine.prototype.afterInit = function (editor) {
        var _this = this;
        if (!editor.o.addNewLine) {
            return;
        }
        editor.e
            .on(this.line, 'mousemove', function (e) {
            e.stopPropagation();
        })
            .on(this.line, 'mousedown touchstart', this.onClickLine)
            .on('change', this.hideForce)
            .on(this.line, 'mouseenter', function () {
            _this.j.async.clearTimeout(_this.timeout);
            _this.lineInFocus = true;
        })
            .on(this.line, 'mouseleave', function () {
            _this.lineInFocus = false;
        })
            .on('changePlace', this.addEventListeners.bind(this));
        this.addEventListeners();
    };
    addNewLine.prototype.addEventListeners = function () {
        var editor = this.j;
        editor.e
            .off(editor.editor, '.' + ns)
            .off(editor.container, '.' + ns)
            .on([editor.ow, editor.ew, editor.editor], "scroll" + '.' + ns, this.hideForce)
            .on(editor.editor, 'dblclick' + '.' + ns, this.onDblClickEditor)
            .on(editor.editor, 'click' + '.' + ns, this.hide)
            .on(editor.container, 'mouseleave' + '.' + ns, this.hide)
            .on(editor.editor, 'mousemove' + '.' + ns, editor.async.debounce(this.onMouseMove, editor.defaultTimeout * 3));
    };
    addNewLine.prototype.beforeDestruct = function () {
        this.j.async.clearTimeout(this.timeout);
        this.j.e.off(this.line);
        this.j.e.off('changePlace', this.addEventListeners);
        modules_1.Dom.safeRemove(this.line);
        this.j.e
            .off([this.j.ow, this.j.ew, this.j.editor], '.' + ns)
            .off(this.j.container, '.' + ns);
    };
    return addNewLine;
}(modules_1.Plugin));
exports.addNewLine = addNewLine;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.about = void 0;
__webpack_require__(222);
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
var constants = __webpack_require__(3);
var dialog_1 = __webpack_require__(14);
config_1.Config.prototype.controls.about = {
    exec: function (editor) {
        var dialog = new dialog_1.Dialog({
            language: editor.o.language
        }), i18n = editor.i18n.bind(editor);
        dialog.setHeader(i18n('About Jodit'));
        dialog.setContent("<div class=\"jodit-about\">\n\t\t\t\t\t<div>" + i18n('Jodit Editor') + " v." + editor.getVersion() + "</div>\n\t\t\t\t\t<div>" + i18n('License: %s', !helpers_1.isLicense(editor.o.license)
            ? 'MIT'
            : helpers_1.normalizeLicense(editor.o.license)) + "</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<a href=\"https://xdsoft.net/jodit/\" target=\"_blank\">http://xdsoft.net/jodit/</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<a href=\"https://xdsoft.net/jodit/doc/\" target=\"_blank\">" + i18n("Jodit User's Guide") + "</a>\n\t\t\t\t\t\t" + i18n('contains detailed help for using') + "\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>" + i18n('Copyright © XDSoft.net - Chupurnov Valeriy. All rights reserved.') + "</div>\n\t\t\t\t</div>");
        dialog.open(true);
        dialog.bindDestruct(editor);
    },
    tooltip: 'About Jodit',
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG
};
function about() {
}
exports.about = about;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.autofocus = void 0;
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
config_1.Config.prototype.autofocus = false;
function autofocus(editor) {
    editor.e.on('afterInit', function () {
        if (editor.o.autofocus) {
            if (editor.defaultTimeout) {
                editor.async.setTimeout(editor.s.focus, 300);
            }
            else {
                editor.s.focus();
            }
        }
    });
    editor.e.on('afterInit afterAddPlace', function () {
        editor.e
            .off(editor.editor, 'mousedown.autofocus')
            .on(editor.editor, 'mousedown.autofocus', function (e) {
            if (editor.isEditorMode() &&
                e.target &&
                dom_1.Dom.isBlock(e.target, editor.ew) &&
                !e.target.childNodes.length) {
                if (editor.editor === e.target) {
                    editor.s.focus();
                }
                else {
                    editor.s.setCursorIn(e.target);
                }
            }
        });
    });
}
exports.autofocus = autofocus;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delete = void 0;
var tslib_1 = __webpack_require__(0);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var constants_1 = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var helpers_2 = __webpack_require__(48);
var Delete = (function (_super) {
    tslib_1.__extends(Delete, _super);
    function Delete() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Delete.prototype, "root", {
        get: function () {
            return this.j.editor;
        },
        enumerable: false,
        configurable: true
    });
    Delete.prototype.afterInit = function (jodit) {
        var _this = this;
        jodit.e
            .on('afterCommand', function (command) {
            if (command === 'delete') {
                _this.afterDeleteCommand();
            }
        })
            .on('keydown', function (event) {
            if (event.key === constants_1.KEY_BACKSPACE || event.key === constants_1.KEY_DELETE) {
                return _this.onDelete(event.key === constants_1.KEY_BACKSPACE);
            }
        });
    };
    Delete.prototype.beforeDestruct = function (jodit) {
        jodit.e.off('afterCommand').off('keydown');
    };
    Delete.prototype.afterDeleteCommand = function () {
        var jodit = this.j;
        var current = jodit.s.current();
        if (current && dom_1.Dom.isTag(current.firstChild, 'br')) {
            jodit.s.removeNode(current.firstChild);
        }
        if (!helpers_1.trim(jodit.editor.textContent || '') &&
            !jodit.editor.querySelector('img') &&
            (!current || !dom_1.Dom.closest(current, 'table', jodit.editor))) {
            jodit.editor.innerHTML = '';
            var node = jodit.s.setCursorIn(jodit.editor);
            jodit.s.removeNode(node);
        }
    };
    Delete.prototype.onDelete = function (backspace) {
        var _a;
        var sel = this.j.selection;
        if (!sel.isFocused()) {
            sel.focus();
        }
        if (!((_a = sel.sel) === null || _a === void 0 ? void 0 : _a.rangeCount) || this.checkNotCollapsed()) {
            return false;
        }
        var jodit = this.j;
        var range = sel.range;
        var fakeNode = jodit.createInside.text(constants_1.INVISIBLE_SPACE);
        try {
            range.insertNode(fakeNode);
            if (!dom_1.Dom.isOrContains(jodit.editor, fakeNode)) {
                return;
            }
            helpers_2.normalizeCursorPosition(fakeNode, backspace);
            if (this.checkRemoveChar(fakeNode, backspace) ||
                this.checkRemoveInseparableElement(fakeNode, backspace) ||
                this.checkTableCell(fakeNode, backspace) ||
                this.checkRemoveEmptyParent(fakeNode, backspace) ||
                this.checkRemoveEmptyNeighbor(fakeNode, backspace) ||
                this.checkJoinNeighbors(fakeNode, backspace) ||
                this.checkRewrapListItem(fakeNode, backspace)) {
                return false;
            }
        }
        finally {
            dom_1.Dom.safeRemove(fakeNode);
        }
        return false;
    };
    Delete.prototype.checkNotCollapsed = function () {
        var jodit = this.j;
        if (!jodit.s.isCollapsed()) {
            jodit.execCommand('Delete');
            return true;
        }
    };
    Delete.prototype.checkRemoveChar = function (fakeNode, backspace) {
        var _a, _b;
        var step = backspace ? -1 : 1;
        var sibling = helpers_2.getSibling(fakeNode, backspace), removeNeighbor = null;
        var charRemoved = false, removed;
        while (sibling && dom_1.Dom.isText(sibling)) {
            if ((_a = sibling.nodeValue) === null || _a === void 0 ? void 0 : _a.length) {
                var value = sibling.nodeValue;
                var length_1 = value.length;
                var index = backspace ? length_1 - 1 : 0;
                if (value[index] === constants_1.INVISIBLE_SPACE) {
                    while (value[index] === constants_1.INVISIBLE_SPACE) {
                        index += step;
                    }
                }
                removed = value[index];
                if (value[index + step] === constants_1.INVISIBLE_SPACE) {
                    index += step;
                    while (value[index] === constants_1.INVISIBLE_SPACE) {
                        index += step;
                    }
                    index += backspace ? 1 : -1;
                }
                sibling.nodeValue = value.substr(backspace ? 0 : index + 1, backspace ? index : length_1);
            }
            if (!((_b = sibling.nodeValue) === null || _b === void 0 ? void 0 : _b.length)) {
                removeNeighbor = sibling;
            }
            if (!helpers_1.isVoid(removed) && removed !== constants_1.INVISIBLE_SPACE) {
                charRemoved = true;
                break;
            }
            sibling = helpers_2.getSibling(sibling, backspace);
            if (removeNeighbor) {
                dom_1.Dom.safeRemove(removeNeighbor);
                removeNeighbor = null;
            }
        }
        if (charRemoved) {
            this.removeEmptyInlineParent(fakeNode);
            this.addBRInsideEmptyBlock(fakeNode);
            this.j.s.setCursorBefore(fakeNode);
        }
        return charRemoved || undefined;
    };
    Delete.prototype.removeEmptyInlineParent = function (node) {
        var parent = node.parentElement;
        while (parent && dom_1.Dom.isInlineBlock(parent)) {
            var p = parent.parentElement;
            if (dom_1.Dom.isEmpty(parent)) {
                dom_1.Dom.after(parent, node);
                dom_1.Dom.safeRemove(parent);
            }
            parent = p;
        }
    };
    Delete.prototype.addBRInsideEmptyBlock = function (node) {
        if (node.parentElement !== this.root &&
            dom_1.Dom.isBlock(node.parentElement, this.j.ew) &&
            dom_1.Dom.each(node.parentElement, dom_1.Dom.isEmptyTextNode)) {
            dom_1.Dom.after(node, this.j.createInside.element('br'));
        }
    };
    Delete.prototype.checkRemoveInseparableElement = function (fakeNode, backspace) {
        var neighbor = dom_1.Dom.getNormalSibling(fakeNode, backspace);
        if (dom_1.Dom.isElement(neighbor) &&
            (dom_1.Dom.isTag(neighbor, constants_1.INSEPARABLE_TAGS) || dom_1.Dom.isEmpty(neighbor))) {
            dom_1.Dom.safeRemove(neighbor);
            this.j.s.setCursorBefore(fakeNode);
            if (dom_1.Dom.isTag(neighbor, 'br')) {
                this.checkRemoveEmptyParent(fakeNode, backspace);
            }
            return true;
        }
    };
    Delete.prototype.checkTableCell = function (fakeNode, backspace) {
        var cell = fakeNode.parentElement;
        if (dom_1.Dom.isCell(cell, this.j.ew)) {
            return true;
        }
    };
    Delete.prototype.checkRemoveEmptyParent = function (fakeNode, backspace) {
        var found = false;
        var _a = this.j.s, setCursorBefore = _a.setCursorBefore, setCursorIn = _a.setCursorIn;
        var prn = dom_1.Dom.closest(fakeNode, dom_1.Dom.isElement, this.root);
        if (!prn || !dom_1.Dom.isEmpty(prn)) {
            return;
        }
        var neighbor = helpers_2.getNeighbor(fakeNode, backspace, this.root);
        do {
            if (prn && dom_1.Dom.isEmpty(prn) && !dom_1.Dom.isCell(prn, this.j.ew)) {
                dom_1.Dom.after(prn, fakeNode);
                var tmp = dom_1.Dom.closest(prn, function (n) { return dom_1.Dom.isElement(n) && n !== prn; }, this.root);
                dom_1.Dom.safeRemove(prn);
                found = true;
                prn = tmp;
            }
            else {
                break;
            }
        } while (prn);
        if (found && this.checkJoinTwoLists(fakeNode, backspace)) {
            return true;
        }
        if (neighbor) {
            setCursorIn(neighbor, !backspace);
        }
        else {
            setCursorBefore(fakeNode);
        }
        return found || undefined;
    };
    Delete.prototype.checkJoinTwoLists = function (fakeNode, backspace) {
        var next = dom_1.Dom.getNormalSibling(fakeNode, backspace), prev = dom_1.Dom.getNormalSibling(fakeNode, !backspace);
        if (!dom_1.Dom.closest(fakeNode, dom_1.Dom.isElement, this.root) &&
            dom_1.Dom.isTag(next, ['ul', 'ol']) &&
            dom_1.Dom.isTag(prev, ['ul', 'ol']) &&
            dom_1.Dom.isTag(next.firstElementChild, 'li') &&
            dom_1.Dom.isTag(prev.firstElementChild, 'li')) {
            var _a = this.j.s, setCursorBefore = _a.setCursorBefore, setCursorAfter = _a.setCursorAfter;
            var target = next.firstElementChild, second = prev.firstElementChild;
            helpers_1.call(!backspace ? dom_1.Dom.append : dom_1.Dom.prepend, second, fakeNode);
            this.checkJoinNeighbors(fakeNode, backspace);
            helpers_1.call(backspace ? dom_1.Dom.append : dom_1.Dom.prepend, target, fakeNode);
            helpers_1.call(backspace ? setCursorBefore : setCursorAfter, fakeNode);
            return true;
        }
    };
    Delete.prototype.checkRemoveEmptyNeighbor = function (fakeNode, backspace) {
        var parent = dom_1.Dom.closest(fakeNode, dom_1.Dom.isElement, this.root);
        if (!parent) {
            return;
        }
        var neighbor = helpers_2.getNotSpaceSibling(parent, backspace);
        if (neighbor && dom_1.Dom.isEmpty(neighbor)) {
            dom_1.Dom.safeRemove(neighbor);
            this.j.s.setCursorBefore(fakeNode);
            return true;
        }
    };
    Delete.prototype.checkJoinNeighbors = function (fakeNode, backspace) {
        var parent = dom_1.Dom.closest(fakeNode, dom_1.Dom.isElement, this.root);
        if (!parent) {
            return;
        }
        var neighbor = helpers_2.getNotSpaceSibling(parent, backspace);
        this.j.s.setCursorBefore(fakeNode);
        if (parent &&
            neighbor &&
            parent.nodeName === neighbor.nodeName &&
            this.j.s.cursorInTheEdge(backspace, parent)) {
            dom_1.Dom.moveContent(parent, neighbor, !backspace);
            var next = void 0;
            do {
                next = helpers_2.getSibling(neighbor, !backspace);
                dom_1.Dom.safeRemove(next);
            } while (next !== parent);
            this.j.s.setCursorBefore(fakeNode);
            return true;
        }
        if (dom_1.Dom.isTag(parent, 'li') &&
            this.j.s.cursorInTheEdge(backspace, parent)) {
            helpers_1.call(backspace ? dom_1.Dom.before : dom_1.Dom.after, parent, fakeNode);
            var result = this.checkJoinNeighbors(fakeNode, backspace);
            helpers_1.call(!backspace ? dom_1.Dom.append : dom_1.Dom.prepend, parent, fakeNode);
            this.j.s.setCursorBefore(fakeNode);
            return result;
        }
    };
    Delete.prototype.checkRewrapListItem = function (fakeNode, backspace) {
        var _a;
        if (backspace) {
            var li = dom_1.Dom.closest(fakeNode, dom_1.Dom.isElement, this.root);
            if (dom_1.Dom.isTag(li, 'li') &&
                ((_a = li === null || li === void 0 ? void 0 : li.parentElement) === null || _a === void 0 ? void 0 : _a.firstElementChild) === li &&
                this.j.s.cursorInTheEdge(true, li)) {
                var ul = li.parentElement;
                var p = this.j.createInside.element(this.j.o.enterBlock);
                dom_1.Dom.before(ul, p);
                dom_1.Dom.moveContent(li, p);
                dom_1.Dom.safeRemove(li);
                if (dom_1.Dom.isEmpty(ul)) {
                    dom_1.Dom.safeRemove(ul);
                }
                this.j.s.setCursorBefore(fakeNode);
                return true;
            }
        }
    };
    return Delete;
}(plugin_1.Plugin));
exports.Delete = Delete;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.bold = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.controls.subscript = {
    tags: ['sub'],
    tooltip: 'subscript'
};
config_1.Config.prototype.controls.superscript = {
    tags: ['sup'],
    tooltip: 'superscript'
};
config_1.Config.prototype.controls.bold = {
    tagRegExp: /^(strong|b)$/i,
    tags: ['strong', 'b'],
    css: {
        'font-weight': ['bold', '700']
    },
    tooltip: 'Bold'
};
config_1.Config.prototype.controls.italic = {
    tagRegExp: /^(em|i)$/i,
    tags: ['em', 'i'],
    css: {
        'font-style': 'italic'
    },
    tooltip: 'Italic'
};
config_1.Config.prototype.controls.underline = {
    tagRegExp: /^(u)$/i,
    tags: ['u'],
    css: {
        'text-decoration': 'underline'
    },
    tooltip: 'Underline'
};
config_1.Config.prototype.controls.strikethrough = {
    tagRegExp: /^(s)$/i,
    tags: ['s'],
    css: {
        'text-decoration': 'line-through'
    },
    tooltip: 'Strike through'
};
function bold(editor) {
    var callBack = function (command) {
        var control = config_1.Config.defaultOptions.controls[command], cssOptions = tslib_1.__assign({}, control.css), cssRules = {};
        Object.keys(cssOptions).forEach(function (key) {
            cssRules[key] = helpers_1.isArray(cssOptions[key])
                ? cssOptions[key][0]
                : cssOptions[key];
        });
        editor.s.applyStyle(cssRules, {
            element: control.tags ? control.tags[0] : undefined
        });
        editor.e.fire('synchro');
        return false;
    };
    editor
        .registerCommand('bold', {
        exec: callBack,
        hotkeys: ['ctrl+b', 'cmd+b']
    })
        .registerCommand('italic', {
        exec: callBack,
        hotkeys: ['ctrl+i', 'cmd+i']
    })
        .registerCommand('underline', {
        exec: callBack,
        hotkeys: ['ctrl+u', 'cmd+u']
    })
        .registerCommand('strikethrough', {
        exec: callBack
    });
}
exports.bold = bold;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanHtml = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
config_1.Config.prototype.cleanHTML = {
    timeout: 300,
    removeEmptyElements: true,
    fillEmptyParagraph: true,
    replaceNBSP: true,
    replaceOldTags: {
        i: 'em',
        b: 'strong'
    },
    allowTags: false,
    denyTags: false
};
config_1.Config.prototype.controls.eraser = {
    command: 'removeFormat',
    tooltip: 'Clear Formatting'
};
var cleanHtml = (function (_super) {
    tslib_1.__extends(cleanHtml, _super);
    function cleanHtml() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onChange = function () {
            if (!_this.allowEdit()) {
                return;
            }
            var editor = _this.j;
            var current = editor.s.current();
            var replaceOldTags = editor.o.cleanHTML.replaceOldTags;
            if (replaceOldTags && current) {
                var tags = Object.keys(replaceOldTags);
                if (editor.s.isCollapsed()) {
                    var oldParent = modules_1.Dom.closest(current, tags, editor.editor);
                    if (oldParent) {
                        var selInfo = editor.s.save(), tagName = replaceOldTags[oldParent.nodeName.toLowerCase()] ||
                            replaceOldTags[oldParent.nodeName];
                        modules_1.Dom.replace(oldParent, tagName, editor.createInside, true, false);
                        editor.s.restore(selInfo);
                    }
                }
            }
            var node = null;
            if (editor.editor.firstChild) {
                node = editor.editor.firstChild;
            }
            var remove = [];
            var work = _this.checkNode(node, current, remove);
            remove.forEach(modules_1.Dom.safeRemove);
            if (remove.length || work) {
                editor.events && editor.e.fire('syncho');
            }
        };
        _this.checkNode = function (nodeElm, current, remove) {
            var work = false;
            if (!nodeElm) {
                return work;
            }
            if (_this.isRemovableNode(nodeElm, current)) {
                remove.push(nodeElm);
                return _this.checkNode(nodeElm.nextSibling, current, remove);
            }
            if (_this.j.o.cleanHTML.fillEmptyParagraph &&
                modules_1.Dom.isBlock(nodeElm, _this.j.ew) &&
                modules_1.Dom.isEmpty(nodeElm, /^(img|svg|canvas|input|textarea|form|br)$/)) {
                var br = _this.j.createInside.element('br');
                nodeElm.appendChild(br);
                work = true;
            }
            var allow = _this.allowTagsHash;
            if (allow && allow[nodeElm.nodeName] !== true) {
                var attrs = nodeElm.attributes;
                if (attrs && attrs.length) {
                    var removeAttrs = [];
                    for (var i = 0; i < attrs.length; i += 1) {
                        var attr = allow[nodeElm.nodeName][attrs[i].name];
                        if (!attr || (attr !== true && attr !== attrs[i].value)) {
                            removeAttrs.push(attrs[i].name);
                        }
                    }
                    if (removeAttrs.length) {
                        work = true;
                    }
                    removeAttrs.forEach(function (attr) {
                        nodeElm.removeAttribute(attr);
                    });
                }
            }
            work = _this.checkNode(nodeElm.firstChild, current, remove) || work;
            work = _this.checkNode(nodeElm.nextSibling, current, remove) || work;
            return work;
        };
        _this.allowTagsHash = cleanHtml.getHash(_this.j.o.cleanHTML.allowTags);
        _this.denyTagsHash = cleanHtml.getHash(_this.j.o.cleanHTML.denyTags);
        _this.onKeyUpCleanUp = function () {
            var editor = _this.j;
            if (!_this.allowEdit()) {
                return;
            }
            var currentNode = editor.s.current();
            if (currentNode) {
                var currentParagraph = modules_1.Dom.up(currentNode, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor);
                if (currentParagraph) {
                    modules_1.Dom.all(currentParagraph, function (node) {
                        if (node && modules_1.Dom.isText(node)) {
                            if (node.nodeValue !== null &&
                                constants_1.INVISIBLE_SPACE_REG_EXP().test(node.nodeValue) &&
                                node.nodeValue.replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '').length !== 0) {
                                node.nodeValue = node.nodeValue.replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '');
                                if (node === currentNode &&
                                    editor.s.isCollapsed()) {
                                    editor.s.setCursorAfter(node);
                                }
                            }
                        }
                    });
                }
            }
        };
        _this.beforeCommand = function (command) {
            if (command.toLowerCase() === 'removeformat') {
                _this.onRemoveFormat();
                return false;
            }
        };
        _this.afterCommand = function (command) {
            if (command.toLowerCase() === 'inserthorizontalrule') {
                _this.onInsertHorizontalLine();
                return;
            }
        };
        _this.cleanNode = function (elm, onlyRemoveFont) {
            if (onlyRemoveFont === void 0) { onlyRemoveFont = false; }
            switch (elm.nodeType) {
                case Node.ELEMENT_NODE:
                    modules_1.Dom.each(elm, function (child) {
                        _this.cleanNode(child, onlyRemoveFont);
                    });
                    if (modules_1.Dom.isTag(elm, 'font')) {
                        modules_1.Dom.unwrap(elm);
                    }
                    else if (!onlyRemoveFont) {
                        Array.from(elm.attributes).forEach(function (attr) {
                            if (['src', 'href', 'rel', 'content'].indexOf(attr.name.toLowerCase()) === -1) {
                                elm.removeAttribute(attr.name);
                            }
                        });
                        helpers_1.normalizeNode(elm);
                    }
                    break;
                case Node.TEXT_NODE:
                    if (!onlyRemoveFont &&
                        _this.j.o.cleanHTML.replaceNBSP &&
                        modules_1.Dom.isText(elm) &&
                        elm.nodeValue !== null &&
                        elm.nodeValue.match(constants_1.SPACE_REG_EXP())) {
                        elm.nodeValue = elm.nodeValue
                            .replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '')
                            .replace(constants_1.SPACE_REG_EXP(), ' ');
                    }
                    break;
                default:
                    modules_1.Dom.safeRemove(elm);
            }
        };
        return _this;
    }
    cleanHtml.prototype.afterInit = function (jodit) {
        jodit.e
            .off('.cleanHtml')
            .on('change.cleanHtml afterSetMode.cleanHtml afterInit.cleanHtml mousedown.cleanHtml keydown.cleanHtml', jodit.async.debounce(this.onChange, jodit.o.cleanHTML.timeout))
            .on('keyup.cleanHtml', this.onKeyUpCleanUp)
            .on('beforeCommand.cleanHtml', this.beforeCommand)
            .on('afterCommand.cleanHtml', this.afterCommand);
    };
    cleanHtml.prototype.allowEdit = function () {
        return !(this.j.isInDestruct ||
            !this.j.isEditorMode() ||
            this.j.getReadOnly());
    };
    cleanHtml.getHash = function (tags) {
        var attributesReg = /([^\[]*)\[([^\]]+)]/;
        var seperator = /[\s]*,[\s]*/, attrReg = /^(.*)[\s]*=[\s]*(.*)$/;
        var tagsHash = {};
        if (helpers_1.isString(tags)) {
            tags.split(seperator).map(function (elm) {
                elm = helpers_1.trim(elm);
                var attr = attributesReg.exec(elm), allowAttributes = {}, attributeMap = function (attrName) {
                    attrName = helpers_1.trim(attrName);
                    var val = attrReg.exec(attrName);
                    if (val) {
                        allowAttributes[val[1]] = val[2];
                    }
                    else {
                        allowAttributes[attrName] = true;
                    }
                };
                if (attr) {
                    var attr2 = attr[2].split(seperator);
                    if (attr[1]) {
                        attr2.forEach(attributeMap);
                        tagsHash[attr[1].toUpperCase()] = allowAttributes;
                    }
                }
                else {
                    tagsHash[elm.toUpperCase()] = true;
                }
            });
            return tagsHash;
        }
        if (tags) {
            Object.keys(tags).forEach(function (tagName) {
                tagsHash[tagName.toUpperCase()] = tags[tagName];
            });
            return tagsHash;
        }
        return false;
    };
    cleanHtml.prototype.onInsertHorizontalLine = function () {
        var _this = this;
        var hr = this.j.editor.querySelector('hr[id=null]');
        if (hr) {
            var node = modules_1.Dom.next(hr, function (node) { return modules_1.Dom.isBlock(node, _this.j.ew); }, this.j.editor, false);
            if (!node) {
                node = this.j.createInside.element(this.j.o.enter);
                if (node) {
                    modules_1.Dom.after(hr, node);
                }
            }
            this.j.s.setCursorIn(node);
        }
    };
    cleanHtml.prototype.onRemoveFormat = function () {
        var _this = this;
        var sel = this.j.selection;
        var current = sel.current();
        if (!current) {
            return;
        }
        var up = function (node) {
            return node && modules_1.Dom.up(node, modules_1.Dom.isInlineBlock, _this.j.editor);
        };
        var parentNode = up(current), anotherParent = parentNode;
        while (anotherParent) {
            anotherParent = up(anotherParent.parentNode);
            if (anotherParent) {
                parentNode = anotherParent;
            }
        }
        var collapsed = sel.isCollapsed();
        var range = sel.range;
        var fragment = null;
        if (!collapsed) {
            fragment = range.extractContents();
        }
        if (parentNode) {
            var tmp = this.j.createInside.text(constants_1.INVISIBLE_SPACE);
            range.insertNode(tmp);
            var insideParent = modules_1.Dom.isOrContains(parentNode, tmp, true);
            modules_1.Dom.safeRemove(tmp);
            range.collapse(true);
            if (insideParent &&
                parentNode.parentNode &&
                parentNode.parentNode !== fragment) {
                var second = this.j.s.splitSelection(parentNode);
                this.j.s.setCursorAfter(second || parentNode);
                if (modules_1.Dom.isEmpty(parentNode)) {
                    modules_1.Dom.safeRemove(parentNode);
                }
            }
        }
        if (fragment) {
            sel.insertNode(this.cleanFragment(fragment));
        }
    };
    cleanHtml.prototype.cleanFragment = function (fragment) {
        var _this = this;
        modules_1.Dom.each(fragment, function (node) {
            if (modules_1.Dom.isElement(node) && constants_1.IS_INLINE.test(node.nodeName)) {
                _this.cleanFragment(node);
                modules_1.Dom.unwrap(node);
            }
        });
        return fragment;
    };
    cleanHtml.prototype.isRemovableNode = function (node, current) {
        var _this = this;
        var allow = this.allowTagsHash;
        if (!modules_1.Dom.isText(node) &&
            ((allow && !allow[node.nodeName]) ||
                (this.denyTagsHash && this.denyTagsHash[node.nodeName]))) {
            return true;
        }
        if (current &&
            modules_1.Dom.isTag(node, 'br') &&
            cleanHtml.hasNotEmptyTextSibling(node) &&
            !cleanHtml.hasNotEmptyTextSibling(node, true) &&
            modules_1.Dom.up(node, function (node) { return modules_1.Dom.isBlock(node, _this.j.ew); }, this.j.editor) !==
                modules_1.Dom.up(current, function (node) { return modules_1.Dom.isBlock(node, _this.j.ew); }, this.j.editor)) {
            return true;
        }
        return (this.j.o.cleanHTML.removeEmptyElements &&
            current !== null &&
            modules_1.Dom.isElement(node) &&
            node.nodeName.match(constants_1.IS_INLINE) !== null &&
            !this.j.s.isMarker(node) &&
            helpers_1.trim(node.innerHTML).length === 0 &&
            !modules_1.Dom.isOrContains(node, current));
    };
    cleanHtml.hasNotEmptyTextSibling = function (node, next) {
        if (next === void 0) { next = false; }
        var prev = next ? node.nextSibling : node.previousSibling;
        while (prev) {
            if (modules_1.Dom.isElement(prev) || !modules_1.Dom.isEmptyTextNode(prev)) {
                return true;
            }
            prev = next ? prev.nextSibling : prev.previousSibling;
        }
        return false;
    };
    cleanHtml.prototype.beforeDestruct = function (jodit) {
        this.j.e.off('.cleanHtml');
    };
    return cleanHtml;
}(plugin_1.Plugin));
exports.cleanHtml = cleanHtml;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrapTextNodes = void 0;
var tslib_1 = __webpack_require__(0);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var checker_1 = __webpack_require__(5);
var WrapTextNodes = (function (_super) {
    tslib_1.__extends(WrapTextNodes, _super);
    function WrapTextNodes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WrapTextNodes.prototype.afterInit = function (jodit) {
        if (jodit.o.enter.toLowerCase() === 'br') {
            return;
        }
        jodit.e.on('afterInit.wtn postProcessSetEditorValue.wtn', function () {
            if (!jodit.isEditorMode()) {
                return;
            }
            var child = jodit.editor.firstChild, isChanged = false;
            var isNotClosed = function (n) {
                return dom_1.Dom.isElement(n) &&
                    !(dom_1.Dom.isBlock(n, jodit.ew) || dom_1.Dom.isTag(n, ['hr']));
            }, isSuitableStart = function (n) {
                return (dom_1.Dom.isText(n) &&
                    checker_1.isString(n.nodeValue) &&
                    /[^\s]/.test(n.nodeValue)) ||
                    isNotClosed(n);
            };
            var isSuitable = function (n) {
                return dom_1.Dom.isText(n) || isNotClosed(n);
            };
            var selInfo = null;
            while (child) {
                if (isSuitableStart(child)) {
                    if (!isChanged) {
                        selInfo = jodit.s.save();
                    }
                    isChanged = true;
                    var box_1 = jodit.createInside.element(jodit.o.enter);
                    dom_1.Dom.before(child, box_1);
                    while (child && isSuitable(child)) {
                        var next = child.nextSibling;
                        box_1.appendChild(child);
                        child = next;
                    }
                    box_1.normalize();
                }
                child = child && child.nextSibling;
            }
            if (isChanged) {
                jodit.s.restore(selInfo);
                if (jodit.e.current === 'afterInit') {
                    jodit.e.fire('internalChange');
                }
            }
        });
    };
    WrapTextNodes.prototype.beforeDestruct = function (jodit) {
        jodit.e.off('.wtn');
    };
    return WrapTextNodes;
}(plugin_1.Plugin));
exports.WrapTextNodes = WrapTextNodes;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.pasteStorage = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(229);
var constants_1 = __webpack_require__(3);
var dialog_1 = __webpack_require__(14);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var pasteStorage = (function (_super) {
    tslib_1.__extends(pasteStorage, _super);
    function pasteStorage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentIndex = 0;
        _this.list = [];
        _this.container = null;
        _this.listBox = null;
        _this.previewBox = null;
        _this.dialog = null;
        _this.paste = function () {
            _this.j.s.focus();
            _this.j.s.insertHTML(_this.list[_this.currentIndex]);
            if (_this.currentIndex !== 0) {
                var buffer = _this.list[0];
                _this.list[0] = _this.list[_this.currentIndex];
                _this.list[_this.currentIndex] = buffer;
            }
            _this.dialog && _this.dialog.close();
            _this.j.setEditorValue();
        };
        _this.onKeyDown = function (e) {
            var index = _this.currentIndex;
            if ([constants_1.KEY_UP, constants_1.KEY_DOWN, constants_1.KEY_ENTER].indexOf(e.key) === -1) {
                return;
            }
            if (e.key === constants_1.KEY_UP) {
                if (index === 0) {
                    index = _this.list.length - 1;
                }
                else {
                    index -= 1;
                }
            }
            if (e.key === constants_1.KEY_DOWN) {
                if (index === _this.list.length - 1) {
                    index = 0;
                }
                else {
                    index += 1;
                }
            }
            if (e.key === constants_1.KEY_ENTER) {
                _this.paste();
                return;
            }
            if (index !== _this.currentIndex) {
                _this.selectIndex(index);
            }
            e.stopImmediatePropagation();
            e.preventDefault();
        };
        _this.selectIndex = function (index) {
            if (_this.listBox) {
                Array.from(_this.listBox.childNodes).forEach(function (a, i) {
                    a.classList.remove('jodit_active');
                    if (index === i && _this.previewBox) {
                        a.classList.add('jodit_active');
                        _this.previewBox.innerHTML = _this.list[index];
                        a.focus();
                    }
                });
            }
            _this.currentIndex = index;
        };
        _this.showDialog = function () {
            if (_this.list.length < 2) {
                return;
            }
            _this.dialog || _this.createDialog();
            if (_this.listBox) {
                _this.listBox.innerHTML = '';
            }
            if (_this.previewBox) {
                _this.previewBox.innerHTML = '';
            }
            _this.list.forEach(function (html, index) {
                var a = _this.j.c.element('a');
                a.textContent =
                    index + 1 + '. ' + html.replace(constants_1.SPACE_REG_EXP(), '');
                _this.j.e.on(a, 'keydown', _this.onKeyDown);
                helpers_1.attr(a, 'href', 'javascript:void(0)');
                helpers_1.attr(a, 'data-index', index.toString());
                helpers_1.attr(a, 'tab-index', '-1');
                _this.listBox && _this.listBox.appendChild(a);
            });
            _this.dialog && _this.dialog.open();
            _this.j.async.setTimeout(function () {
                _this.selectIndex(0);
            }, 100);
        };
        return _this;
    }
    pasteStorage.prototype.createDialog = function () {
        var _this = this;
        this.dialog = new dialog_1.Dialog({
            language: this.j.o.language
        });
        var pasteButton = this.j.c.fromHTML('<a href="javascript:void(0)" style="float:right;" class="jodit-button">' +
            '<span>' +
            this.j.i18n('Paste') +
            '</span>' +
            '</a>');
        this.j.e.on(pasteButton, 'click', this.paste);
        var cancelButton = this.j.c.fromHTML('<a href="javascript:void(0)" style="float:right; margin-right: 10px;" class="jodit-button">' +
            '<span>' +
            this.j.i18n('Cancel') +
            '</span>' +
            '</a>');
        this.j.e.on(cancelButton, 'click', this.dialog.close);
        this.container = this.j.c.div();
        this.container.classList.add('jodit-paste-storage');
        this.listBox = this.j.c.div();
        this.previewBox = this.j.c.div();
        this.container.appendChild(this.listBox);
        this.container.appendChild(this.previewBox);
        this.dialog.setHeader(this.j.i18n('Choose Content to Paste'));
        this.dialog.setContent(this.container);
        this.dialog.setFooter([pasteButton, cancelButton]);
        this.j.e.on(this.listBox, 'click dblclick', function (e) {
            var a = e.target;
            if (dom_1.Dom.isTag(a, 'a') && a.hasAttribute('data-index')) {
                _this.selectIndex(parseInt(helpers_1.attr(a, '-index') || '0', 10));
            }
            if (e.type === 'dblclick') {
                _this.paste();
            }
            return false;
        });
    };
    pasteStorage.prototype.afterInit = function () {
        var _this = this;
        this.j.e
            .off('afterCopy.paste-storage')
            .on('afterCopy.paste-storage', function (html) {
            if (_this.list.indexOf(html) !== -1) {
                _this.list.splice(_this.list.indexOf(html), 1);
            }
            _this.list.unshift(html);
            if (_this.list.length > 5) {
                _this.list.length = 5;
            }
        });
        this.j.registerCommand('showPasteStorage', {
            exec: this.showDialog,
            hotkeys: ['ctrl+shift+v', 'cmd+shift+v']
        });
    };
    pasteStorage.prototype.beforeDestruct = function () {
        this.dialog && this.dialog.destruct();
        dom_1.Dom.safeRemove(this.previewBox);
        dom_1.Dom.safeRemove(this.listBox);
        dom_1.Dom.safeRemove(this.container);
        this.container = null;
        this.listBox = null;
        this.previewBox = null;
        this.dialog = null;
        this.list = [];
    };
    return pasteStorage;
}(plugin_1.Plugin));
exports.pasteStorage = pasteStorage;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var pluginKey = 'copyformat';
var copyStyles = [
    'fontWeight',
    'fontStyle',
    'fontSize',
    'color',
    'margin',
    'padding',
    'borderWidth',
    'borderStyle',
    'borderColor',
    'borderRadius',
    'backgroundColor',
    'textDecorationLine',
    'fontFamily'
];
var getStyle = function (editor, key, box, defaultStyles) {
    var result = helpers_1.css(box, key);
    if (result === defaultStyles[key]) {
        if (box.parentNode &&
            box !== editor.editor &&
            box.parentNode !== editor.editor) {
            result = getStyle(editor, key, box.parentNode, defaultStyles);
        }
        else {
            result = undefined;
        }
    }
    return result;
};
var getStyles = function (editor, box, defaultStyles) {
    var result = {};
    if (box) {
        copyStyles.forEach(function (key) {
            result[key] = getStyle(editor, key, box, defaultStyles);
            if (key.match(/border(Style|Color)/) && !result.borderWidth) {
                result[key] = undefined;
            }
        });
    }
    return result;
};
config_1.Config.prototype.controls.copyformat = {
    exec: function (editor, current, _a) {
        var button = _a.button;
        if (!current) {
            return;
        }
        if (editor.buffer.exists(pluginKey)) {
            editor.buffer.delete(pluginKey);
            editor.e.off(editor.editor, 'mouseup.' + pluginKey);
        }
        else {
            var defaultStyles_1 = {}, box_1 = dom_1.Dom.up(current, function (elm) { return elm && !dom_1.Dom.isText(elm); }, editor.editor) || editor.editor;
            var ideal_1 = editor.createInside.span();
            editor.editor.appendChild(ideal_1);
            copyStyles.forEach(function (key) {
                defaultStyles_1[key] = helpers_1.css(ideal_1, key);
            });
            if (ideal_1 !== editor.editor) {
                dom_1.Dom.safeRemove(ideal_1);
            }
            var format_1 = getStyles(editor, box_1, defaultStyles_1);
            var onMouseUp = function () {
                editor.buffer.delete(pluginKey);
                var currentNode = editor.s.current();
                if (currentNode) {
                    if (dom_1.Dom.isTag(currentNode, 'img')) {
                        helpers_1.css(currentNode, format_1);
                    }
                    else {
                        editor.s.applyStyle(format_1);
                    }
                }
                editor.e.off(editor.editor, 'mouseup.' + pluginKey);
            };
            editor.e.on(editor.editor, 'mouseup.' + pluginKey, onMouseUp);
            editor.buffer.set(pluginKey, true);
        }
        button.update();
    },
    isActive: function (editor) { return editor.buffer.exists(pluginKey); },
    tooltip: 'Paint format'
};


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.color = void 0;
var config_1 = __webpack_require__(4);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var widget_1 = __webpack_require__(18);
config_1.Config.prototype.controls.brush = {
    update: function (button) {
        var color = helpers_1.dataBind(button, 'color');
        var editor = button.j;
        var update = function (key, value) {
            if (value && value !== helpers_1.css(editor.editor, key).toString()) {
                button.state.icon.fill = value;
                return;
            }
        };
        if (color) {
            var mode = helpers_1.dataBind(button, 'color');
            update(mode === 'color' ? mode : 'background-color', color);
            return;
        }
        var current = editor.s.current();
        if (current && !button.state.disabled) {
            var currentBpx = modules_1.Dom.closest(current, function (elm) {
                return (modules_1.Dom.isBlock(elm, editor.ew) ||
                    (elm && modules_1.Dom.isElement(elm)));
            }, editor.editor) || editor.editor;
            update('color', helpers_1.css(currentBpx, 'color').toString());
            update('background-color', helpers_1.css(currentBpx, 'background-color').toString());
        }
        button.state.icon.fill = '';
        button.state.activated = false;
    },
    popup: function (editor, current, self, close, button) {
        var colorHEX = '', bg_color = '', tabs = [], currentElement = null;
        if (current &&
            current !== editor.editor &&
            modules_1.Dom.isNode(current, editor.ew)) {
            if (modules_1.Dom.isElement(current)) {
                currentElement = current;
            }
            modules_1.Dom.up(current, function (node) {
                if (modules_1.Dom.isHTMLElement(node, editor.ew)) {
                    var color_1 = helpers_1.css(node, 'color', undefined, true), background = helpers_1.css(node, 'background-color', undefined, true);
                    if (color_1) {
                        colorHEX = color_1.toString();
                        return true;
                    }
                    if (background) {
                        bg_color = background.toString();
                        return true;
                    }
                }
            }, editor.editor);
        }
        var backgroundTag = widget_1.ColorPickerWidget(editor, function (value) {
            if (!currentElement) {
                editor.execCommand('background', false, value);
            }
            else {
                currentElement.style.backgroundColor = value;
            }
            helpers_1.dataBind(button, 'color', value);
            helpers_1.dataBind(button, 'color-mode', 'background');
            close();
        }, bg_color);
        var colorTab = widget_1.ColorPickerWidget(editor, function (value) {
            if (!currentElement) {
                editor.execCommand('forecolor', false, value);
            }
            else {
                currentElement.style.color = value;
            }
            helpers_1.dataBind(button, 'color', value);
            helpers_1.dataBind(button, 'color-mode', 'color');
            close();
        }, colorHEX);
        tabs = [
            {
                name: 'Background',
                content: backgroundTag
            },
            {
                name: 'Text',
                content: colorTab
            }
        ];
        if (editor.o.colorPickerDefaultTab !== 'background') {
            tabs = tabs.reverse();
        }
        return widget_1.TabsWidget(editor, tabs, currentElement);
    },
    exec: function (jodit, current, _a) {
        var button = _a.button;
        var mode = helpers_1.dataBind(button, 'color-mode'), color = helpers_1.dataBind(button, 'color');
        if (!mode) {
            return false;
        }
        if (current &&
            current !== jodit.editor &&
            modules_1.Dom.isNode(current, jodit.ew) &&
            modules_1.Dom.isElement(current)) {
            switch (mode) {
                case 'color':
                    current.style.color = color;
                    break;
                    current.style.backgroundColor = color;
                    break;
            }
        }
        else {
            jodit.execCommand(mode === 'background' ? mode : 'forecolor', false, color);
        }
    },
    tooltip: 'Fill color or set the text color'
};
function color(editor) {
    var callback = function (command, second, third) {
        var colorHEX = helpers_1.normalizeColor(third);
        switch (command) {
            case 'background':
                editor.s.applyStyle({
                    backgroundColor: !colorHEX ? '' : colorHEX
                });
                break;
            case 'forecolor':
                editor.s.applyStyle({
                    color: !colorHEX ? '' : colorHEX
                });
                break;
        }
        editor.setEditorValue();
        return false;
    };
    editor
        .registerCommand('forecolor', callback)
        .registerCommand('background', callback);
}
exports.color = color;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragAndDrop = void 0;
var tslib_1 = __webpack_require__(0);
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var index_1 = __webpack_require__(64);
var global_1 = __webpack_require__(12);
var DragAndDrop = (function (_super) {
    tslib_1.__extends(DragAndDrop, _super);
    function DragAndDrop() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isFragmentFromEditor = false;
        _this.isCopyMode = false;
        _this.startDragPoint = { x: 0, y: 0 };
        _this.draggable = null;
        _this.bufferRange = null;
        _this.onDragEnd = function () {
            if (_this.draggable) {
                dom_1.Dom.safeRemove(_this.draggable);
                _this.draggable = null;
            }
            _this.isCopyMode = false;
        };
        _this.onDrag = function (event) {
            if (_this.draggable) {
                if (!_this.draggable.parentNode) {
                    global_1.getContainer(_this.j, DragAndDrop).appendChild(_this.draggable);
                }
                _this.j.e.fire('hidePopup');
                helpers_1.css(_this.draggable, {
                    left: event.clientX + 20,
                    top: event.clientY + 20
                });
                _this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
                event.preventDefault();
                event.stopPropagation();
            }
        };
        _this.onDrop = function (event) {
            if (!event.dataTransfer ||
                !event.dataTransfer.files ||
                !event.dataTransfer.files.length) {
                if (!_this.isFragmentFromEditor && !_this.draggable) {
                    _this.j.e.fire('paste', event);
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
                var sel = _this.j.s.sel;
                var range = _this.bufferRange ||
                    (sel && sel.rangeCount ? sel.getRangeAt(0) : null);
                var fragment = null;
                if (!_this.draggable && range) {
                    fragment = _this.isCopyMode
                        ? range.cloneContents()
                        : range.extractContents();
                }
                else if (_this.draggable) {
                    if (_this.isCopyMode) {
                        var _a = helpers_1.attr(_this.draggable, '-is-file') === '1'
                            ? ['a', 'href']
                            : ['img', 'src'], tagName = _a[0], field = _a[1];
                        fragment = _this.j.createInside.element(tagName);
                        fragment.setAttribute(field, helpers_1.attr(_this.draggable, 'data-src') ||
                            helpers_1.attr(_this.draggable, 'src') ||
                            '');
                        if (tagName === 'a') {
                            fragment.textContent = helpers_1.attr(fragment, field) || '';
                        }
                    }
                    else {
                        fragment = helpers_1.dataBind(_this.draggable, 'target');
                    }
                }
                else if (_this.getText(event)) {
                    fragment = _this.j.createInside.fromHTML(_this.getText(event));
                }
                sel && sel.removeAllRanges();
                _this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
                if (fragment) {
                    _this.j.s.insertNode(fragment, false, false);
                    if (range && fragment.firstChild && fragment.lastChild) {
                        range.setStartBefore(fragment.firstChild);
                        range.setEndAfter(fragment.lastChild);
                        _this.j.s.selectRange(range);
                        _this.j.e.fire('synchro');
                    }
                    if (dom_1.Dom.isTag(fragment, 'img') && _this.j.events) {
                        _this.j.e.fire('afterInsertImage', fragment);
                    }
                }
                event.preventDefault();
                event.stopPropagation();
            }
            _this.isFragmentFromEditor = false;
        };
        _this.onDragStart = function (event) {
            var target = event.target;
            _this.onDragEnd();
            _this.isFragmentFromEditor = dom_1.Dom.isOrContains(_this.j.editor, target, true);
            _this.isCopyMode = _this.isFragmentFromEditor ? helpers_1.ctrlKey(event) : true;
            if (_this.isFragmentFromEditor) {
                var sel = _this.j.s.sel;
                var range = sel && sel.rangeCount ? sel.getRangeAt(0) : null;
                if (range) {
                    _this.bufferRange = range.cloneRange();
                }
            }
            else {
                _this.bufferRange = null;
            }
            _this.startDragPoint.x = event.clientX;
            _this.startDragPoint.y = event.clientY;
            if (dom_1.Dom.isElement(target) &&
                target.classList.contains('jodit-filebrowser__files-item')) {
                target = target.querySelector('img');
            }
            if (dom_1.Dom.isTag(target, 'img')) {
                _this.draggable = target.cloneNode(true);
                helpers_1.dataBind(_this.draggable, 'target', target);
                helpers_1.css(_this.draggable, {
                    'z-index': 100000000000000,
                    'pointer-events': 'none',
                    position: 'fixed',
                    display: 'inlin-block',
                    left: _this.startDragPoint.x,
                    top: _this.startDragPoint.y,
                    width: target.offsetWidth,
                    height: target.offsetHeight
                });
            }
        };
        _this.getText = function (event) {
            var dt = index_1.getDataTransfer(event);
            return dt ? dt.getData(constants_1.TEXT_HTML) || dt.getData(constants_1.TEXT_PLAIN) : null;
        };
        return _this;
    }
    DragAndDrop.prototype.afterInit = function () {
        this.j.e
            .off(window, '.DragAndDrop')
            .off('.DragAndDrop')
            .off([window, this.j.ed, this.j.editor], 'dragstart.DragAndDrop', this.onDragStart)
            .on(window, 'dragover.DragAndDrop', this.onDrag)
            .on([window, this.j.ed, this.j.editor], 'dragstart.DragAndDrop', this.onDragStart)
            .on('drop.DragAndDrop', this.onDrop)
            .on(window, 'dragend.DragAndDrop drop.DragAndDrop mouseup.DragAndDrop', this.onDragEnd);
    };
    DragAndDrop.prototype.beforeDestruct = function () {
        this.onDragEnd();
        this.j.e
            .off(window, '.DragAndDrop')
            .off('.DragAndDrop')
            .off([window, this.j.ed, this.j.editor], 'dragstart.DragAndDrop', this.onDragStart);
    };
    return DragAndDrop;
}(plugin_1.Plugin));
exports.DragAndDrop = DragAndDrop;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragAndDropElement = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var global_1 = __webpack_require__(12);
config_1.Config.prototype.draggableTags = ['img', 'a', 'jodit-media', 'jodit'];
var DragAndDropElement = (function (_super) {
    tslib_1.__extends(DragAndDropElement, _super);
    function DragAndDropElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragList = [];
        _this.isCopyMode = false;
        _this.draggable = null;
        _this.wasMoved = false;
        _this.diffStep = 10;
        _this.startX = 0;
        _this.startY = 0;
        _this.onDragStart = function (event) {
            var target = event.target, last = null;
            if (!_this.dragList.length) {
                return;
            }
            do {
                if (_this.dragList.includes(target.nodeName.toLowerCase())) {
                    if (!last ||
                        (target.firstChild === last && target.lastChild === last)) {
                        last = target;
                    }
                }
                target = target.parentNode;
            } while (target && target !== _this.j.editor);
            if (!last) {
                return;
            }
            _this.startX = event.clientX;
            _this.startY = event.clientY;
            _this.isCopyMode = helpers_1.ctrlKey(event);
            _this.onDragEnd();
            _this.draggable = last.cloneNode(true);
            helpers_1.dataBind(_this.draggable, 'target', last);
            _this.j.e.on(_this.j.editor, 'mousemove touchmove', _this.onDrag);
        };
        _this.onDrag = _this.j.async.throttle(function (event) {
            if (!_this.draggable) {
                return;
            }
            var x = event.clientX, y = event.clientY;
            if (Math.sqrt(Math.pow(x - _this.startX, 2) + Math.pow(y - _this.startY, 2)) < _this.diffStep) {
                return;
            }
            _this.wasMoved = true;
            _this.j.e.fire('hidePopup hideResizer');
            if (!_this.draggable.parentNode) {
                helpers_1.css(_this.draggable, {
                    zIndex: 10000000000000,
                    pointerEvents: 'none',
                    position: 'fixed',
                    display: 'inline-block',
                    left: event.clientX,
                    top: event.clientY,
                    width: _this.draggable.offsetWidth,
                    height: _this.draggable.offsetHeight
                });
                global_1.getContainer(_this.j, DragAndDropElement).appendChild(_this.draggable);
            }
            helpers_1.css(_this.draggable, {
                left: event.clientX,
                top: event.clientY
            });
            _this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
        }, _this.j.defaultTimeout);
        _this.onDragEnd = function () {
            if (_this.isInDestruct) {
                return;
            }
            if (_this.draggable) {
                dom_1.Dom.safeRemove(_this.draggable);
                _this.draggable = null;
                _this.wasMoved = false;
                _this.j.e.off(_this.j.editor, 'mousemove touchmove', _this.onDrag);
            }
        };
        _this.onDrop = function () {
            if (!_this.draggable || !_this.wasMoved) {
                _this.onDragEnd();
                return;
            }
            var fragment = helpers_1.dataBind(_this.draggable, 'target');
            _this.onDragEnd();
            if (_this.isCopyMode) {
                fragment = fragment.cloneNode(true);
            }
            var parentElement = fragment.parentElement;
            _this.j.s.insertNode(fragment, true, false);
            if (parentElement && dom_1.Dom.isEmpty(parentElement)) {
                dom_1.Dom.safeRemove(parentElement);
            }
            if (dom_1.Dom.isTag(fragment, 'img') && _this.j.e) {
                _this.j.e.fire('afterInsertImage', fragment);
            }
            _this.j.e.fire('synchro');
        };
        return _this;
    }
    DragAndDropElement.prototype.afterInit = function () {
        this.dragList = this.j.o.draggableTags
            ? helpers_1.splitArray(this.j.o.draggableTags)
                .filter(function (item) { return item; })
                .map(function (item) { return item.toLowerCase(); })
            : [];
        if (!this.dragList.length) {
            return;
        }
        this.j.e
            .on(this.j.editor, 'mousedown touchstart dragstart', this.onDragStart)
            .on('mouseup touchend', this.onDrop)
            .on([this.j.ew, this.ow], 'mouseup touchend', this.onDragEnd);
    };
    DragAndDropElement.prototype.beforeDestruct = function () {
        this.onDragEnd();
        this.j.e
            .off(this.j.editor, 'mousemove touchmove', this.onDrag)
            .off(this.j.editor, 'mousedown touchstart dragstart', this.onDragStart)
            .off('mouseup touchend', this.onDrop)
            .off(window, 'mouseup touchend', this.onDragEnd);
    };
    return DragAndDropElement;
}(plugin_1.Plugin));
exports.DragAndDropElement = DragAndDropElement;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.enter = exports.insertParagraph = void 0;
var tslib_1 = __webpack_require__(0);
var consts = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var constants_1 = __webpack_require__(3);
exports.insertParagraph = function (editor, fake, wrapperTag, style) {
    var _a;
    var p = editor.createInside.element(wrapperTag), helper_node = editor.createInside.element('br');
    p.appendChild(helper_node);
    if (style && style.cssText) {
        p.setAttribute('style', style.cssText);
    }
    editor.s.insertNode(p, false, false);
    editor.s.setCursorBefore(helper_node);
    var range = editor.s.createRange();
    range.setStartBefore(wrapperTag.toLowerCase() !== 'br' ? helper_node : p);
    range.collapse(true);
    editor.s.selectRange(range);
    dom_1.Dom.safeRemove(fake);
    helpers_1.scrollIntoView(p, editor.editor, editor.ed);
    (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('synchro');
    return p;
};
var enter = (function (_super) {
    tslib_1.__extends(enter, _super);
    function enter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.brMode = false;
        _this.defaultTag = consts.PARAGRAPH;
        _this.checkWrapper = function () {
            if (!_this.j.isEditorMode() || true) {
                return;
            }
            var current = _this.j.s.current(false);
            var currentBox = _this.getBlockWrapper(current);
            if (!currentBox) {
                _this.wrapText(current);
            }
        };
        return _this;
    }
    enter.prototype.afterInit = function (editor) {
        var _this = this;
        this.defaultTag = editor.o.enter.toLowerCase();
        this.brMode = this.defaultTag === consts.BR.toLowerCase();
        if (!editor.o.enterBlock) {
            editor.o.enterBlock = this.brMode
                ? consts.PARAGRAPH
                : this.defaultTag;
        }
        editor.e
            .off('.enter')
            .on('change.enter', this.checkWrapper)
            .on('keydown.enter', function (event) {
            if (event.key === consts.KEY_ENTER) {
                var beforeEnter = editor.e.fire('beforeEnter', event);
                if (beforeEnter !== undefined) {
                    return beforeEnter;
                }
                if (!editor.s.isCollapsed()) {
                    editor.execCommand('Delete');
                }
                editor.s.focus();
                _this.onEnter(event);
                return false;
            }
        });
    };
    enter.prototype.onEnter = function (event) {
        var editor = this.j, sel = editor.selection, defaultTag = this.defaultTag;
        var current = sel.current(false);
        if (!current || current === editor.editor) {
            current = editor.createInside.text(constants_1.INVISIBLE_SPACE);
            sel.insertNode(current);
            sel.select(current);
        }
        var currentBox = this.getBlockWrapper(current);
        var isLi = dom_1.Dom.isTag(currentBox, 'li');
        if (!isLi && !this.checkBR(current, event.shiftKey)) {
            return false;
        }
        if (!currentBox && !this.hasPreviousBlock(current)) {
            currentBox = this.wrapText(current);
        }
        if (!currentBox || currentBox === current) {
            exports.insertParagraph(editor, null, isLi ? 'li' : defaultTag);
            return false;
        }
        if (!this.checkUnsplittableBox(currentBox)) {
            return false;
        }
        if (isLi && dom_1.Dom.isEmpty(currentBox)) {
            this.enterInsideEmptyLIelement(currentBox);
            return false;
        }
        var canSplit = currentBox.tagName.toLowerCase() === this.defaultTag || isLi;
        var cursorOnTheRight = sel.cursorOnTheRight(currentBox);
        var cursorOnTheLeft = sel.cursorOnTheLeft(currentBox);
        if ((!canSplit || dom_1.Dom.isEmpty(currentBox)) &&
            (cursorOnTheRight || cursorOnTheLeft)) {
            var fake = null;
            if (cursorOnTheRight) {
                fake = sel.setCursorAfter(currentBox);
            }
            else {
                fake = sel.setCursorBefore(currentBox);
            }
            exports.insertParagraph(editor, fake, this.defaultTag);
            if (cursorOnTheLeft && !cursorOnTheRight) {
                sel.setCursorIn(currentBox, true);
            }
            return;
        }
        sel.splitSelection(currentBox);
    };
    enter.prototype.getBlockWrapper = function (current, tagReg) {
        if (tagReg === void 0) { tagReg = consts.IS_BLOCK; }
        var node = current;
        var root = this.j.editor;
        do {
            if (!node || node === root) {
                break;
            }
            if (tagReg.test(node.nodeName)) {
                if (dom_1.Dom.isTag(node, 'li')) {
                    return node;
                }
                return (this.getBlockWrapper(node.parentNode, /^li$/i) ||
                    node);
            }
            node = node.parentNode;
        } while (node && node !== root);
        return null;
    };
    enter.prototype.checkBR = function (current, shiftKeyPressed) {
        var isMultyLineBlock = dom_1.Dom.closest(current, ['pre', 'blockquote'], this.j.editor);
        if (this.brMode ||
            (shiftKeyPressed && !isMultyLineBlock) ||
            (!shiftKeyPressed && isMultyLineBlock)) {
            var br = this.j.createInside.element('br');
            this.j.s.insertNode(br, true);
            helpers_1.scrollIntoView(br, this.j.editor, this.j.ed);
            return false;
        }
        return true;
    };
    enter.prototype.wrapText = function (current) {
        var _this = this;
        var needWrap = current;
        dom_1.Dom.up(needWrap, function (node) {
            if (node && node.hasChildNodes() && node !== _this.j.editor) {
                needWrap = node;
            }
        }, this.j.editor);
        var currentBox = dom_1.Dom.wrapInline(needWrap, this.j.o.enter, this.j);
        if (dom_1.Dom.isEmpty(currentBox)) {
            var helper_node = this.j.createInside.element('br');
            currentBox.appendChild(helper_node);
            this.j.s.setCursorBefore(helper_node);
        }
        return currentBox;
    };
    enter.prototype.hasPreviousBlock = function (current) {
        var editor = this.j;
        return Boolean(dom_1.Dom.prev(current, function (elm) {
            return dom_1.Dom.isBlock(elm, editor.ew) || dom_1.Dom.isImage(elm, editor.ew);
        }, editor.editor));
    };
    enter.prototype.checkUnsplittableBox = function (currentBox) {
        var editor = this.j, sel = editor.selection;
        if (!dom_1.Dom.canSplitBlock(currentBox, editor.ew)) {
            var br = editor.createInside.element('br');
            sel.insertNode(br, false);
            sel.setCursorAfter(br);
            return false;
        }
        return true;
    };
    enter.prototype.enterInsideEmptyLIelement = function (currentBox) {
        var fakeTextNode = null;
        var ul = dom_1.Dom.closest(currentBox, ['ol', 'ul'], this.j.editor);
        if (!ul) {
            return;
        }
        if (!dom_1.Dom.prev(currentBox, function (elm) { return dom_1.Dom.isTag(elm, 'li'); }, ul)) {
            fakeTextNode = this.j.s.setCursorBefore(ul);
        }
        else if (!dom_1.Dom.next(currentBox, function (elm) { return dom_1.Dom.isTag(elm, 'li'); }, ul)) {
            fakeTextNode = this.j.s.setCursorAfter(ul);
        }
        else {
            var leftRange = this.j.s.createRange();
            leftRange.setStartBefore(ul);
            leftRange.setEndAfter(currentBox);
            var fragment = leftRange.extractContents();
            if (ul.parentNode) {
                ul.parentNode.insertBefore(fragment, ul);
            }
            fakeTextNode = this.j.s.setCursorBefore(ul);
        }
        dom_1.Dom.safeRemove(currentBox);
        exports.insertParagraph(this.j, fakeTextNode, this.defaultTag);
        if (!helpers_1.$$('li', ul).length) {
            dom_1.Dom.safeRemove(ul);
        }
    };
    enter.prototype.beforeDestruct = function (editor) {
        editor.e.off('keydown.enter');
    };
    return enter;
}(plugin_1.Plugin));
exports.enter = enter;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMessages = void 0;
__webpack_require__(236);
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.showMessageErrors = true;
config_1.Config.prototype.showMessageErrorTime = 3000;
config_1.Config.prototype.showMessageErrorOffsetPx = 3;
function errorMessages(editor) {
    if (editor.o.showMessageErrors) {
        var height_1;
        var messagesBox_1 = editor.c.div('jodit_error_box_for_messages'), recalcOffsets_1 = function () {
            height_1 = 5;
            Array.from(messagesBox_1.childNodes).forEach(function (elm) {
                helpers_1.css(messagesBox_1, 'bottom', height_1 + 'px');
                height_1 +=
                    elm.offsetWidth + editor.o.showMessageErrorOffsetPx;
            });
        };
        editor.e
            .on('beforeDestruct', function () {
            dom_1.Dom.safeRemove(messagesBox_1);
        })
            .on('errorMessage', function (message, className, timeout) {
            editor.workplace.appendChild(messagesBox_1);
            var newmessage = editor.c.div('active ' + (className || ''), message);
            messagesBox_1.appendChild(newmessage);
            recalcOffsets_1();
            editor.async.setTimeout(function () {
                newmessage.classList.remove('active');
                editor.async.setTimeout(function () {
                    dom_1.Dom.safeRemove(newmessage);
                    recalcOffsets_1();
                }, 300);
            }, timeout || editor.o.showMessageErrorTime);
        });
    }
}
exports.errorMessages = errorMessages;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.font = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.controls.fontsize = {
    command: 'fontSize',
    data: {
        cssRule: 'font-size',
        normalize: function (v) { return v; }
    },
    list: [
        '8',
        '9',
        '10',
        '11',
        '12',
        '14',
        '16',
        '18',
        '24',
        '30',
        '36',
        '48',
        '60',
        '72',
        '96'
    ],
    exec: function (editor, event, _a) {
        var control = _a.control, button = _a.button;
        var key = "button" + control.command;
        var value = (control.args && control.args[0]) || helpers_1.dataBind(editor, key);
        if (helpers_1.isVoid(value)) {
            return false;
        }
        helpers_1.dataBind(editor, key, value);
        editor.execCommand(control.command, false, value || undefined);
    },
    childTemplate: function (editor, key, value) { return value; },
    tooltip: 'Font size',
    isChildActive: function (editor, control) {
        var _a, _b;
        var current = editor.s.current(), cssKey = ((_a = control.data) === null || _a === void 0 ? void 0 : _a.cssRule) || 'font-size', normalize = ((_b = control.data) === null || _b === void 0 ? void 0 : _b.normalize) || (function (v) { return v; });
        if (current) {
            var currentBpx = dom_1.Dom.closest(current, function (elm) {
                return (dom_1.Dom.isBlock(elm, editor.ew) ||
                    (elm && dom_1.Dom.isElement(elm)));
            }, editor.editor) || editor.editor;
            var value = helpers_1.css(currentBpx, cssKey);
            return Boolean(value &&
                control.args &&
                normalize(control.args[0].toString()) ===
                    normalize(value.toString()));
        }
        return false;
    }
};
config_1.Config.prototype.controls.font = tslib_1.__assign(tslib_1.__assign({}, config_1.Config.prototype.controls.fontsize), { command: 'fontname', list: {
        '': 'Default',
        'Helvetica,sans-serif': 'Helvetica',
        'Arial,Helvetica,sans-serif': 'Arial',
        'Georgia,serif': 'Georgia',
        'Impact,Charcoal,sans-serif': 'Impact',
        'Tahoma,Geneva,sans-serif': 'Tahoma',
        "'Times New Roman',Times,serif": 'Times New Roman',
        'Verdana,Geneva,sans-serif': 'Verdana'
    }, childTemplate: function (editor, key, value) {
        return "<span style=\"font-family: " + key + "!important;\">" + value + "</span>";
    }, data: {
        cssRule: 'font-family',
        normalize: function (v) {
            return v
                .toLowerCase()
                .replace(/['"]+/g, '')
                .replace(/[^a-z0-9]+/g, ',');
        }
    }, tooltip: 'Font family' });
function font(editor) {
    var callback = function (command, second, third) {
        switch (command) {
            case 'fontsize':
                editor.s.applyStyle({
                    fontSize: helpers_1.normalizeSize(third)
                });
                break;
            case 'fontname':
                editor.s.applyStyle({
                    fontFamily: third
                });
                break;
        }
        editor.e.fire('synchro');
        return false;
    };
    editor
        .registerCommand('fontsize', callback)
        .registerCommand('fontname', callback);
}
exports.font = font;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatBlock = void 0;
var config_1 = __webpack_require__(4);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.controls.paragraph = {
    command: 'formatBlock',
    update: function (button) {
        var editor = button.j, control = button.control, current = editor.s.current();
        if (current && editor.o.textIcons) {
            var currentBox = modules_1.Dom.closest(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor) || editor.editor, currentValue = currentBox.nodeName.toLowerCase(), list = control.list;
            if (button &&
                control.data &&
                control.data.currentValue !== currentValue &&
                list &&
                list[currentValue]) {
                if (editor.o.textIcons) {
                    button.state.text = currentValue;
                }
                else {
                    button.state.icon.name = currentValue;
                }
                control.data.currentValue = currentValue;
            }
        }
        return false;
    },
    exec: function (editor, event, _a) {
        var control = _a.control;
        var key = "button" + control.command;
        var value = (control.args && control.args[0]) || helpers_1.dataBind(editor, key);
        if (helpers_1.isVoid(value)) {
            return false;
        }
        helpers_1.dataBind(editor, key, value);
        editor.execCommand(control.command, false, value || undefined);
    },
    data: {
        currentValue: 'left'
    },
    list: {
        p: 'Normal',
        h1: 'Heading 1',
        h2: 'Heading 2',
        h3: 'Heading 3',
        h4: 'Heading 4',
        blockquote: 'Quote'
    },
    isChildActive: function (editor, control) {
        var current = editor.s.current();
        if (current) {
            var currentBox = modules_1.Dom.closest(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor);
            return Boolean(currentBox &&
                currentBox !== editor.editor &&
                control.args !== undefined &&
                currentBox.nodeName.toLowerCase() === control.args[0]);
        }
        return false;
    },
    isActive: function (editor, control) {
        var current = editor.s.current();
        if (current) {
            var currentBpx = modules_1.Dom.closest(current, function (node) { return modules_1.Dom.isBlock(node, editor.ew); }, editor.editor);
            return Boolean(currentBpx &&
                currentBpx !== editor.editor &&
                control.list !== undefined &&
                !modules_1.Dom.isTag(currentBpx, 'p') &&
                control.list[currentBpx.nodeName.toLowerCase()] !== undefined);
        }
        return false;
    },
    childTemplate: function (e, key, value) {
        return "<" + key + " style=\"margin:0;padding:0\"><span>" + e.i18n(value) + "</span></" + key + ">";
    },
    tooltip: 'Insert format block'
};
function formatBlock(editor) {
    editor.registerCommand('formatblock', function (command, second, third) {
        editor.s.applyStyle(undefined, {
            element: third
        });
        editor.setEditorValue();
        return false;
    });
}
exports.formatBlock = formatBlock;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fullsize = void 0;
__webpack_require__(240);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.fullsize = false;
config_1.Config.prototype.globalFullSize = true;
config_1.Config.prototype.controls.fullsize = {
    exec: function (editor) {
        editor.toggleFullSize();
    },
    update: function (button) {
        var editor = button.j, mode = editor.isFullSize ? 'shrink' : 'fullsize';
        button.state.activated = editor.isFullSize;
        if (editor.o.textIcons) {
            button.state.text = mode;
        }
        else {
            button.state.icon.name = mode;
        }
    },
    tooltip: 'Open editor in fullsize',
    mode: consts.MODE_SOURCE + consts.MODE_WYSIWYG
};
function fullsize(editor) {
    var shown = false, oldHeight = 0, oldWidth = 0, wasToggled = false;
    var resize = function () {
        if (editor.events) {
            if (shown) {
                oldHeight = helpers_1.css(editor.container, 'height');
                oldWidth = helpers_1.css(editor.container, 'width');
                helpers_1.css(editor.container, {
                    height: editor.ow.innerHeight,
                    width: editor.ow.innerWidth
                });
                wasToggled = true;
            }
            else if (wasToggled) {
                helpers_1.css(editor.container, {
                    height: oldHeight || 'auto',
                    width: oldWidth || 'auto'
                });
            }
        }
    }, toggle = function (enable) {
        var _a;
        if (!editor.container) {
            return;
        }
        if (enable === undefined) {
            enable = !editor.container.classList.contains('jodit_fullsize');
        }
        editor.o.fullsize = enable;
        shown = enable;
        editor.container.classList.toggle('jodit_fullsize', enable);
        if (editor.toolbar) {
            helpers_1.isJoditObject(editor) &&
                editor.toolbarContainer.appendChild(editor.toolbar.container);
            helpers_1.css(editor.toolbar.container, 'width', 'auto');
        }
        if (editor.o.globalFullSize) {
            var node = editor.container.parentNode;
            while (node && node.nodeType !== Node.DOCUMENT_NODE) {
                node.classList.toggle('jodit-fullsize_box', enable);
                node = node.parentNode;
            }
            resize();
        }
        (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('afterResize');
    };
    if (editor.o.globalFullSize) {
        editor.e.on(editor.ow, 'resize', resize);
    }
    editor.e
        .on('afterInit afterOpen', function () {
        var _a;
        editor.toggleFullSize((_a = editor === null || editor === void 0 ? void 0 : editor.options) === null || _a === void 0 ? void 0 : _a.fullsize);
    })
        .on('toggleFullSize', toggle)
        .on('beforeDestruct beforeClose', function () {
        toggle(false);
    })
        .on('beforeDestruct', function () {
        editor.events && editor.e.off(editor.ow, 'resize', resize);
    });
}
exports.fullsize = fullsize;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.hotkeys = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var plugin_1 = __webpack_require__(6);
var helpers_1 = __webpack_require__(1);
var constants_1 = __webpack_require__(3);
config_1.Config.prototype.commandToHotkeys = {
    removeFormat: ['ctrl+shift+m', 'cmd+shift+m'],
    insertOrderedList: ['ctrl+shift+7', 'cmd+shift+7'],
    insertUnorderedList: ['ctrl+shift+8, cmd+shift+8'],
    selectall: ['ctrl+a', 'cmd+a']
};
var hotkeys = (function (_super) {
    tslib_1.__extends(hotkeys, _super);
    function hotkeys() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onKeyPress = function (event) {
            var special = _this.specialKeys[event.which], character = (event.key || String.fromCharCode(event.which)).toLowerCase();
            var modif = [special || character];
            ['alt', 'ctrl', 'shift', 'meta'].forEach(function (specialKey) {
                if (event[specialKey + 'Key'] && special !== specialKey) {
                    modif.push(specialKey);
                }
            });
            return helpers_1.normalizeKeyAliases(modif.join('+'));
        };
        _this.specialKeys = {
            8: 'backspace',
            9: 'tab',
            10: 'return',
            13: 'return',
            16: 'shift',
            17: 'ctrl',
            18: 'alt',
            19: 'pause',
            20: 'capslock',
            27: 'esc',
            32: 'space',
            33: 'pageup',
            34: 'pagedown',
            35: 'end',
            36: 'home',
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down',
            45: 'insert',
            46: 'del',
            59: ';',
            61: '=',
            91: 'meta',
            96: '0',
            97: '1',
            98: '2',
            99: '3',
            100: '4',
            101: '5',
            102: '6',
            103: '7',
            104: '8',
            105: '9',
            106: '*',
            107: '+',
            109: '-',
            110: '.',
            111: '/',
            112: 'f1',
            113: 'f2',
            114: 'f3',
            115: 'f4',
            116: 'f5',
            117: 'f6',
            118: 'f7',
            119: 'f8',
            120: 'f9',
            121: 'f10',
            122: 'f11',
            123: 'f12',
            144: 'numlock',
            145: 'scroll',
            173: '-',
            186: ';',
            187: '=',
            188: ',',
            189: '-',
            190: '.',
            191: '/',
            192: '`',
            219: '[',
            220: '\\',
            221: ']',
            222: "'"
        };
        return _this;
    }
    hotkeys.prototype.afterInit = function (editor) {
        var _this = this;
        var commands = Object.keys(editor.o.commandToHotkeys);
        commands.forEach(function (commandName) {
            var shortcuts = editor.o.commandToHotkeys[commandName];
            if (shortcuts) {
                editor.registerHotkeyToCommand(shortcuts, commandName);
            }
        });
        var itIsHotkey = false;
        editor.e
            .off('.hotkeys')
            .on([editor.ow, editor.ew], 'keydown.hotkeys', function (e) {
            if (e.key === constants_1.KEY_ESC) {
                return _this.j.e.fire('escape', e);
            }
        })
            .on('keydown.hotkeys', function (event) {
            var shortcut = _this.onKeyPress(event);
            var resultOfFire = _this.j.e.fire(shortcut + '.hotkey', event.type);
            if (resultOfFire === false) {
                itIsHotkey = true;
                editor.e.stopPropagation('keydown');
                return false;
            }
        }, undefined, true)
            .on('keyup.hotkeys', function () {
            if (itIsHotkey) {
                itIsHotkey = false;
                editor.e.stopPropagation('keyup');
                return false;
            }
        }, undefined, true);
    };
    hotkeys.prototype.beforeDestruct = function (jodit) {
        if (jodit.events) {
            jodit.e.off('.hotkeys');
        }
    };
    return hotkeys;
}(plugin_1.Plugin));
exports.hotkeys = hotkeys;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.iframe = void 0;
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
var helpers_2 = __webpack_require__(1);
var constants_1 = __webpack_require__(3);
config_1.Config.prototype.iframeBaseUrl = '';
config_1.Config.prototype.iframeTitle = 'Jodit Editor';
config_1.Config.prototype.iframeDoctype = '<!DOCTYPE html>';
config_1.Config.prototype.iframeDefaultSrc = 'about:blank';
config_1.Config.prototype.iframeStyle =
    'html{' +
        'margin:0;' +
        'padding:0;' +
        'min-height: 100%;' +
        '}' +
        'body{' +
        'box-sizing:border-box;' +
        'font-size:13px;' +
        'line-height:1.6;' +
        'padding:10px;' +
        'margin:0;' +
        'background:transparent;' +
        'color:#000;' +
        'position:' +
        'relative;' +
        'z-index:2;' +
        'user-select:auto;' +
        'margin:0px;' +
        'overflow:auto;' +
        'outline:none;' +
        '}' +
        'table{' +
        'width:100%;' +
        'border:none;' +
        'border-collapse:collapse;' +
        'empty-cells: show;' +
        'max-width: 100%;' +
        '}' +
        'th,td{' +
        'padding: 2px 5px;' +
        'border:1px solid #ccc;' +
        '-webkit-user-select:text;' +
        '-moz-user-select:text;' +
        '-ms-user-select:text;' +
        'user-select:text' +
        '}' +
        'p{' +
        'margin-top:0;' +
        '}' +
        '.jodit_editor .jodit_iframe_wrapper{' +
        'display: block;' +
        'clear: both;' +
        'user-select: none;' +
        'position: relative;' +
        '}' +
        '.jodit_editor .jodit_iframe_wrapper:after {' +
        'position:absolute;' +
        'content:"";' +
        'z-index:1;' +
        'top:0;' +
        'left:0;' +
        'right: 0;' +
        'bottom: 0;' +
        'cursor: pointer;' +
        'display: block;' +
        'background: rgba(0, 0, 0, 0);' +
        '} ' +
        '.jodit_disabled{' +
        'user-select: none;' +
        '-o-user-select: none;' +
        '-moz-user-select: none;' +
        '-khtml-user-select: none;' +
        '-webkit-user-select: none;' +
        '-ms-user-select: none' +
        '}';
config_1.Config.prototype.iframeCSSLinks = [];
config_1.Config.prototype.editHTMLDocumentMode = false;
function iframe(editor) {
    var opt = editor.options;
    editor.e
        .on('afterSetMode', function () {
        if (editor.isEditorMode()) {
            editor.s.focus();
        }
    })
        .on('generateDocumentStructure.iframe', function (__doc, jodit) {
        var doc = __doc ||
            jodit.iframe
                .contentWindow.document;
        doc.open();
        doc.write(opt.iframeDoctype +
            ("<html dir=\"" + opt.direction + "\" class=\"jodit\" lang=\"" + helpers_1.defaultLanguage(opt.language) + "\">") +
            '<head>' +
            ("<title>" + opt.iframeTitle + "</title>") +
            (opt.iframeBaseUrl
                ? "<base href=\"" + opt.iframeBaseUrl + "\"/>"
                : '') +
            '</head>' +
            '<body class="jodit-wysiwyg"></body>' +
            '</html>');
        doc.close();
        if (opt.iframeCSSLinks) {
            opt.iframeCSSLinks.forEach(function (href) {
                var link = doc.createElement('link');
                link.setAttribute('rel', 'stylesheet');
                link.setAttribute('href', href);
                doc.head && doc.head.appendChild(link);
            });
        }
        if (opt.iframeStyle) {
            var style = doc.createElement('style');
            style.innerHTML = opt.iframeStyle;
            doc.head && doc.head.appendChild(style);
        }
    })
        .on('createEditor', function () {
        if (!opt.iframe) {
            return;
        }
        var iframe = editor.c.element('iframe');
        iframe.style.display = 'block';
        iframe.src = 'about:blank';
        iframe.className = 'jodit-wysiwyg_iframe';
        iframe.setAttribute('allowtransparency', 'true');
        iframe.setAttribute('tabindex', opt.tabIndex.toString());
        iframe.setAttribute('frameborder', '0');
        editor.workplace.appendChild(iframe);
        editor.iframe = iframe;
        var result = editor.e.fire('generateDocumentStructure.iframe', null, editor);
        var init = function () {
            if (!editor.iframe) {
                return;
            }
            var doc = editor.iframe.contentWindow.document;
            editor.editorWindow = editor.iframe.contentWindow;
            var docMode = opt.editHTMLDocumentMode;
            var toggleEditable = function () {
                helpers_1.attr(doc.body, 'contenteditable', (editor.getMode() !== constants_1.MODE_SOURCE &&
                    !editor.getReadOnly()) ||
                    null);
            };
            var clearMarkers = function (html) {
                var bodyReg = /<body.*<\/body>/im, bodyMarker = '{%%BODY%%}', body = bodyReg.exec(html);
                if (body) {
                    html = html
                        .replace(bodyReg, bodyMarker)
                        .replace(/<span([^>]*?)>(.*?)<\/span>/gim, '')
                        .replace(/&lt;span([^&]*?)&gt;(.*?)&lt;\/span&gt;/gim, '')
                        .replace(bodyMarker, body[0]
                        .replace(/(<body[^>]+?)min-height["'\s]*:[\s"']*[0-9]+(px|%)/im, '$1')
                        .replace(/(<body[^>]+?)([\s]*["'])?contenteditable["'\s]*=[\s"']*true["']?/im, '$1')
                        .replace(/<(style|script|span)[^>]+jodit[^>]+>.*?<\/\1>/g, ''))
                        .replace(/(class\s*=\s*)(['"])([^"']*)(jodit-wysiwyg|jodit)([^"']*\2)/g, '$1$2$3$5')
                        .replace(/(<[^<]+?)\sclass="[\s]*"/gim, '$1')
                        .replace(/(<[^<]+?)\sstyle="[\s;]*"/gim, '$1')
                        .replace(/(<[^<]+?)\sdir="[\s]*"/gim, '$1');
                }
                return html;
            };
            if (docMode) {
                var tag = editor.element.tagName;
                if (tag !== 'TEXTAREA' && tag !== 'INPUT') {
                    throw helpers_2.error('If enable `editHTMLDocumentMode` - source element should be INPUT or TEXTAREA');
                }
                editor.e
                    .on('beforeGetNativeEditorValue', function () {
                    return clearMarkers(editor.o.iframeDoctype +
                        doc.documentElement.outerHTML);
                })
                    .on('beforeSetNativeEditorValue', function (value) {
                    if (editor.isLocked) {
                        return false;
                    }
                    if (/<(html|body)/i.test(value)) {
                        var old = doc.documentElement.outerHTML;
                        if (clearMarkers(old) !==
                            clearMarkers(value)) {
                            doc.open();
                            doc.write(editor.o.iframeDoctype +
                                clearMarkers(value));
                            doc.close();
                            editor.editor = doc.body;
                            toggleEditable();
                        }
                    }
                    else {
                        doc.body.innerHTML = value;
                    }
                    return true;
                });
            }
            editor.editor = doc.body;
            editor.e.on('afterSetMode afterInit afterAddPlace', toggleEditable);
            if (opt.height === 'auto') {
                doc.documentElement &&
                    (doc.documentElement.style.overflowY = 'hidden');
                var resizeIframe = editor.async.throttle(function () {
                    if (editor.editor &&
                        editor.iframe &&
                        opt.height === 'auto') {
                        helpers_1.css(editor.iframe, 'height', editor.editor.offsetHeight);
                    }
                }, editor.defaultTimeout / 2);
                editor.e
                    .on('change afterInit afterSetMode resize', resizeIframe)
                    .on([editor.iframe, editor.ew, doc.documentElement], 'load', resizeIframe)
                    .on(doc, 'readystatechange DOMContentLoaded', resizeIframe);
            }
            if (doc.documentElement) {
                editor.e
                    .on(doc.documentElement, 'mousedown touchend', function () {
                    if (!editor.s.isFocused()) {
                        editor.s.focus();
                        if (editor.editor === doc.body) {
                            editor.s.setCursorIn(doc.body);
                        }
                    }
                })
                    .on(editor.ew, 'mousedown touchstart keydown keyup touchend click mouseup mousemove scroll', function (e) {
                    var _a;
                    (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire(editor.ow, e);
                });
            }
        };
        if (helpers_1.isPromise(result)) {
            return result.then(init);
        }
        init();
        return false;
    });
}
exports.iframe = iframe;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(244), exports);
tslib_1.__exportStar(__webpack_require__(250), exports);


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageProperties = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(245);
var autobind_decorator_1 = __webpack_require__(10);
var config_1 = __webpack_require__(4);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var widget_1 = __webpack_require__(18);
var button_1 = __webpack_require__(16);
var templates_1 = __webpack_require__(246);
var decorators_1 = __webpack_require__(13);
config_1.Config.prototype.image = {
    dialogWidth: 600,
    openOnDblClick: true,
    editSrc: true,
    useImageEditor: true,
    editTitle: true,
    editAlt: true,
    editLink: true,
    editSize: true,
    editBorderRadius: true,
    editMargins: true,
    editClass: true,
    editStyle: true,
    editId: true,
    editAlign: true,
    showPreview: true,
    selectImageAfterClose: true
};
var imageProperties = (function (_super) {
    tslib_1.__extends(imageProperties, _super);
    function imageProperties() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            image: new Image(),
            get ratio() {
                return this.image.naturalWidth / this.image.naturalHeight || 1;
            },
            sizeIsLocked: true,
            marginIsLocked: true
        };
        return _this;
    }
    imageProperties.prototype.onChangeMarginIsLocked = function () {
        var _this = this;
        if (!this.form) {
            return;
        }
        var _a = helpers_1.refs(this.form), marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, lockMargin = _a.lockMargin;
        [marginRight, marginBottom, marginLeft].forEach(function (elm) {
            helpers_1.attr(elm, 'disabled', _this.state.marginIsLocked || null);
        });
        lockMargin.innerHTML = modules_1.Icon.get(this.state.marginIsLocked ? 'lock' : 'unlock');
    };
    imageProperties.prototype.open = function () {
        this.makeForm();
        this.j.e.fire('hidePopup');
        helpers_1.markOwner(this.j, this.dialog.container);
        this.state.marginIsLocked = true;
        this.state.sizeIsLocked = true;
        this.updateValues();
        this.dialog
            .open()
            .setModal(true)
            .setPosition();
        return false;
    };
    imageProperties.prototype.makeForm = function () {
        var _this = this;
        if (this.dialog) {
            return;
        }
        this.dialog = new modules_1.Dialog({
            fullsize: this.j.o.fullsize,
            globalFullSize: this.j.o.globalFullSize,
            language: this.j.o.language,
            buttons: ['fullsize', 'dialog.close']
        });
        var editor = this.j, opt = editor.o, i18n = editor.i18n.bind(editor), buttons = {
            check: button_1.Button(editor, 'ok', 'Apply'),
            remove: button_1.Button(editor, 'bin', 'Delete')
        };
        editor.e.on(this.dialog, 'afterClose', function () {
            if (_this.state.image.parentNode &&
                opt.image.selectImageAfterClose) {
                editor.s.select(_this.state.image);
            }
        });
        buttons.remove.onAction(function () {
            editor.s.removeNode(_this.state.image);
            _this.dialog.close();
        });
        var dialog = this.dialog;
        dialog.setHeader(i18n('Image properties'));
        var mainForm = templates_1.form(editor);
        this.form = mainForm;
        dialog.setContent(mainForm);
        var tabsBox = helpers_1.refs(this.form).tabsBox;
        if (tabsBox) {
            tabsBox.appendChild(widget_1.TabsWidget(editor, [
                { name: 'Image', content: templates_1.mainTab(editor) },
                { name: 'Advanced', content: templates_1.positionTab(editor) }
            ]));
        }
        buttons.check.onAction(this.onApply);
        var _a = helpers_1.refs(this.form), changeImage = _a.changeImage, editImage = _a.editImage;
        editor.e.on(changeImage, 'click', this.openImagePopup);
        if (opt.image.useImageEditor) {
            editor.e.on(editImage, 'click', this.openImageEditor);
        }
        var _b = helpers_1.refs(mainForm), lockSize = _b.lockSize, lockMargin = _b.lockMargin, imageWidth = _b.imageWidth, imageHeight = _b.imageHeight;
        if (lockSize) {
            editor.e.on(lockSize, 'click', function () {
                _this.state.sizeIsLocked = !_this.state.sizeIsLocked;
                lockSize.innerHTML = modules_1.Icon.get(_this.state.sizeIsLocked ? 'lock' : 'unlock');
                editor.e.fire(imageWidth, 'change');
            });
        }
        editor.e.on(lockMargin, 'click', function () {
            _this.state.marginIsLocked = !_this.state.marginIsLocked;
        });
        var changeSizes = function (event) {
            var w = parseInt(imageWidth.value, 10), h = parseInt(imageHeight.value, 10);
            if (event.target === imageWidth) {
                imageHeight.value = Math.round(w / _this.state.ratio).toString();
            }
            else {
                imageWidth.value = Math.round(h * _this.state.ratio).toString();
            }
        };
        editor.e.on([imageWidth, imageHeight], 'change keydown mousedown paste', function (event) {
            if (!_this.state.sizeIsLocked) {
                return;
            }
            editor.async.setTimeout(changeSizes.bind(_this, event), {
                timeout: editor.defaultTimeout,
                label: 'image-properties-changeSize'
            });
        });
        dialog.setFooter([buttons.remove, buttons.check]);
        dialog.setSize(this.j.o.image.dialogWidth);
    };
    imageProperties.prototype.updateValues = function () {
        var _this = this;
        var opt = this.j.o;
        var image = this.state.image;
        var _a = helpers_1.refs(this.form), marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, lockMargin = _a.lockMargin, imageSrc = _a.imageSrc, id = _a.id, classes = _a.classes, align = _a.align, style = _a.style, imageTitle = _a.imageTitle, imageAlt = _a.imageAlt, borderRadius = _a.borderRadius, imageLink = _a.imageLink, imageWidth = _a.imageWidth, imageHeight = _a.imageHeight, imageLinkOpenInNewTab = _a.imageLinkOpenInNewTab, imageViewSrc = _a.imageViewSrc, lockSize = _a.lockSize;
        var updateLock = function () {
            lockMargin.checked = _this.state.marginIsLocked;
            lockSize.checked = _this.state.sizeIsLocked;
        }, updateAlign = function () {
            if (image.style.cssFloat &&
                ['left', 'right'].indexOf(image.style.cssFloat.toLowerCase()) !== -1) {
                align.value = helpers_1.css(image, 'float');
            }
            else {
                if (helpers_1.css(image, 'display') === 'block' &&
                    image.style.marginLeft === 'auto' &&
                    image.style.marginRight === 'auto') {
                    align.value = 'center';
                }
            }
        }, updateBorderRadius = function () {
            borderRadius.value = (parseInt(image.style.borderRadius || '0', 10) || '0').toString();
        }, updateId = function () {
            id.value = helpers_1.attr(image, 'id') || '';
        }, updateStyle = function () {
            style.value = helpers_1.attr(image, 'style') || '';
        }, updateClasses = function () {
            classes.value = (helpers_1.attr(image, 'class') || '').replace(/jodit_focused_image[\s]*/, '');
        }, updateMargins = function () {
            if (!opt.image.editMargins) {
                return;
            }
            var equal = true, wasEmptyField = false;
            [marginTop, marginRight, marginBottom, marginLeft].forEach(function (elm) {
                var id = helpers_1.attr(elm, 'data-ref') || '';
                var value = image.style.getPropertyValue(helpers_1.kebabCase(id));
                if (!value) {
                    wasEmptyField = true;
                    elm.value = '';
                    return;
                }
                if (/^[0-9]+(px)?$/.test(value)) {
                    value = parseInt(value, 10);
                }
                elm.value = value.toString() || '';
                if ((wasEmptyField && elm.value) ||
                    (equal &&
                        id !== 'marginTop' &&
                        elm.value !== marginTop.value)) {
                    equal = false;
                }
            });
            _this.state.marginIsLocked = equal;
        }, updateSizes = function () {
            imageWidth.value = image.offsetWidth.toString();
            imageHeight.value = image.offsetHeight.toString();
        }, updateText = function () {
            if (image.hasAttribute('title')) {
                imageTitle.value = helpers_1.attr(image, 'title') || '';
            }
            if (image.hasAttribute('alt')) {
                imageAlt.value = helpers_1.attr(image, 'alt') || '';
            }
            var a = modules_1.Dom.closest(image, 'a', _this.j.editor);
            if (a) {
                imageLink.value = helpers_1.attr(a, 'href') || '';
                imageLinkOpenInNewTab.checked =
                    helpers_1.attr(a, 'target') === '_blank';
            }
        }, updateSrc = function () {
            imageSrc.value = helpers_1.attr(image, 'src') || '';
            if (imageViewSrc) {
                helpers_1.attr(imageViewSrc, 'src', helpers_1.attr(image, 'src') || '');
            }
        };
        updateLock();
        updateSrc();
        updateText();
        updateSizes();
        updateMargins();
        updateClasses();
        updateId();
        updateBorderRadius();
        updateAlign();
        updateStyle();
    };
    imageProperties.prototype.onApply = function () {
        var _a = helpers_1.refs(this.form), style = _a.style, imageSrc = _a.imageSrc, borderRadius = _a.borderRadius, imageTitle = _a.imageTitle, imageAlt = _a.imageAlt, imageLink = _a.imageLink, imageWidth = _a.imageWidth, imageHeight = _a.imageHeight, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, imageLinkOpenInNewTab = _a.imageLinkOpenInNewTab, align = _a.align, classes = _a.classes, id = _a.id;
        var opt = this.j.o;
        var image = this.state.image;
        if (opt.image.editStyle) {
            helpers_1.attr(image, 'style', style.value || null);
        }
        if (imageSrc.value) {
            helpers_1.attr(image, 'src', imageSrc.value);
        }
        else {
            modules_1.Dom.safeRemove(image);
            this.dialog.close();
            return;
        }
        if (borderRadius.value !== '0' && /^[0-9]+$/.test(borderRadius.value)) {
            image.style.borderRadius = borderRadius.value + 'px';
        }
        else {
            image.style.borderRadius = '';
        }
        helpers_1.attr(image, 'title', imageTitle.value || null);
        helpers_1.attr(image, 'alt', imageAlt.value || null);
        var link = modules_1.Dom.closest(image, 'a', this.j.editor);
        if (imageLink.value) {
            if (!link) {
                link = modules_1.Dom.wrap(image, 'a', this.j);
            }
            helpers_1.attr(link, 'href', imageLink.value);
            helpers_1.attr(link, 'target', imageLinkOpenInNewTab.checked ? '_blank' : null);
        }
        else {
            if (link && link.parentNode) {
                link.parentNode.replaceChild(image, link);
            }
        }
        var normalSize = function (value) {
            value = helpers_1.trim(value);
            return /^[0-9]+$/.test(value) ? value + 'px' : value;
        };
        if (imageWidth.value !== image.offsetWidth.toString() ||
            imageHeight.value !== image.offsetHeight.toString()) {
            helpers_1.css(image, {
                width: helpers_1.trim(imageWidth.value)
                    ? normalSize(imageWidth.value)
                    : null,
                height: helpers_1.trim(imageHeight.value)
                    ? normalSize(imageHeight.value)
                    : null
            });
        }
        var margins = [marginTop, marginRight, marginBottom, marginLeft];
        if (opt.image.editMargins) {
            if (!this.state.marginIsLocked) {
                margins.forEach(function (margin) {
                    var side = helpers_1.attr(margin, 'data-ref') || '';
                    helpers_1.css(image, side, normalSize(margin.value));
                });
            }
            else {
                helpers_1.css(image, 'margin', normalSize(marginTop.value));
            }
        }
        if (opt.image.editClass) {
            helpers_1.attr(image, 'class', classes.value || null);
        }
        if (opt.image.editId) {
            helpers_1.attr(image, 'id', id.value || null);
        }
        if (opt.image.editAlign) {
            if (align.value) {
                if (['right', 'left'].includes(align.value.toLowerCase())) {
                    helpers_1.css(image, 'float', align.value);
                    helpers_1.clearCenterAlign(image);
                }
                else {
                    helpers_1.css(image, {
                        float: '',
                        display: 'block',
                        marginLeft: 'auto',
                        marginRight: 'auto'
                    });
                }
            }
            else {
                if (helpers_1.css(image, 'float') &&
                    ['right', 'left'].indexOf(helpers_1.css(image, 'float')
                        .toString()
                        .toLowerCase()) !== -1) {
                    helpers_1.css(image, 'float', '');
                }
                helpers_1.clearCenterAlign(image);
            }
        }
        this.j.setEditorValue();
        this.dialog.close();
    };
    imageProperties.prototype.openImageEditor = function () {
        var _this = this;
        var url = helpers_1.attr(this.state.image, 'src') || '', a = this.j.c.element('a'), loadExternal = function () {
            if (a.host !== location.host) {
                modules_1.Confirm(_this.j.i18n('You can only edit your own images. Download this image on the host?'), function (yes) {
                    if (yes && _this.j.uploader) {
                        _this.j.uploader.uploadRemoteImage(a.href.toString(), function (resp) {
                            modules_1.Alert(_this.j.i18n('The image has been successfully uploaded to the host!'), function () {
                                if (helpers_1.isString(resp.newfilename)) {
                                    helpers_1.attr(_this.state.image, 'src', resp.baseurl +
                                        resp.newfilename);
                                    _this.updateValues();
                                }
                            }).bindDestruct(_this.j);
                        }, function (error) {
                            modules_1.Alert(_this.j.i18n('There was an error loading %s', error.message)).bindDestruct(_this.j);
                        });
                    }
                }).bindDestruct(_this.j);
                return;
            }
        };
        a.href = url;
        this.j.filebrowser.dataProvider.getPathByUrl(a.href.toString(), function (path, name, source) {
            _this.j.filebrowser.openImageEditor(a.href, name, path, source, function () {
                var timestamp = new Date().getTime();
                helpers_1.attr(_this.state.image, 'src', url +
                    (url.indexOf('?') !== -1 ? '' : '?') +
                    '&_tmp=' +
                    timestamp.toString());
                _this.updateValues();
            }, function (error) {
                modules_1.Alert(error.message).bindDestruct(_this.j);
            });
        }, function (error) {
            modules_1.Alert(error.message, loadExternal).bindDestruct(_this.j);
        });
    };
    imageProperties.prototype.openImagePopup = function (event) {
        var _this = this;
        var popup = new modules_1.Popup(this.j), changeImage = helpers_1.refs(this.form).changeImage;
        popup
            .setContent(widget_1.FileSelectorWidget(this.j, {
            upload: function (data) {
                if (data.files && data.files.length) {
                    helpers_1.attr(_this.state.image, 'src', data.baseurl + data.files[0]);
                }
                _this.updateValues();
                popup.close();
            },
            filebrowser: function (data) {
                if (data &&
                    helpers_1.isArray(data.files) &&
                    data.files.length) {
                    helpers_1.attr(_this.state.image, 'src', data.files[0]);
                    popup.close();
                    _this.updateValues();
                }
            }
        }, this.state.image, popup.close))
            .open(function () { return helpers_1.position(changeImage); });
        event.stopPropagation();
    };
    imageProperties.prototype.afterInit = function (editor) {
        var _this = this;
        var self = this;
        editor.e
            .on('afterConstructor changePlace', function () {
            editor.e
                .off(editor.editor, '.imageproperties')
                .on(editor.editor, 'dblclick.imageproperties', function (e) {
                var image = e.target;
                if (!modules_1.Dom.isTag(image, 'img')) {
                    return;
                }
                if (editor.o.image.openOnDblClick) {
                    self.state.image = image;
                    if (!editor.o.readonly) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        self.open();
                    }
                }
                else {
                    e.stopImmediatePropagation();
                    editor.s.select(image);
                }
            });
        })
            .on('openImageProperties.imageproperties', function (image) {
            _this.state.image = image;
            _this.open();
        });
    };
    imageProperties.prototype.beforeDestruct = function (editor) {
        this.dialog && this.dialog.destruct();
        editor.e.off(editor.editor, '.imageproperties').off('.imageproperties');
    };
    tslib_1.__decorate([
        decorators_1.watch('state.marginIsLocked')
    ], imageProperties.prototype, "onChangeMarginIsLocked", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], imageProperties.prototype, "onApply", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], imageProperties.prototype, "openImageEditor", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], imageProperties.prototype, "openImagePopup", null);
    return imageProperties;
}(modules_1.Plugin));
exports.imageProperties = imageProperties;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(247), exports);
tslib_1.__exportStar(__webpack_require__(248), exports);
tslib_1.__exportStar(__webpack_require__(249), exports);


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.form = void 0;
var ui_1 = __webpack_require__(8);
function form(editor) {
    var _a = editor.o.image, showPreview = _a.showPreview, editSize = _a.editSize, gi = ui_1.Icon.get.bind(ui_1.Icon);
    return editor.c.fromHTML("<form class=\"jodit-properties\">\n\t\t<div class=\"jodit-grid jodit-grid_xs-column\">\n\t\t\t<div class=\"jodit_col-lg-2-5 jodit_col-xs-5-5\">\n\t\t\t\t<div class=\"jodit-properties_view_box\">\n\t\t\t\t\t<div style=\"" + (!showPreview ? 'display:none' : '') + "\" class=\"jodit-properties_image_view\">\n\t\t\t\t\t\t<img data-ref=\"imageViewSrc\" src=\"\" alt=\"\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"" + (!editSize ? 'display:none' : '') + "\" class=\"jodit-form__group jodit-properties_image_sizes\">\n\t\t\t\t\t\t<input data-ref=\"imageWidth\" type=\"number\" class=\"jodit-input\"/>\n\t\t\t\t\t\t<a data-ref=\"lockSize\" class=\"jodit-properties__lock\">" + gi('lock') + "</a>\n\t\t\t\t\t\t<input data-ref=\"imageHeight\" type=\"number\" class=\"imageHeight jodit-input\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-ref=\"tabsBox\" class=\"jodit_col-lg-3-5 jodit_col-xs-5-5\"></div>\n\t\t</div>\n\t</form>");
}
exports.form = form;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mainTab = void 0;
var ui_1 = __webpack_require__(8);
function mainTab(editor) {
    var opt = editor.o, i18n = editor.i18n.bind(editor), gi = ui_1.Icon.get.bind(ui_1.Icon), hasFbUrl = opt.filebrowser.ajax.url || opt.uploader.url, hasEditor = opt.image.useImageEditor;
    return editor.c.fromHTML("<div style=\"" + (!opt.image.editSrc ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Src') + "</label>\n\t\t\t<div class=\"jodit-input_group\">\n\t\t\t\t<input data-ref=\"imageSrc\" class=\"jodit-input\" type=\"text\"/>\n\t\t\t\t<div\n\t\t\t\t\tclass=\"jodit-input_group-buttons\"\n\t\t\t\t\tstyle=\"" + (hasFbUrl ? '' : 'display: none') + "\"\n\t\t\t\t>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tdata-ref=\"changeImage\"\n\t\t\t\t\t\t\tclass=\"jodit-button\"\n\t\t\t\t\t\t>" + gi('image') + "</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tdata-ref=\"editImage\"\n\t\t\t\t\t\t\tclass=\"jodit-button\"\n\t\t\t\t\t\t\tstyle=\"" + (hasEditor ? '' : 'display: none') + "\"\n\t\t\t\t\t\t>" + gi('crop') + "</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editTitle ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Title') + "</label>\n\t\t\t<input data-ref=\"imageTitle\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editAlt ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Alternative') + "</label>\n\t\t\t<input data-ref=\"imageAlt\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editLink ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Link') + "</label>\n\t\t\t<input data-ref=\"imageLink\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editLink ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label class=\"jodit_vertical_middle\">\n\t\t\t\t<input data-ref=\"imageLinkOpenInNewTab\" type=\"checkbox\" class=\"jodit-checkbox\"/>\n\t\t\t\t<span>" + i18n('Open link in new tab') + "</span>\n\t\t\t</label>\n\t\t</div>");
}
exports.mainTab = mainTab;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.positionTab = void 0;
var ui_1 = __webpack_require__(8);
function positionTab(editor) {
    var opt = editor.o, i18n = editor.i18n.bind(editor), gi = ui_1.Icon.get.bind(ui_1.Icon);
    return editor.c.fromHTML("<div style=\"" + (!opt.image.editMargins ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Margins') + "</label>\n\t\t\t<div class=\"jodit-grid jodit_vertical_middle\">\n\t\t\t\t<input class=\"jodit_col-lg-1-5 jodit-input\" data-ref=\"marginTop\" type=\"text\" placeholder=\"" + i18n('top') + "\"/>\n\t\t\t\t<a style=\"text-align: center;\" data-ref=\"lockMargin\" class=\"jodit-properties__lock jodit_col-lg-1-5\">" + gi('lock') + "</a>\n\t\t\t\t<input disabled=\"true\" class=\"jodit_col-lg-1-5 jodit-input\" data-ref=\"marginRight\" type=\"text\" placeholder=\"" + i18n('right') + "\"/>\n\t\t\t\t<input disabled=\"true\" class=\"jodit_col-lg-1-5 jodit-input\" data-ref=\"marginBottom\" type=\"text\" placeholder=\"" + i18n('bottom') + "\"/>\n\t\t\t\t<input disabled=\"true\" class=\"jodit_col-lg-1-5 jodit-input\" data-ref=\"marginLeft\" type=\"text\" placeholder=\"" + i18n('left') + "\"/>\n\t\t\t</div>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editStyle ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Styles') + "</label>\n\t\t\t<input data-ref=\"style\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editClass ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>" + i18n('Classes') + "</label>\n\t\t\t<input data-ref=\"classes\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div style=\"" + (!opt.image.editId ? 'display:none' : '') + "\" class=\"jodit-form__group\">\n\t\t\t<label>Id</label>\n\t\t\t<input data-ref=\"id\" type=\"text\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div\n\t\t\tstyle=\"" + (!opt.image.editBorderRadius ? 'display:none' : '') + "\"\n\t\t\tclass=\"jodit-form__group\"\n\t\t>\n\t\t\t<label>" + i18n('Border radius') + "</label>\n\t\t\t\t<input data-ref=\"borderRadius\" type=\"number\" class=\"jodit-input\"/>\n\t\t</div>\n\t\t<div\n\t\t\tstyle=\"" + (!opt.image.editAlign ? 'display:none' : '') + "\"\n\t\t\tclass=\"jodit-form__group\"\n\t\t>\n\t\t\t<label>" + i18n('Align') + "</label>\n\t\t\t<select data-ref=\"align\" class=\"jodit-select\">\n\t\t\t\t<option value=\"\">" + i18n('--Not Set--') + "</option>\n\t\t\t\t<option value=\"left\">" + i18n('Left') + "</option>\n\t\t\t\t<option value=\"center\">" + i18n('Center') + "</option>\n\t\t\t\t<option value=\"right\">" + i18n('Right') + "</option>\n\t\t\t</select>\n\t\t</div>");
}
exports.positionTab = positionTab;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageProcessor = void 0;
var helpers_1 = __webpack_require__(1);
var JODIT_IMAGE_PROCESSOR_BINDED = '__jodit_imageprocessor_binded';
function imageProcessor(editor) {
    editor.e.on('change afterInit changePlace', editor.async.debounce(function () {
        if (editor.editor) {
            helpers_1.$$('img', editor.editor).forEach(function (elm) {
                if (!elm[JODIT_IMAGE_PROCESSOR_BINDED]) {
                    elm[JODIT_IMAGE_PROCESSOR_BINDED] = true;
                    if (!elm.complete) {
                        elm.addEventListener('load', function ElementOnLoad() {
                            editor.events &&
                                editor.e.fire &&
                                editor.e.fire('resize');
                            elm.removeEventListener('load', ElementOnLoad);
                        });
                    }
                    editor.e.on(elm, 'mousedown touchstart', function () {
                        editor.s.select(elm);
                    });
                }
            });
        }
    }, editor.defaultTimeout));
}
exports.imageProcessor = imageProcessor;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.indent = void 0;
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.controls.indent = {
    tooltip: 'Increase Indent'
};
var getKey = function (direction) {
    return direction === 'rtl' ? 'marginRight' : 'marginLeft';
};
config_1.Config.prototype.controls.outdent = {
    isDisabled: function (editor) {
        var current = editor.s.current();
        if (current) {
            var currentBox = dom_1.Dom.closest(current, function (node) { return dom_1.Dom.isBlock(node, editor.ew); }, editor.editor);
            var key = getKey(editor.o.direction);
            if (currentBox && currentBox.style && currentBox.style[key]) {
                return parseInt(currentBox.style[key], 10) <= 0;
            }
        }
        return true;
    },
    tooltip: 'Decrease Indent'
};
config_1.Config.prototype.indentMargin = 10;
function indent(editor) {
    var key = getKey(editor.o.direction);
    var callback = function (command) {
        var indentedBoxes = [];
        editor.s.eachSelection(function (current) {
            var selectionInfo = editor.s.save();
            var currentBox = current
                ? dom_1.Dom.up(current, function (node) { return dom_1.Dom.isBlock(node, editor.ew); }, editor.editor)
                : false;
            var enter = editor.o.enter;
            if (!currentBox && current) {
                currentBox = dom_1.Dom.wrapInline(current, enter !== constants_1.BR ? enter : constants_1.PARAGRAPH, editor);
            }
            if (!currentBox) {
                editor.s.restore(selectionInfo);
                return false;
            }
            var alreadyIndented = indentedBoxes.indexOf(currentBox) !== -1;
            if (currentBox && currentBox.style && !alreadyIndented) {
                indentedBoxes.push(currentBox);
                var value = currentBox.style[key]
                    ? parseInt(currentBox.style[key], 10)
                    : 0;
                value +=
                    editor.o.indentMargin * (command === 'outdent' ? -1 : 1);
                currentBox.style[key] = value > 0 ? value + 'px' : '';
                if (!helpers_1.attr(currentBox, 'style')) {
                    currentBox.removeAttribute('style');
                }
            }
            editor.s.restore(selectionInfo);
        });
        editor.setEditorValue();
        return false;
    };
    editor.registerCommand('indent', {
        exec: callback,
        hotkeys: ['ctrl+]', 'cmd+]']
    });
    editor.registerCommand('outdent', {
        exec: callback,
        hotkeys: ['ctrl+[', 'cmd+[']
    });
}
exports.indent = indent;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.inlinePopup = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(253);
__webpack_require__(254);
var autobind_decorator_1 = __webpack_require__(10);
var plugin_1 = __webpack_require__(6);
var factory_1 = __webpack_require__(17);
var popup_1 = __webpack_require__(23);
var helpers_1 = __webpack_require__(1);
var modules_1 = __webpack_require__(9);
var decorators_1 = __webpack_require__(13);
var inlinePopup = (function (_super) {
    tslib_1.__extends(inlinePopup, _super);
    function inlinePopup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = null;
        _this.popup = new popup_1.Popup(_this.jodit);
        _this.toolbar = factory_1.makeCollection(_this.jodit, _this.popup);
        return _this;
    }
    inlinePopup.prototype.onClick = function (e) {
        var _this = this;
        var node = e.target, elements = Object.keys(this.j.o.popup), target = modules_1.Dom.isTag(node, 'img')
            ? node
            : modules_1.Dom.closest(node, elements, this.j.editor);
        if (target && this.canShowPopupForType(target.nodeName.toLowerCase())) {
            this.showPopup(function () { return helpers_1.position(target, _this.j); }, target.nodeName.toLowerCase(), target);
        }
    };
    inlinePopup.prototype.onSelectionChange = function () {
        if (!this.j.o.toolbarInlineForSelection) {
            return;
        }
        var type = 'selection', sel = this.j.s.sel, range = this.j.s.range;
        if (sel === null || sel === void 0 ? void 0 : sel.isCollapsed) {
            if (this.type === type && this.popup.isOpened) {
                this.hidePopup();
            }
            return;
        }
        var node = this.j.s.current();
        if (!node) {
            return;
        }
        this.showPopup(function () { return range.getBoundingClientRect(); }, type);
    };
    inlinePopup.prototype.showPopup = function (rect, type, target) {
        type = type.toLowerCase();
        if (!this.canShowPopupForType(type)) {
            return false;
        }
        if (this.type !== type) {
            var data = this.j.o.popup[type];
            this.toolbar.buttonSize = this.j.o.toolbarButtonSize;
            this.toolbar.build(data, target);
            this.popup.setContent(this.toolbar.container);
            this.type = type;
        }
        this.popup.open(rect);
        return true;
    };
    inlinePopup.prototype.hidePopup = function () {
        this.popup.close();
    };
    inlinePopup.prototype.canShowPopupForType = function (type) {
        var data = this.j.o.popup[type.toLowerCase()];
        if (this.j.o.readonly || !this.j.o.toolbarInline || !data) {
            return false;
        }
        return !this.isExcludedTarget(type);
    };
    inlinePopup.prototype.isExcludedTarget = function (type) {
        return helpers_1.splitArray(this.j.o.toolbarInlineDisableFor)
            .map(function (a) { return a.toLowerCase(); })
            .includes(type.toLowerCase());
    };
    inlinePopup.prototype.afterInit = function (jodit) {
        var _this = this;
        this.j.e
            .on('getDiffButtons.mobile', function (toolbar) {
            if (_this.toolbar === toolbar) {
                return helpers_1.splitArray(jodit.o.buttons).filter(function (item) {
                    var name = helpers_1.isString(item) ? item : item.name;
                    return (name &&
                        name !== '|' &&
                        name !== '\n' &&
                        !_this.toolbar.getButtonsNames().includes(name));
                });
            }
        })
            .on('hidePopup', this.hidePopup)
            .on('showPopup', function (elm, rect, type) {
            _this.showPopup(rect, type || (helpers_1.isString(elm) ? elm : elm.nodeName), helpers_1.isString(elm) ? undefined : elm);
        })
            .on('click', this.onClick)
            .on(this.j.ed, 'selectionchange', this.onSelectionChange);
    };
    inlinePopup.prototype.beforeDestruct = function (jodit) {
        this.j.e
            .off('showPopup')
            .off('click', this.onClick)
            .off(this.j.ed, 'selectionchange', this.onSelectionChange);
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], inlinePopup.prototype, "onClick", null);
    tslib_1.__decorate([
        decorators_1.debounce(function (ctx) { return ctx.defaultTimeout * 5; })
    ], inlinePopup.prototype, "onSelectionChange", null);
    tslib_1.__decorate([
        decorators_1.wait(function (ctx) { return !ctx.j.isLocked; })
    ], inlinePopup.prototype, "showPopup", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], inlinePopup.prototype, "hidePopup", null);
    return inlinePopup;
}(plugin_1.Plugin));
exports.inlinePopup = inlinePopup;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
config_1.Config.prototype.toolbarInline = true;
config_1.Config.prototype.toolbarInlineForSelection = false;
config_1.Config.prototype.toolbarInlineDisableFor = [];
config_1.Config.prototype.popup = {
    a: __webpack_require__(255).default,
    img: __webpack_require__(256).default,
    cells: __webpack_require__(257).default,
    jodit: [
        {
            name: 'bin',
            tooltip: 'Delete',
            exec: function (editor, image) {
                image && editor.s.removeNode(image);
            }
        }
    ],
    'jodit-media': [
        {
            name: 'bin',
            tooltip: 'Delete',
            exec: function (editor, image) {
                image && editor.s.removeNode(image);
            }
        }
    ],
    selection: [
        'bold',
        'underline',
        'italic',
        'ul',
        'ol',
        '\n',
        'outdent',
        'indent',
        'fontsize',
        'brush',
        'cut',
        '\n',
        'paragraph',
        'link',
        'align',
        'dots'
    ]
};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(15);
exports.default = [
    {
        name: 'eye',
        tooltip: 'Open link',
        exec: function (editor, current) {
            var href = utils_1.attr(current, 'href');
            if (current && href) {
                editor.ow.open(href);
            }
        }
    },
    {
        name: 'link',
        tooltip: 'Edit link',
        icon: 'pencil'
    },
    'unlink',
    'brush',
    'file'
];


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(2);
var checker_1 = __webpack_require__(5);
var helpers_1 = __webpack_require__(1);
exports.default = [
    {
        name: 'delete',
        icon: 'bin',
        tooltip: 'Delete',
        exec: function (editor, image) {
            image && editor.s.removeNode(image);
        }
    },
    {
        name: 'pencil',
        exec: function (editor, current) {
            var tagName = current.tagName.toLowerCase();
            if (tagName === 'img') {
                editor.e.fire('openImageProperties', current);
            }
        },
        tooltip: 'Edit'
    },
    {
        name: 'valign',
        list: ['Top', 'Middle', 'Bottom', 'Normal'],
        tooltip: 'Vertical align',
        exec: function (editor, image, _a) {
            var control = _a.control;
            if (!dom_1.Dom.isTag(image, 'img')) {
                return;
            }
            var command = control.args && checker_1.isString(control.args[0])
                ? control.args[0].toLowerCase()
                : '';
            if (!command) {
                return false;
            }
            helpers_1.css(image, 'vertical-align', command === 'normal' ? '' : command);
            editor.e.fire('recalcPositionPopup');
        }
    },
    {
        name: 'left',
        childTemplate: function (_, __, value) { return value; },
        list: ['Left', 'Right', 'Center', 'Normal'],
        exec: function (editor, image, _a) {
            var control = _a.control;
            if (!dom_1.Dom.isTag(image, 'img')) {
                return;
            }
            var command = control.args && checker_1.isString(control.args[0])
                ? control.args[0].toLowerCase()
                : '';
            if (!command) {
                return false;
            }
            if (command !== 'normal') {
                if (['right', 'left'].indexOf(command) !== -1) {
                    helpers_1.css(image, 'float', command);
                    helpers_1.clearCenterAlign(image);
                }
                else {
                    helpers_1.css(image, 'float', '');
                    helpers_1.css(image, {
                        display: 'block',
                        'margin-left': 'auto',
                        'margin-right': 'auto'
                    });
                }
            }
            else {
                if (helpers_1.css(image, 'float') &&
                    ['right', 'left'].indexOf(helpers_1.css(image, 'float').toLowerCase()) !== -1) {
                    helpers_1.css(image, 'float', '');
                }
                helpers_1.clearCenterAlign(image);
            }
            editor.setEditorValue();
            editor.e.fire('recalcPositionPopup');
        },
        tooltip: 'Horizontal align'
    }
];


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var checker_1 = __webpack_require__(5);
var helpers_1 = __webpack_require__(1);
var widget_1 = __webpack_require__(18);
var cmd = function (control) {
    return control.args && checker_1.isString(control.args[0])
        ? control.args[0].toLowerCase()
        : '';
};
exports.default = [
    {
        name: 'brush',
        popup: function (editor) {
            if (!checker_1.isJoditObject(editor)) {
                return;
            }
            var selected = editor
                .getInstance('Table', editor.o)
                .getAllSelectedCells();
            var $bg, $cl, $br, $tab, color, br_color, bg_color;
            if (!selected.length) {
                return false;
            }
            color = helpers_1.css(selected[0], 'color');
            bg_color = helpers_1.css(selected[0], 'background-color');
            br_color = helpers_1.css(selected[0], 'border-color');
            $bg = widget_1.ColorPickerWidget(editor, function (value) {
                selected.forEach(function (cell) {
                    helpers_1.css(cell, 'background-color', value);
                });
                editor.setEditorValue();
            }, bg_color);
            $cl = widget_1.ColorPickerWidget(editor, function (value) {
                selected.forEach(function (cell) {
                    helpers_1.css(cell, 'color', value);
                });
                editor.setEditorValue();
            }, color);
            $br = widget_1.ColorPickerWidget(editor, function (value) {
                selected.forEach(function (cell) {
                    helpers_1.css(cell, 'border-color', value);
                });
                editor.setEditorValue();
            }, br_color);
            $tab = widget_1.TabsWidget(editor, [
                { name: 'Background', content: $bg },
                { name: 'Text', content: $cl },
                { name: 'Border', content: $br }
            ]);
            return $tab;
        },
        tooltip: 'Background'
    },
    {
        name: 'valign',
        list: ['Top', 'Middle', 'Bottom', 'Normal'],
        childTemplate: function (_, __, value) { return value; },
        exec: function (editor, table, _a) {
            var control = _a.control;
            var command = cmd(control);
            editor
                .getInstance('Table', editor.o)
                .getAllSelectedCells()
                .forEach(function (cell) {
                helpers_1.css(cell, 'vertical-align', command === 'normal' ? '' : command);
            });
        },
        tooltip: 'Vertical align'
    },
    {
        name: 'splitv',
        list: {
            tablesplitv: 'Split vertical',
            tablesplitg: 'Split horizontal'
        },
        tooltip: 'Split'
    },
    {
        name: 'align',
        icon: 'left'
    },
    '\n',
    {
        name: 'merge',
        command: 'tablemerge',
        tooltip: 'Merge'
    },
    {
        name: 'addcolumn',
        list: {
            tableaddcolumnbefore: 'Insert column before',
            tableaddcolumnafter: 'Insert column after'
        },
        exec: function (editor, table, _a) {
            var control = _a.control;
            if (!checker_1.isJoditObject(editor)) {
                return;
            }
            var command = cmd(control);
            editor.execCommand(command, false, table);
        },
        tooltip: 'Add column'
    },
    {
        name: 'addrow',
        list: {
            tableaddrowbefore: 'Insert row above',
            tableaddrowafter: 'Insert row below'
        },
        exec: function (editor, table, _a) {
            var control = _a.control;
            if (!checker_1.isJoditObject(editor)) {
                return;
            }
            var command = cmd(control);
            editor.execCommand(command, false, table);
        },
        tooltip: 'Add row'
    },
    {
        name: 'delete',
        icon: 'bin',
        list: {
            tablebin: 'Delete table',
            tablebinrow: 'Delete row',
            tablebincolumn: 'Delete column',
            tableempty: 'Empty cell'
        },
        exec: function (editor, table, _a) {
            var control = _a.control;
            if (!checker_1.isJoditObject(editor)) {
                return;
            }
            var command = cmd(control);
            editor.execCommand(command, false, table);
            editor.e.fire('hidePopup');
        },
        tooltip: 'Delete'
    }
];


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.limit = void 0;
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.limitWords = false;
config_1.Config.prototype.limitChars = false;
config_1.Config.prototype.limitHTML = false;
function limit(jodit) {
    if (jodit && (jodit.o.limitWords || jodit.o.limitChars)) {
        var callback_1 = function (event, inputText) {
            if (inputText === void 0) { inputText = ''; }
            var text = inputText || (jodit.o.limitHTML ? jodit.value : jodit.text);
            var words = text
                .replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '')
                .split(constants_1.SPACE_REG_EXP())
                .filter(function (e) { return e.length; });
            if (event && constants_1.COMMAND_KEYS.includes(event.key)) {
                return;
            }
            if (jodit.o.limitWords && jodit.o.limitWords <= words.length) {
                return jodit.o.limitWords === words.length;
            }
            if (jodit.o.limitChars &&
                jodit.o.limitChars <= words.join('').length) {
                return jodit.o.limitChars === words.join('').length;
            }
            return;
        };
        var snapshot_1 = null;
        jodit.e
            .off('.limit')
            .on('beforePaste.limit', function () {
            snapshot_1 = jodit.observer.snapshot.make();
        })
            .on('keydown.limit keyup.limit beforeEnter.limit beforePaste.limit', function (event) {
            if (callback_1(event) !== undefined) {
                return false;
            }
        })
            .on('change.limit', jodit.async.debounce(function (newValue, oldValue) {
            if (callback_1(null, jodit.o.limitHTML ? newValue : helpers_1.stripTags(newValue)) === false) {
                jodit.value = oldValue;
            }
        }, jodit.defaultTimeout))
            .on('afterPaste.limit', function () {
            if (callback_1(null) === false && snapshot_1) {
                jodit.observer.snapshot.restore(snapshot_1);
                return false;
            }
        });
    }
}
exports.limit = limit;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.link = void 0;
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var template_1 = __webpack_require__(260);
config_1.Config.prototype.link = {
    formTemplate: template_1.formTemplate,
    followOnDblClick: false,
    processVideoLink: true,
    processPastedLink: true,
    removeLinkAfterFormat: true,
    noFollowCheckbox: true,
    openInNewTabCheckbox: true
};
config_1.Config.prototype.controls.unlink = {
    exec: function (editor, current) {
        var anchor = dom_1.Dom.closest(current, 'a', editor.editor);
        if (anchor) {
            dom_1.Dom.unwrap(anchor);
        }
        editor.setEditorValue();
        editor.e.fire('hidePopup');
    },
    tooltip: 'Unlink'
};
config_1.Config.prototype.controls.link = {
    isActive: function (editor) {
        var current = editor.s.current();
        return Boolean(current && dom_1.Dom.closest(current, 'a', editor.editor));
    },
    popup: function (editor, current, self, close) {
        var i18n = editor.i18n.bind(editor), _a = editor.o.link, openInNewTabCheckbox = _a.openInNewTabCheckbox, noFollowCheckbox = _a.noFollowCheckbox, formTemplate = _a.formTemplate, formClassName = _a.formClassName, form = editor.c.fromHTML(formTemplate(editor), {
            target_checkbox_box: openInNewTabCheckbox,
            nofollow_checkbox_box: noFollowCheckbox
        });
        var elements = helpers_1.refs(form), insert = elements.insert, unlink = elements.unlink, content_input_box = elements.content_input_box, _b = elements, target_checkbox = _b.target_checkbox, nofollow_checkbox = _b.nofollow_checkbox, url_input = _b.url_input, currentElement = current, isImageContent = dom_1.Dom.isImage(currentElement, editor.ew);
        var content_input = elements.content_input;
        if (!content_input) {
            content_input = editor.c.element('input', {
                type: 'hidden',
                ref: 'content_input'
            });
        }
        if (formClassName) {
            form.classList.add(formClassName);
        }
        if (isImageContent) {
            dom_1.Dom.hide(content_input_box);
        }
        var link;
        var getSelectionText = function () {
            return link
                ? link.innerText
                : helpers_1.stripTags(editor.s.range.cloneContents(), editor.ed);
        };
        if (current && dom_1.Dom.closest(current, 'a', editor.editor)) {
            link = dom_1.Dom.closest(current, 'a', editor.editor);
        }
        else {
            link = false;
        }
        if (!isImageContent && current) {
            content_input.value = getSelectionText();
        }
        if (link) {
            url_input.value = helpers_1.attr(link, 'href') || '';
            if (openInNewTabCheckbox && target_checkbox) {
                target_checkbox.checked = helpers_1.attr(link, 'target') === '_blank';
            }
            if (noFollowCheckbox && nofollow_checkbox) {
                nofollow_checkbox.checked = helpers_1.attr(link, 'rel') === 'nofollow';
            }
            insert.textContent = i18n('Update');
        }
        else {
            dom_1.Dom.hide(unlink);
        }
        var snapshot = editor.observer.snapshot.make();
        if (unlink) {
            editor.e.on(unlink, 'click', function (e) {
                editor.observer.snapshot.restore(snapshot);
                if (link) {
                    dom_1.Dom.unwrap(link);
                }
                editor.setEditorValue();
                close();
                e.preventDefault();
            });
        }
        editor.e.on(form, 'submit', function (event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            if (!url_input.value.trim().length) {
                url_input.focus();
                url_input.classList.add('jodit_error');
                return false;
            }
            var links;
            editor.observer.snapshot.restore(snapshot);
            var textWasChanged = getSelectionText() !== content_input.value.trim();
            if (!link) {
                if (!editor.s.isCollapsed()) {
                    links = editor.s.wrapInTag('a');
                }
                else {
                    var a = editor.createInside.element('a');
                    editor.s.insertNode(a);
                    links = [a];
                }
            }
            else {
                links = [link];
            }
            links.forEach(function (a) {
                a.setAttribute('href', url_input.value);
                if (!isImageContent) {
                    if (content_input.value.trim().length) {
                        if (textWasChanged) {
                            a.textContent = content_input.value;
                        }
                    }
                    else {
                        a.textContent = url_input.value;
                    }
                }
                if (openInNewTabCheckbox && target_checkbox) {
                    if (target_checkbox.checked) {
                        a.setAttribute('target', '_blank');
                    }
                    else {
                        a.removeAttribute('target');
                    }
                }
                if (noFollowCheckbox && nofollow_checkbox) {
                    if (nofollow_checkbox.checked) {
                        a.setAttribute('rel', 'nofollow');
                    }
                    else {
                        a.removeAttribute('rel');
                    }
                }
            });
            editor.setEditorValue();
            close();
            return false;
        });
        return form;
    },
    tags: ['a'],
    tooltip: 'Insert link'
};
function link(jodit) {
    if (jodit.o.link.followOnDblClick) {
        jodit.e.on('afterInit changePlace', function () {
            jodit.e
                .off('dblclick.link')
                .on(jodit.editor, 'dblclick.link', function (e) {
                if (!dom_1.Dom.isTag(e.target, 'a')) {
                    return;
                }
                var href = helpers_1.attr(e.target, 'href');
                if (href) {
                    location.href = href;
                    e.preventDefault();
                }
            });
        });
    }
    if (jodit.o.link.processPastedLink) {
        jodit.e.on('processPaste.link', function (event, html) {
            if (helpers_1.isURL(html)) {
                if (jodit.o.link.processVideoLink) {
                    var embed = helpers_1.convertMediaUrlToVideoEmbed(html);
                    if (embed !== html) {
                        return jodit.createInside.fromHTML(embed);
                    }
                }
                var a = jodit.createInside.element('a');
                a.setAttribute('href', html);
                a.textContent = html;
                return a;
            }
        });
    }
    if (jodit.o.link.removeLinkAfterFormat) {
        jodit.e.on('afterCommand.link', function (command) {
            var sel = jodit.selection;
            var newtag, node;
            if (command === 'removeFormat') {
                node = sel.current();
                if (node && !dom_1.Dom.isTag(node, 'a')) {
                    node = dom_1.Dom.closest(node, 'a', jodit.editor);
                }
                if (dom_1.Dom.isTag(node, 'a')) {
                    if (node.innerHTML === node.textContent) {
                        newtag = jodit.createInside.text(node.innerHTML);
                    }
                    else {
                        newtag = jodit.createInside.element('span');
                        newtag.innerHTML = node.innerHTML;
                    }
                    if (node.parentNode) {
                        node.parentNode.replaceChild(newtag, node);
                        jodit.s.setCursorIn(newtag, true);
                    }
                }
            }
        });
    }
}
exports.link = link;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.formTemplate = void 0;
exports.formTemplate = function (editor) {
    return "<form class=\"jodit-form\">\n\t\t<div class=\"jodit-form__group\">\n\t\t\t<input ref=\"url_input\" class=\"jodit-input\" required type=\"text\" name=\"url\" placeholder=\"http://\" type=\"text\"/>\n\t\t</div>\n\t\t<div ref=\"content_input_box\" class=\"jodit-form__group\">\n\t\t\t<input ref=\"content_input\" class=\"jodit-input\" name=\"text\" placeholder=\"" + editor.i18n('Text') + "\" type=\"text\"/>\n\t\t</div>\n\t\t<label ref=\"target_checkbox_box\">\n\t\t\t<input ref=\"target_checkbox\" class=\"jodit-checkbox\" name=\"target\" type=\"checkbox\"/>\n\t\t\t<span>" + editor.i18n('Open in new tab') + "</span>\n\t\t</label>\n\t\t<label ref=\"nofollow_checkbox_box\">\n\t\t\t<input ref=\"nofollow_checkbox\" class=\"jodit-checkbox\" name=\"nofollow\" type=\"checkbox\"/>\n\t\t\t<span>" + editor.i18n('No follow') + "</span>\n\t\t</label>\n\t\t<div class=\"jodit-buttons\">\n\t\t\t<button ref=\"unlink\" class=\"jodit-button\" type=\"button\">" + editor.i18n('Unlink') + "</button>\n\t\t\t<button ref=\"insert\" class=\"jodit-button\" type=\"submit\">" + editor.i18n('Insert') + "</button>\n\t\t</div>\n\t<form/>";
};


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.media = void 0;
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.mediaFakeTag = 'jodit-media';
config_1.Config.prototype.mediaInFakeBlock = true;
config_1.Config.prototype.mediaBlocks = ['video', 'audio'];
function media(editor) {
    var keyFake = 'jodit_fake_wrapper';
    var _a = editor.options, mediaFakeTag = _a.mediaFakeTag, mediaBlocks = _a.mediaBlocks, mediaInFakeBlock = _a.mediaInFakeBlock;
    var wrap = function (element) {
        if (element.parentNode &&
            helpers_1.attr(element.parentNode, 'data-jodit_iframe_wrapper')) {
            element = element.parentNode;
        }
        else {
            var wrapper = void 0;
            wrapper = editor.createInside.fromHTML("<" + mediaFakeTag + " data-jodit-temp=\"1\" contenteditable=\"false\" draggable=\"true\" data-" + keyFake + "=\"1\"></" + mediaFakeTag + ">");
            wrapper.style.display =
                element.style.display === 'inline-block'
                    ? 'inline-block'
                    : 'block';
            wrapper.style.width = element.offsetWidth + 'px';
            wrapper.style.height = element.offsetHeight + 'px';
            if (element.parentNode) {
                element.parentNode.insertBefore(wrapper, element);
            }
            wrapper.appendChild(element);
            element = wrapper;
        }
        editor.e
            .off(element, 'mousedown.select touchstart.select')
            .on(element, 'mousedown.select touchstart.select', function () {
            editor.s.setCursorAfter(element);
        });
    };
    if (mediaInFakeBlock) {
        editor.e
            .on('afterGetValueFromEditor', function (data) {
            var rxp = new RegExp("<" + mediaFakeTag + "[^>]+data-" + keyFake + "[^>]+>(.+?)</" + mediaFakeTag + ">", 'ig');
            if (rxp.test(data.value)) {
                data.value = data.value.replace(rxp, '$1');
            }
        })
            .on('change afterInit afterSetMode changePlace', editor.async.debounce(function () {
            if (!editor.isDestructed &&
                editor.getMode() !== consts.MODE_SOURCE) {
                helpers_1.$$(mediaBlocks.join(','), editor.editor).forEach(function (elm) {
                    if (!elm['__' + keyFake]) {
                        elm['__' + keyFake] = true;
                        wrap(elm);
                    }
                });
            }
        }, editor.defaultTimeout));
    }
}
exports.media = media;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mobile = void 0;
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var factory_1 = __webpack_require__(17);
var ui_1 = __webpack_require__(8);
config_1.Config.prototype.mobileTapTimeout = 300;
config_1.Config.prototype.toolbarAdaptive = true;
config_1.Config.prototype.controls.dots = {
    mode: consts.MODE_SOURCE + consts.MODE_WYSIWYG,
    popup: function (editor, current, control, close, button) {
        var store = control.data;
        if (store === undefined) {
            store = {
                toolbar: factory_1.makeCollection(editor),
                rebuild: function () {
                    var _a;
                    if (button) {
                        var buttons = editor.e.fire('getDiffButtons.mobile', button.closest(ui_1.UIList));
                        if (buttons && store) {
                            store.toolbar.build(helpers_1.splitArray(buttons));
                            var w = ((_a = editor.toolbar.firstButton) === null || _a === void 0 ? void 0 : _a.container.offsetWidth) || 36;
                            store.toolbar.container.style.width =
                                (w + 4) * 3 + 'px';
                        }
                    }
                }
            };
            control.data = store;
        }
        store.rebuild();
        return store.toolbar;
    },
    tooltip: 'Show all'
};
function mobile(editor) {
    var timeout = 0, store = helpers_1.splitArray(editor.o.buttons);
    editor.e
        .on('touchend', function (e) {
        if (e.changedTouches && e.changedTouches.length) {
            var now = new Date().getTime();
            if (now - timeout > editor.o.mobileTapTimeout) {
                timeout = now;
                editor.s.insertCursorAtPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
            }
        }
    })
        .on('getDiffButtons.mobile', function (toolbar) {
        if (toolbar === editor.toolbar) {
            return helpers_1.splitArray(editor.o.buttons).filter(function (i) { return !store.includes(i); });
        }
    });
    if (editor.o.toolbarAdaptive) {
        editor.e
            .on('resize afterInit recalcAdaptive changePlace afterAddPlace', function () {
            if (!editor.o.toolbar) {
                return;
            }
            var width = editor.container.offsetWidth;
            var newStore = (function () {
                if (width >= editor.o.sizeLG) {
                    return helpers_1.splitArray(editor.o.buttons);
                }
                if (width >= editor.o.sizeMD) {
                    return helpers_1.splitArray(editor.o.buttonsMD);
                }
                if (width >= editor.o.sizeSM) {
                    return helpers_1.splitArray(editor.o.buttonsSM);
                }
                return helpers_1.splitArray(editor.o.buttonsXS);
            })();
            if (newStore.toString() !== store.toString()) {
                store = newStore;
                editor.e.fire('closeAllPopups');
                editor.toolbar
                    .setRemoveButtons(editor.o.removeButtons)
                    .build(store.concat(editor.o.extraButtons));
            }
        })
            .on(editor.ow, 'load', function () { return editor.e.fire('recalcAdaptive'); });
    }
}
exports.mobile = mobile;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderedList = void 0;
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var exec = function (jodit, _, _a) {
    var control = _a.control;
    var key = "button" + control.command;
    var value = (control.args && control.args[0]) || helpers_1.dataBind(jodit, key);
    helpers_1.dataBind(jodit, key, value);
    jodit.execCommand(control.command, false, value);
};
config_1.Config.prototype.controls.ul = {
    command: 'insertUnorderedList',
    tags: ['ul'],
    tooltip: 'Insert Unordered List',
    list: {
        default: 'Default',
        circle: 'Circle',
        disc: 'Disc',
        square: 'Square'
    },
    exec: exec
};
config_1.Config.prototype.controls.ol = {
    command: 'insertOrderedList',
    tags: ['ol'],
    tooltip: 'Insert Ordered List',
    list: {
        default: 'Default',
        'lower-alpha': 'Lower Alpha',
        'lower-greek': 'Lower Greek',
        'lower-roman': 'Lower Roman',
        'upper-alpha': 'Upper Alpha',
        'upper-roman': 'Upper Roman'
    },
    exec: exec
};
function orderedList(editor) {
    var isOurCommand = function (command) {
        return /insert(un)?orderedlist/i.test(command);
    }, getListWrapper = function () {
        return dom_1.Dom.up(editor.s.current(), function (tag) { return tag && /^UL|OL$/i.test(tag.nodeName); }, editor.editor);
    }, listStyleTypeEqual = function (el, listStyleType) {
        var value = el.style.listStyleType;
        return (value === listStyleType ||
            (!value && listStyleType === 'default'));
    }, setListStyleType = function (el, value) {
        if (value === 'default' || !value) {
            el.style.removeProperty('list-style-type');
        }
        else {
            el.style.setProperty('list-style-type', value);
        }
    };
    editor.e
        .on('beforeCommand', function (command, _, listStyleType) {
        if (isOurCommand(command) && listStyleType) {
            var ul = getListWrapper();
            if (ul && !listStyleTypeEqual(ul, listStyleType)) {
                if ((dom_1.Dom.isTag(ul, 'ul') && /unordered/i.test(command)) ||
                    (dom_1.Dom.isTag(ul, 'ol') && !/unordered/i.test(command))) {
                    setListStyleType(ul, listStyleType);
                    return false;
                }
            }
        }
    })
        .on('afterCommand', function (command, _, listStyleType) {
        if (isOurCommand(command)) {
            var ul = getListWrapper();
            if (ul) {
                setListStyleType(ul, listStyleType);
            }
            if (ul && dom_1.Dom.isTag(ul.parentNode, 'p')) {
                var selection = editor.s.save();
                dom_1.Dom.unwrap(ul.parentNode);
                Array.from(ul.childNodes).forEach(function (li) {
                    if (dom_1.Dom.isTag(li.lastChild, 'br')) {
                        dom_1.Dom.safeRemove(li.lastChild);
                    }
                });
                editor.s.restore(selection);
            }
            editor.setEditorValue();
        }
    });
}
exports.orderedList = orderedList;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.placeholder = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(265);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(2);
var plugin_1 = __webpack_require__(6);
var constants_1 = __webpack_require__(3);
config_1.Config.prototype.showPlaceholder = true;
config_1.Config.prototype.useInputsPlaceholder = true;
config_1.Config.prototype.placeholder = 'Type something';
var placeholder = (function (_super) {
    tslib_1.__extends(placeholder, _super);
    function placeholder() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.addEvents = function () {
            var editor = _this.j;
            if (editor.o.useInputsPlaceholder &&
                editor.element.hasAttribute('placeholder')) {
                _this.placeholderElm.innerHTML =
                    helpers_1.attr(editor.element, 'placeholder') || '';
            }
            editor.e.fire('placeholder', _this.placeholderElm.innerHTML);
            editor.e
                .off('.placeholder')
                .on('change.placeholder focus.placeholder keyup.placeholder mouseup.placeholder keydown.placeholder ' +
                'mousedown.placeholder afterSetMode.placeholder changePlace.placeholder', _this.toggle)
                .on(window, 'load', _this.toggle);
            _this.toggle();
        };
        return _this;
    }
    placeholder.prototype.afterInit = function (editor) {
        var _this = this;
        if (!editor.o.showPlaceholder) {
            return;
        }
        this.toggle = editor.async.debounce(this.toggle.bind(this), this.j.defaultTimeout / 10);
        this.placeholderElm = editor.c.fromHTML("<span data-ref=\"placeholder\" style=\"display: none;\" class=\"jodit-placeholder\">" + editor.i18n(editor.o.placeholder) + "</span>");
        if (editor.o.direction === 'rtl') {
            this.placeholderElm.style.right = '0px';
            this.placeholderElm.style.direction = 'rtl';
        }
        editor.e
            .on('readonly', function (isReadOnly) {
            if (isReadOnly) {
                _this.hide();
            }
            else {
                _this.toggle();
            }
        })
            .on('changePlace', this.init);
        this.addEvents();
    };
    placeholder.prototype.show = function () {
        var editor = this.j;
        if (editor.o.readonly) {
            return;
        }
        var marginTop = 0, marginLeft = 0;
        var current = editor.s.current(), wrapper = (current &&
            dom_1.Dom.closest(current, function (n) { return dom_1.Dom.isBlock(n, editor.ew); }, editor.editor)) ||
            editor.editor;
        var style = editor.ew.getComputedStyle(wrapper);
        editor.workplace.appendChild(this.placeholderElm);
        if (dom_1.Dom.isElement(editor.editor.firstChild)) {
            var style2 = editor.ew.getComputedStyle(editor.editor.firstChild);
            marginTop = parseInt(style2.getPropertyValue('margin-top'), 10);
            marginLeft = parseInt(style2.getPropertyValue('margin-left'), 10);
            this.placeholderElm.style.fontSize =
                parseInt(style2.getPropertyValue('font-size'), 10) + 'px';
            this.placeholderElm.style.lineHeight = style2.getPropertyValue('line-height');
        }
        else {
            this.placeholderElm.style.fontSize =
                parseInt(style.getPropertyValue('font-size'), 10) + 'px';
            this.placeholderElm.style.lineHeight = style.getPropertyValue('line-height');
        }
        helpers_1.css(this.placeholderElm, {
            display: 'block',
            textAlign: style.getPropertyValue('text-align'),
            marginTop: Math.max(parseInt(style.getPropertyValue('margin-top'), 10), marginTop),
            marginLeft: Math.max(parseInt(style.getPropertyValue('margin-left'), 10), marginLeft)
        });
    };
    placeholder.prototype.hide = function () {
        dom_1.Dom.safeRemove(this.placeholderElm);
    };
    placeholder.prototype.toggle = function () {
        var editor = this.j;
        if (!editor.editor || editor.isInDestruct) {
            return;
        }
        if (editor.getRealMode() !== consts.MODE_WYSIWYG) {
            this.hide();
            return;
        }
        if (!this.isEmpty(editor.editor)) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    placeholder.prototype.isEmpty = function (root) {
        if (!root.firstChild) {
            return true;
        }
        var first = root.firstChild;
        if (constants_1.MAY_BE_REMOVED_WITH_KEY.test(first.nodeName) ||
            /^(TABLE)$/i.test(first.nodeName)) {
            return false;
        }
        var next = dom_1.Dom.next(first, function (node) { return node && !dom_1.Dom.isEmptyTextNode(node); }, root);
        if (dom_1.Dom.isText(first) && !next) {
            return dom_1.Dom.isEmptyTextNode(first);
        }
        if (!next &&
            dom_1.Dom.each(first, function (elm) {
                return !dom_1.Dom.isTag(elm, ['ul', 'li', 'ol']) &&
                    (dom_1.Dom.isEmpty(elm) || dom_1.Dom.isTag(elm, 'br'));
            })) {
            return true;
        }
        return false;
    };
    placeholder.prototype.beforeDestruct = function (jodit) {
        this.hide();
        this.j.e.off('.placeholder').off(window, 'load', this.toggle);
    };
    return placeholder;
}(plugin_1.Plugin));
exports.placeholder = placeholder;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.redoUndo = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var plugin_1 = __webpack_require__(6);
config_1.Config.prototype.controls.redo = {
    mode: consts.MODE_SPLIT,
    isDisabled: function (editor) { return !editor.observer.stack.canRedo(); },
    tooltip: 'Redo'
};
config_1.Config.prototype.controls.undo = {
    mode: consts.MODE_SPLIT,
    isDisabled: function (editor) { return !editor.observer.stack.canUndo(); },
    tooltip: 'Undo'
};
var redoUndo = (function (_super) {
    tslib_1.__extends(redoUndo, _super);
    function redoUndo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    redoUndo.prototype.beforeDestruct = function () {
    };
    redoUndo.prototype.afterInit = function (editor) {
        var callback = function (command) {
            editor.observer[command]();
            return false;
        };
        editor.registerCommand('redo', {
            exec: callback,
            hotkeys: ['ctrl+y', 'ctrl+shift+z', 'cmd+y', 'cmd+shift+z']
        });
        editor.registerCommand('undo', {
            exec: callback,
            hotkeys: ['ctrl+z', 'cmd+z']
        });
    };
    return redoUndo;
}(plugin_1.Plugin));
exports.redoUndo = redoUndo;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resizer = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(268);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var autobind_decorator_1 = __webpack_require__(10);
var global_1 = __webpack_require__(12);
config_1.Config.prototype.useIframeResizer = true;
config_1.Config.prototype.useTableResizer = true;
config_1.Config.prototype.useImageResizer = true;
config_1.Config.prototype.resizer = {
    showSize: true,
    hideSizeTimeout: 1000,
    min_width: 10,
    min_height: 10
};
var keyBInd = '__jodit-resizer_binded';
var resizer = (function (_super) {
    tslib_1.__extends(resizer, _super);
    function resizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.LOCK_KEY = 'resizer';
        _this.element = null;
        _this.isResized = false;
        _this.isShown = false;
        _this.start_x = 0;
        _this.start_y = 0;
        _this.width = 0;
        _this.height = 0;
        _this.ratio = 0;
        _this.rect = _this.j.c.fromHTML("<div class=\"jodit-resizer\">\n\t\t\t\t<i class=\"jodit-resizer-topleft\"></i>\n\t\t\t\t<i class=\"jodit-resizer-topright\"></i>\n\t\t\t\t<i class=\"jodit-resizer-bottomright\"></i>\n\t\t\t\t<i class=\"jodit-resizer-bottomleft\"></i>\n\t\t\t\t<span>100x100</span>\n\t\t\t</div>");
        _this.sizeViewer = _this.rect.getElementsByTagName('span')[0];
        _this.onResize = function (e) {
            if (_this.isResized) {
                var diff_x = e.clientX - _this.start_x, diff_y = e.clientY - _this.start_y;
                if (!_this.element) {
                    return;
                }
                var className = _this.handle.className;
                var new_w = 0, new_h = 0;
                if (dom_1.Dom.isTag(_this.element, 'img')) {
                    if (diff_x) {
                        new_w =
                            _this.width +
                                (className.match(/left/) ? -1 : 1) * diff_x;
                        new_h = Math.round(new_w / _this.ratio);
                    }
                    else {
                        new_h =
                            _this.height +
                                (className.match(/top/) ? -1 : 1) * diff_y;
                        new_w = Math.round(new_h * _this.ratio);
                    }
                    if (new_w > helpers_1.innerWidth(_this.j.editor, _this.j.ow)) {
                        new_w = helpers_1.innerWidth(_this.j.editor, _this.j.ow);
                        new_h = Math.round(new_w / _this.ratio);
                    }
                }
                else {
                    new_w =
                        _this.width + (className.match(/left/) ? -1 : 1) * diff_x;
                    new_h =
                        _this.height + (className.match(/top/) ? -1 : 1) * diff_y;
                }
                if (new_w > _this.j.o.resizer.min_width) {
                    if (new_w < _this.rect.parentNode.offsetWidth) {
                        helpers_1.css(_this.element, 'width', new_w);
                    }
                    else {
                        helpers_1.css(_this.element, 'width', '100%');
                    }
                }
                if (new_h > _this.j.o.resizer.min_height) {
                    helpers_1.css(_this.element, 'height', new_h);
                }
                _this.updateSize();
                _this.showSizeViewer(_this.element.offsetWidth, _this.element.offsetHeight);
                e.stopImmediatePropagation();
            }
        };
        _this.onClickOutside = function (e) {
            if (_this.isShown) {
                if (_this.isResized) {
                    _this.j.unlock();
                    _this.isResized = false;
                    _this.j.setEditorValue();
                    e.stopImmediatePropagation();
                    _this.j.e.off(_this.j.ow, 'mousemove.resizer touchmove.resizer', _this.onResize);
                }
                else {
                    _this.hide();
                }
            }
        };
        _this.onClickElement = function (element) {
            if (_this.element !== element || !_this.isShown) {
                _this.element = element;
                _this.show();
                if (dom_1.Dom.isTag(_this.element, 'img') && !_this.element.complete) {
                    _this.j.e.on(_this.element, 'load', _this.updateSize);
                }
            }
        };
        _this.updateSize = function () {
            if (_this.isInDestruct || !_this.isShown) {
                return;
            }
            if (_this.element && _this.rect) {
                var workplacePosition = helpers_1.offset((_this.rect.parentNode ||
                    _this.j.od.documentElement), _this.j, _this.j.od, true), pos = helpers_1.offset(_this.element, _this.j, _this.j.ed), left = parseInt(_this.rect.style.left || '0', 10), top_1 = parseInt(_this.rect.style.top || '0', 10), w = _this.rect.offsetWidth, h = _this.rect.offsetHeight;
                var newTop = pos.top - 1 - workplacePosition.top, newLeft = pos.left - 1 - workplacePosition.left;
                if (top_1 !== newTop ||
                    left !== newLeft ||
                    w !== _this.element.offsetWidth ||
                    h !== _this.element.offsetHeight) {
                    helpers_1.css(_this.rect, {
                        top: newTop,
                        left: newLeft,
                        width: _this.element.offsetWidth,
                        height: _this.element.offsetHeight
                    });
                    if (_this.j.events) {
                        _this.j.e.fire(_this.element, 'changesize');
                        if (!isNaN(left)) {
                            _this.j.e.fire('resize');
                        }
                    }
                }
            }
        };
        _this.hideSizeViewer = function () {
            _this.sizeViewer.style.opacity = '0';
        };
        return _this;
    }
    resizer.prototype.afterInit = function (editor) {
        var _this = this;
        helpers_1.$$('i', this.rect).forEach(function (resizeHandle) {
            editor.e.on(resizeHandle, 'mousedown.resizer touchstart.resizer', _this.onClickHandle.bind(_this, resizeHandle));
        });
        global_1.eventEmitter.on('hideHelpers', this.hide);
        editor.e
            .on('readonly', function (isReadOnly) {
            if (isReadOnly) {
                _this.hide();
            }
        })
            .on('afterInit changePlace', this.addEventListeners.bind(this))
            .on('afterGetValueFromEditor.resizer', function (data) {
            var rgx = /<jodit[^>]+data-jodit_iframe_wrapper[^>]+>(.*?<iframe[^>]+>[\s\n\r]*<\/iframe>.*?)<\/jodit>/gi;
            if (rgx.test(data.value)) {
                data.value = data.value.replace(rgx, '$1');
            }
        })
            .on('hideResizer', this.hide)
            .on('change afterInit afterSetMode', editor.async.debounce(this.onChangeEditor.bind(this), editor.defaultTimeout));
        this.addEventListeners();
        this.onChangeEditor();
    };
    resizer.prototype.addEventListeners = function () {
        var _this = this;
        var editor = this.j;
        editor.e
            .off(editor.editor, '.resizer')
            .off(editor.ow, '.resizer')
            .on(editor.editor, 'keydown.resizer', function (e) {
            if (_this.isShown &&
                e.key === consts.KEY_DELETE &&
                _this.element &&
                !dom_1.Dom.isTag(_this.element, 'table')) {
                _this.onDelete(e);
            }
        })
            .on(editor.ow, 'resize.resizer', this.updateSize)
            .on(editor.ow, 'mouseup.resizer keydown.resizer touchend.resizer', this.onClickOutside)
            .on([editor.ow, editor.editor], 'scroll.resizer', function () {
            if (_this.isShown && !_this.isResized) {
                _this.hide();
            }
        });
    };
    resizer.prototype.onClickHandle = function (resizeHandle, e) {
        if (!this.element || !this.element.parentNode) {
            this.hide();
            return false;
        }
        this.handle = resizeHandle;
        e.preventDefault();
        e.stopImmediatePropagation();
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.ratio = this.width / this.height;
        this.isResized = true;
        this.start_x = e.clientX;
        this.start_y = e.clientY;
        this.j.e.fire('hidePopup');
        this.j.lock(this.LOCK_KEY);
        this.j.e.on(this.j.ow, 'mousemove.resizer touchmove.resizer', this.onResize);
    };
    resizer.prototype.onDelete = function (e) {
        if (!this.element) {
            return;
        }
        if (this.element.tagName !== 'JODIT') {
            this.j.s.select(this.element);
        }
        else {
            dom_1.Dom.safeRemove(this.element);
            this.hide();
            e.preventDefault();
        }
    };
    resizer.prototype.onChangeEditor = function () {
        var _this = this;
        var editor = this.j;
        if (this.isShown) {
            if (!this.element || !this.element.parentNode) {
                this.hide();
            }
            else {
                this.updateSize();
            }
        }
        if (!editor.isDestructed) {
            helpers_1.$$('img, table, iframe', editor.editor).forEach(function (elm) {
                if (editor.getMode() === consts.MODE_SOURCE) {
                    return;
                }
                if (!elm[keyBInd] &&
                    ((dom_1.Dom.isTag(elm, 'iframe') &&
                        editor.o.useIframeResizer) ||
                        (dom_1.Dom.isTag(elm, 'img') &&
                            editor.o.useImageResizer) ||
                        (dom_1.Dom.isTag(elm, 'table') &&
                            editor.o.useTableResizer))) {
                    elm[keyBInd] = true;
                    _this.bind(elm);
                }
            });
        }
    };
    resizer.prototype.bind = function (element) {
        var _this = this;
        var wrapper;
        if (dom_1.Dom.isTag(element, 'iframe')) {
            var iframe_1 = element;
            if (helpers_1.attr(element.parentNode, '-jodit_iframe_wrapper')) {
                element = element.parentNode;
            }
            else {
                wrapper = this.j.createInside.fromHTML('<jodit ' +
                    'data-jodit-temp="1" ' +
                    'contenteditable="false" ' +
                    'draggable="true" ' +
                    'data-jodit_iframe_wrapper="1"' +
                    '></jodit>');
                helpers_1.css(wrapper, {
                    display: element.style.display === 'inline-block'
                        ? 'inline-block'
                        : 'block',
                    width: element.offsetWidth,
                    height: element.offsetHeight
                });
                if (element.parentNode) {
                    element.parentNode.insertBefore(wrapper, element);
                }
                wrapper.appendChild(element);
                element = wrapper;
            }
            this.j.e
                .off(element, 'mousedown.select touchstart.select')
                .on(element, 'mousedown.select touchstart.select', function () {
                _this.j.s.select(element);
            })
                .off(element, 'changesize')
                .on(element, 'changesize', function () {
                iframe_1.setAttribute('width', element.offsetWidth + 'px');
                iframe_1.setAttribute('height', element.offsetHeight + 'px');
            });
        }
        this.j.e
            .on(element, 'dragstart', this.hide)
            .on(element, 'mousedown', function (event) {
            if (constants_1.IS_IE && dom_1.Dom.isTag(element, 'img')) {
                event.preventDefault();
            }
        })
            .on(element, 'click', function () { return _this.onClickElement(element); });
    };
    resizer.prototype.showSizeViewer = function (w, h) {
        if (!this.j.o.resizer.showSize) {
            return;
        }
        if (w < this.sizeViewer.offsetWidth ||
            h < this.sizeViewer.offsetHeight) {
            this.hideSizeViewer();
            return;
        }
        this.sizeViewer.style.opacity = '1';
        this.sizeViewer.textContent = w + " x " + h;
        this.j.async.setTimeout(this.hideSizeViewer, {
            timeout: this.j.o.resizer.hideSizeTimeout,
            label: 'hideSizeViewer'
        });
    };
    resizer.prototype.show = function () {
        if (this.j.o.readonly || this.isShown) {
            return;
        }
        this.isShown = true;
        if (!this.rect.parentNode) {
            helpers_1.markOwner(this.j, this.rect);
            this.j.workplace.appendChild(this.rect);
        }
        if (this.j.isFullSize) {
            this.rect.style.zIndex = helpers_1.css(this.j.container, 'zIndex').toString();
        }
        this.updateSize();
    };
    resizer.prototype.hide = function () {
        this.isResized = false;
        this.isShown = false;
        this.element = null;
        dom_1.Dom.safeRemove(this.rect);
    };
    resizer.prototype.beforeDestruct = function (jodit) {
        this.hide();
        global_1.eventEmitter.off('hideHelpers', this.hide);
        this.j.e.off(this.j.ow, '.resizer').off('.resizer');
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], resizer.prototype, "hide", null);
    return resizer;
}(plugin_1.Plugin));
exports.resizer = resizer;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(270);
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var constants_1 = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var plugin_1 = __webpack_require__(6);
var ui_1 = __webpack_require__(8);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.useSearch = true;
var search = (function (_super) {
    tslib_1.__extends(search, _super);
    function search() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.template = "<div class=\"jodit-search\">\n\t\t\t<div class=\"jodit-search__box\">\n\t\t\t\t<div class=\"jodit-search__inputs\">\n\t\t\t\t\t<input data-ref=\"query\" tabindex=\"0\" placeholder=\"" + _this.j.i18n('Search for') + "\" type=\"text\"/>\n\t\t\t\t\t<input data-ref=\"replace\" tabindex=\"0\" placeholder=\"" + _this.j.i18n('Replace with') + "\" type=\"text\"/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"jodit-search__counts\">\n\t\t\t\t\t<span data-ref=\"counter-box\">0/0</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"jodit-search__buttons\">\n\t\t\t\t\t<button data-ref=\"next\" tabindex=\"0\" type=\"button\">" + ui_1.Icon.get('angle-down') + "</button>\n\t\t\t\t\t<button data-ref=\"prev\" tabindex=\"0\" type=\"button\">" + ui_1.Icon.get('angle-up') + "</button>\n\t\t\t\t\t<button data-ref=\"cancel\" tabindex=\"0\" type=\"button\">" + ui_1.Icon.get('cancel') + "</button>\n\t\t\t\t\t<button data-ref=\"replace-btn\" tabindex=\"0\" type=\"button\" class=\"jodit-ui-button\">" + _this.j.i18n('Replace') + "</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>";
        _this.isOpened = false;
        _this.selInfo = null;
        _this.current = null;
        _this.eachMap = function (node, callback, next) {
            dom_1.Dom.findWithCurrent(node, function (child) {
                return !!child && callback(child);
            }, _this.j.editor, next ? 'nextSibling' : 'previousSibling', next ? 'firstChild' : 'lastChild');
        };
        _this.updateCounters = function () {
            if (!_this.isOpened) {
                return;
            }
            _this.counterBox.style.display = _this.queryInput.value.length
                ? 'inline-block'
                : 'none';
            var range = _this.j.s.range, counts = _this.calcCounts(_this.queryInput.value, range);
            _this.counterBox.textContent = counts.join('/');
        };
        _this.calcCounts = function (query, current) {
            if (current === void 0) { current = false; }
            var bounds = [];
            var currentIndex = 0, count = 0, bound = false, start = _this.j.editor.firstChild;
            while (start && query.length) {
                bound = _this.find(start, query, true, 0, bound || _this.j.ed.createRange());
                if (bound) {
                    if (_this.boundAlreadyWas(bound, bounds)) {
                        break;
                    }
                    bounds.push(bound);
                    start = bound.startContainer;
                    count += 1;
                    if (current && _this.boundAlreadyWas(current, [bound])) {
                        currentIndex = count;
                    }
                }
                else {
                    start = null;
                }
            }
            return [currentIndex, count];
        };
        _this.findAndReplace = function (start, query) {
            var range = _this.j.s.range, bound = _this.find(start, query, true, 0, range);
            if (bound && bound.startContainer && bound.endContainer) {
                var rng = _this.j.ed.createRange();
                try {
                    if (bound && bound.startContainer && bound.endContainer) {
                        rng.setStart(bound.startContainer, bound.startOffset);
                        rng.setEnd(bound.endContainer, bound.endOffset);
                        rng.deleteContents();
                        var textNode = _this.j.createInside.text(_this.replaceInput.value);
                        rng.insertNode(textNode);
                        _this.j.s.select(textNode);
                        _this.tryScrollToElement(textNode);
                    }
                }
                catch (_a) { }
                return true;
            }
            return false;
        };
        _this.findAndSelect = function (start, query, next) {
            var range = _this.j.s.range, bound = _this.find(start, query, next, 0, range);
            if (bound && bound.startContainer && bound.endContainer) {
                var rng = _this.j.ed.createRange();
                try {
                    rng.setStart(bound.startContainer, bound.startOffset);
                    rng.setEnd(bound.endContainer, bound.endOffset);
                    _this.j.s.selectRange(rng);
                }
                catch (e) { }
                _this.tryScrollToElement(bound.startContainer);
                _this.current = bound.startContainer;
                _this.updateCounters();
                return true;
            }
            return false;
        };
        _this.find = function (start, query, next, deep, range) {
            if (start && query.length) {
                var sentence_1 = '', bound_1 = {
                    startContainer: null,
                    startOffset: null,
                    endContainer: null,
                    endOffset: null
                };
                _this.eachMap(start, function (elm) {
                    if (dom_1.Dom.isText(elm) &&
                        elm.nodeValue !== null &&
                        elm.nodeValue.length) {
                        var value = elm.nodeValue;
                        if (!next && elm === range.startContainer) {
                            value = !deep
                                ? value.substr(0, range.startOffset)
                                : value.substr(range.endOffset);
                        }
                        else if (next && elm === range.endContainer) {
                            value = !deep
                                ? value.substr(range.endOffset)
                                : value.substr(0, range.startOffset);
                        }
                        var tmpSentence = next
                            ? sentence_1 + value
                            : value + sentence_1;
                        var part = search.findSomePartOfString(query, tmpSentence, next);
                        if (part !== false) {
                            var currentPart = search.findSomePartOfString(query, value, next);
                            if (currentPart === true) {
                                currentPart = helpers_1.trim(query);
                            }
                            else if (currentPart === false) {
                                currentPart = search.findSomePartOfString(value, query, next);
                                if (currentPart === true) {
                                    currentPart = helpers_1.trim(value);
                                }
                            }
                            var currentPartIndex = search.getSomePartOfStringIndex(query, value, next) || 0;
                            if (((next && !deep) || (!next && deep)) &&
                                elm.nodeValue.length - value.length > 0) {
                                currentPartIndex +=
                                    elm.nodeValue.length - value.length;
                            }
                            if (bound_1.startContainer === null) {
                                bound_1.startContainer = elm;
                                bound_1.startOffset = currentPartIndex;
                            }
                            if (part !== true) {
                                sentence_1 = tmpSentence;
                            }
                            else {
                                bound_1.endContainer = elm;
                                bound_1.endOffset = currentPartIndex;
                                bound_1.endOffset += currentPart.length;
                                return true;
                            }
                        }
                        else {
                            sentence_1 = '';
                            bound_1 = {
                                startContainer: null,
                                startOffset: null,
                                endContainer: null,
                                endOffset: null
                            };
                        }
                    }
                    else if (dom_1.Dom.isBlock(elm, _this.j.ew) && sentence_1 !== '') {
                        sentence_1 = next ? sentence_1 + ' ' : ' ' + sentence_1;
                    }
                    return false;
                }, next);
                if (bound_1.startContainer && bound_1.endContainer) {
                    return bound_1;
                }
                if (!deep) {
                    _this.current = next
                        ? _this.j.editor.firstChild
                        : _this.j.editor.lastChild;
                    return _this.find(_this.current, query, next, deep + 1, range);
                }
            }
            return false;
        };
        _this.open = function (searchAndReplace) {
            if (searchAndReplace === void 0) { searchAndReplace = false; }
            if (!_this.isOpened) {
                _this.searchBox.classList.add('jodit-search_active');
                _this.isOpened = true;
            }
            _this.j.e.fire('hidePopup');
            _this.searchBox.classList.toggle('jodit-search_replace', searchAndReplace);
            _this.current = _this.j.s.current();
            _this.selInfo = _this.j.s.save();
            var selStr = (_this.j.s.sel || '').toString();
            if (selStr) {
                _this.queryInput.value = selStr;
            }
            _this.updateCounters();
            if (selStr) {
                _this.queryInput.select();
            }
            else {
                _this.queryInput.focus();
            }
        };
        _this.close = function () {
            if (!_this.isOpened) {
                return;
            }
            if (_this.selInfo) {
                _this.j.s.restore(_this.selInfo);
                _this.selInfo = null;
            }
            _this.searchBox.classList.remove('jodit-search_active');
            _this.isOpened = false;
        };
        return _this;
    }
    search.getSomePartOfStringIndex = function (needle, haystack, start) {
        if (start === void 0) { start = true; }
        return this.findSomePartOfString(needle, haystack, start, true);
    };
    search.findSomePartOfString = function (needle, haystack, start, getIndex) {
        if (start === void 0) { start = true; }
        if (getIndex === void 0) { getIndex = false; }
        needle = helpers_1.trim(needle.toLowerCase().replace(consts.SPACE_REG_EXP(), ' '));
        haystack = haystack.toLowerCase();
        var i = start ? 0 : haystack.length - 1, needleStart = start ? 0 : needle.length - 1, tmpEqualLength = 0, startAtIndex = null;
        var inc = start ? 1 : -1, tmp = [];
        for (; haystack[i] !== undefined; i += inc) {
            var some = needle[needleStart] === haystack[i];
            if (some ||
                (startAtIndex !== null &&
                    consts.SPACE_REG_EXP().test(haystack[i]))) {
                if (startAtIndex === null || !start) {
                    startAtIndex = i;
                }
                tmp.push(haystack[i]);
                if (some) {
                    tmpEqualLength += 1;
                    needleStart += inc;
                }
            }
            else {
                startAtIndex = null;
                tmp.length = 0;
                tmpEqualLength = 0;
                needleStart = start ? 0 : needle.length - 1;
            }
            if (tmpEqualLength === needle.length) {
                return getIndex ? startAtIndex : true;
            }
        }
        if (getIndex) {
            return startAtIndex !== null && startAtIndex !== void 0 ? startAtIndex : false;
        }
        if (tmp.length) {
            return start ? tmp.join('') : tmp.reverse().join('');
        }
        return false;
    };
    search.prototype.boundAlreadyWas = function (current, bounds) {
        return bounds.some(function (bound) {
            return (bound.startContainer === current.startContainer &&
                bound.endContainer === current.endContainer &&
                bound.startOffset === current.startOffset &&
                bound.endOffset === current.endOffset);
        }, false);
    };
    search.prototype.tryScrollToElement = function (startContainer) {
        var parentBox = dom_1.Dom.closest(startContainer, dom_1.Dom.isElement, this.j.editor);
        if (!parentBox) {
            parentBox = dom_1.Dom.prev(startContainer, dom_1.Dom.isElement, this.j.editor);
        }
        parentBox && parentBox !== this.j.editor && parentBox.scrollIntoView();
    };
    search.prototype.afterInit = function (editor) {
        var _this = this;
        if (editor.o.useSearch) {
            var self_1 = this;
            self_1.searchBox = editor.c.fromHTML(self_1.template);
            var _a = helpers_1.refs(self_1.searchBox), query = _a.query, replace = _a.replace, cancel = _a.cancel, next = _a.next, prev = _a.prev, replaceBtn = _a.replaceBtn, counterBox = _a.counterBox;
            self_1.queryInput = query;
            self_1.replaceInput = replace;
            self_1.closeButton = cancel;
            self_1.nextButton = next;
            self_1.prevButton = prev;
            self_1.replaceButton = replaceBtn;
            self_1.counterBox = counterBox;
            var onInit = function () {
                editor.workplace.appendChild(_this.searchBox);
                editor.e
                    .off(_this.j.container, 'keydown.search')
                    .on(_this.j.container, 'keydown.search', function (e) {
                    if (editor.getRealMode() !== constants_1.MODE_WYSIWYG) {
                        return;
                    }
                    switch (e.key) {
                        case consts.KEY_ESC:
                            _this.close();
                            break;
                        case consts.KEY_F3:
                            if (self_1.queryInput.value) {
                                editor.e.fire(!e.shiftKey
                                    ? 'searchNext'
                                    : 'searchPrevious');
                                e.preventDefault();
                            }
                            break;
                    }
                });
            };
            onInit();
            editor.e
                .on('changePlace', onInit)
                .on(self_1.closeButton, 'click', this.close)
                .on(self_1.queryInput, 'mousedown', function () {
                if (editor.s.isFocused()) {
                    editor.s.removeMarkers();
                    self_1.selInfo = editor.s.save();
                }
            })
                .on(self_1.replaceButton, 'click', function (e) {
                self_1.findAndReplace(editor.s.current() || editor.editor.firstChild, self_1.queryInput.value);
                _this.updateCounters();
                e.preventDefault();
                e.stopImmediatePropagation();
            })
                .on([self_1.nextButton, self_1.prevButton], 'click', function (e) {
                editor.e.fire(self_1.nextButton === this
                    ? 'searchNext'
                    : 'searchPrevious');
                e.preventDefault();
                e.stopImmediatePropagation();
            })
                .on(this.queryInput, 'keydown', this.j.async.debounce(function (e) {
                switch (e.key) {
                    case consts.KEY_ENTER:
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        if (editor.e.fire('searchNext')) {
                            _this.close();
                        }
                        break;
                    default:
                        _this.updateCounters();
                        break;
                }
            }, this.j.defaultTimeout))
                .on('beforeSetMode.search', function () {
                _this.close();
            })
                .on('keydown.search mousedown.search', function () {
                if (_this.selInfo) {
                    editor.s.removeMarkers();
                    _this.selInfo = null;
                }
                if (_this.isOpened) {
                    _this.current = _this.j.s.current();
                    _this.updateCounters();
                }
            })
                .on('searchNext.search searchPrevious.search', function () {
                return self_1.findAndSelect(editor.s.current() || editor.editor.firstChild, self_1.queryInput.value, editor.e.current === 'searchNext');
            })
                .on('search.search', function (value, next) {
                if (next === void 0) { next = true; }
                editor.execCommand('search', value, next);
            });
            editor.registerCommand('search', {
                exec: function (command, value, next) {
                    if (next === void 0) { next = true; }
                    self_1.findAndSelect(editor.s.current() || editor.editor.firstChild, value || '', next);
                    return false;
                }
            });
            editor.registerCommand('openSearchDialog', {
                exec: function () {
                    self_1.open();
                    return false;
                },
                hotkeys: ['ctrl+f', 'cmd+f']
            });
            editor.registerCommand('openReplaceDialog', {
                exec: function () {
                    if (!editor.o.readonly) {
                        self_1.open(true);
                    }
                    return false;
                },
                hotkeys: ['ctrl+h', 'cmd+h']
            });
        }
    };
    search.prototype.beforeDestruct = function (jodit) {
        var _a;
        dom_1.Dom.safeRemove(this.searchBox);
        (_a = jodit.events) === null || _a === void 0 ? void 0 : _a.off('.search');
    };
    return search;
}(plugin_1.Plugin));
exports.search = search;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.size = void 0;
__webpack_require__(272);
var config_1 = __webpack_require__(4);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.allowResizeX = false;
config_1.Config.prototype.allowResizeY = true;
function size(editor) {
    var setHeight = function (height) {
        helpers_1.css(editor.container, 'height', height);
        if (editor.o.saveHeightInStorage) {
            editor.storage.set('height', height);
        }
    };
    var setWidth = function (width) {
        return helpers_1.css(editor.container, 'width', width);
    };
    var setHeightWorkPlace = function (height) {
        return helpers_1.css(editor.workplace, 'height', height);
    };
    if (editor.o.height !== 'auto' &&
        (editor.o.allowResizeX || editor.o.allowResizeY)) {
        var handle_1 = editor.c.div('jodit-editor__resize', '<a tabindex="-1" href="javascript:void(0)"></a>'), start_1 = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
        var isResized_1 = false;
        var onMouseMove_1 = editor.async.throttle(function (e) {
            if (!isResized_1) {
                return;
            }
            if (editor.o.allowResizeY) {
                setHeight(start_1.h + e.clientY - start_1.y);
            }
            if (editor.o.allowResizeX) {
                setWidth(start_1.w + e.clientX - start_1.x);
            }
            resizeWorkspaceImd();
            editor.e.fire('resize');
        }, editor.defaultTimeout / 10);
        editor.e
            .on(handle_1, 'mousedown touchstart', function (e) {
            isResized_1 = true;
            start_1.x = e.clientX;
            start_1.y = e.clientY;
            start_1.w = editor.container.offsetWidth;
            start_1.h = editor.container.offsetHeight;
            editor.lock();
            editor.e.on(editor.ow, 'mousemove touchmove', onMouseMove_1);
            e.preventDefault();
        })
            .on(editor.ow, 'mouseup touchsend', function () {
            if (isResized_1) {
                isResized_1 = false;
                editor.e.off(editor.ow, 'mousemove touchmove', onMouseMove_1);
                editor.unlock();
            }
        })
            .on('afterInit', function () {
            editor.container.appendChild(handle_1);
        })
            .on('toggleFullSize', function (fullSize) {
            handle_1.style.display = fullSize ? 'none' : 'block';
        });
    }
    var getNotWorkHeight = function () {
        return (editor.o.toolbar ? editor.toolbar.container.offsetHeight : 0) +
            (editor.statusbar ? editor.statusbar.getHeight() : 0);
    };
    var calcMinHeightWorkspace = function () {
        if (!editor.container || !editor.container.parentNode) {
            return;
        }
        var minHeight = helpers_1.css(editor.container, 'minHeight') - getNotWorkHeight();
        [editor.workplace, editor.iframe, editor.editor].map(function (elm) {
            var minHeightD = elm === editor.editor ? minHeight - 2 : minHeight;
            elm && helpers_1.css(elm, 'minHeight', minHeightD);
            editor.e.fire('setMinHeight', minHeightD);
        });
    };
    var resizeWorkspaceImd = function () {
        if (!editor ||
            editor.isDestructed ||
            !editor.options ||
            editor.o.inline) {
            return;
        }
        calcMinHeightWorkspace();
        if (editor.container &&
            (editor.o.height !== 'auto' || editor.isFullSize)) {
            setHeightWorkPlace(editor.container.offsetHeight - getNotWorkHeight());
        }
    };
    var resizeWorkspace = editor.async.debounce(resizeWorkspaceImd, editor.defaultTimeout);
    editor.e
        .on('toggleFullSize', function (fullsize) {
        if (!fullsize && editor.o.height === 'auto') {
            setHeightWorkPlace('auto');
            calcMinHeightWorkspace();
        }
    })
        .on('afterInit changePlace', function () {
        if (!editor.o.inline) {
            helpers_1.css(editor.editor, {
                minHeight: '100%'
            });
            helpers_1.css(editor.container, {
                minHeight: editor.o.minHeight,
                minWidth: editor.o.minWidth,
                maxWidth: editor.o.maxWidth
            });
        }
        var height = editor.o.height;
        if (editor.o.saveHeightInStorage && height !== 'auto') {
            var localHeight = editor.storage.get('height');
            if (localHeight) {
                height = localHeight;
            }
        }
        if (!editor.o.inline) {
            setHeight(height);
            setWidth(editor.o.width);
        }
        resizeWorkspaceImd();
    }, undefined, true)
        .on(window, 'load', resizeWorkspace)
        .on('afterInit resize updateToolbar scroll afterResize', resizeWorkspace);
}
exports.size = size;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
__webpack_require__(274);
tslib_1.__exportStar(__webpack_require__(275), exports);


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
var consts = __webpack_require__(3);
var constants_1 = __webpack_require__(3);
config_1.Config.prototype.beautifyHTML = !constants_1.IS_IE;
config_1.Config.prototype.useAceEditor = true;
config_1.Config.prototype.sourceEditor = 'ace';
config_1.Config.prototype.sourceEditorNativeOptions = {
    showGutter: true,
    theme: 'ace/theme/idle_fingers',
    mode: 'ace/mode/html',
    wrap: true,
    highlightActiveLine: true
};
config_1.Config.prototype.sourceEditorCDNUrlsJS = [
    'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.10/ace.js'
];
config_1.Config.prototype.beautifyHTMLCDNUrlsJS = [
    'https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.11.0/beautify.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.11.0/beautify-html.min.js'
];
config_1.Config.prototype.controls.source = {
    mode: consts.MODE_SPLIT,
    exec: function (editor) {
        editor.toggleMode();
    },
    isActive: function (editor) {
        return editor.getRealMode() === consts.MODE_SOURCE;
    },
    tooltip: 'Change mode'
};


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.source = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(276);
var consts = __webpack_require__(3);
var constants_1 = __webpack_require__(3);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var factory_1 = __webpack_require__(277);
var source = (function (_super) {
    tslib_1.__extends(source, _super);
    function source() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.__lock = false;
        _this.__oldMirrorValue = '';
        _this.tempMarkerStart = '{start-jodit-selection}';
        _this.tempMarkerStartReg = /{start-jodit-selection}/g;
        _this.tempMarkerEnd = '{end-jodit-selection}';
        _this.tempMarkerEndReg = /{end-jodit-selection}/g;
        _this.selInfo = [];
        _this.insertHTML = function (html) {
            _this.sourceEditor.insertRaw(html);
            _this.toWYSIWYG();
        };
        _this.fromWYSIWYG = function (force) {
            if (force === void 0) { force = false; }
            if (!_this.__lock || force === true) {
                _this.__lock = true;
                var new_value = _this.j.getEditorValue(false);
                if (new_value !== _this.getMirrorValue()) {
                    _this.setMirrorValue(new_value);
                }
                _this.__lock = false;
            }
        };
        _this.toWYSIWYG = function () {
            if (_this.__lock) {
                return;
            }
            var value = _this.getMirrorValue();
            if (value === _this.__oldMirrorValue) {
                return;
            }
            _this.__lock = true;
            _this.j.setEditorValue(value);
            _this.__lock = false;
            _this.__oldMirrorValue = value;
        };
        _this.getNormalPosition = function (pos, str) {
            var start = pos;
            while (start > 0) {
                start--;
                if (str[start] === '<' &&
                    str[start + 1] !== undefined &&
                    str[start + 1].match(/[\w\/]+/i)) {
                    return start;
                }
                if (str[start] === '>') {
                    return pos;
                }
            }
            return pos;
        };
        _this.__clear = function (str) {
            return str.replace(consts.INVISIBLE_SPACE_REG_EXP(), '');
        };
        _this.selectAll = function () {
            _this.sourceEditor.selectAll();
        };
        _this.onSelectAll = function (command) {
            if (command.toLowerCase() === 'selectall' &&
                _this.j.getRealMode() === constants_1.MODE_SOURCE) {
                _this.selectAll();
                return false;
            }
        };
        _this.getSelectionStart = function () {
            return _this.sourceEditor.getSelectionStart();
        };
        _this.getSelectionEnd = function () {
            return _this.sourceEditor.getSelectionEnd();
        };
        _this.saveSelection = function () {
            if (_this.j.getRealMode() === consts.MODE_WYSIWYG) {
                _this.selInfo = _this.j.s.save() || [];
                _this.j.setEditorValue();
                _this.fromWYSIWYG(true);
            }
            else {
                _this.selInfo.length = 0;
                var value = _this.getMirrorValue();
                if (_this.getSelectionStart() === _this.getSelectionEnd()) {
                    var marker = _this.j.s.marker(true);
                    _this.selInfo[0] = {
                        startId: marker.id,
                        collapsed: true,
                        startMarker: marker.outerHTML
                    };
                    var selectionStart = _this.getNormalPosition(_this.getSelectionStart(), _this.getMirrorValue());
                    _this.setMirrorValue(value.substr(0, selectionStart) +
                        _this.__clear(_this.selInfo[0].startMarker) +
                        value.substr(selectionStart));
                }
                else {
                    var markerStart = _this.j.s.marker(true);
                    var markerEnd = _this.j.s.marker(false);
                    _this.selInfo[0] = {
                        startId: markerStart.id,
                        endId: markerEnd.id,
                        collapsed: false,
                        startMarker: _this.__clear(markerStart.outerHTML),
                        endMarker: _this.__clear(markerEnd.outerHTML)
                    };
                    var selectionStart = _this.getNormalPosition(_this.getSelectionStart(), value);
                    var selectionEnd = _this.getNormalPosition(_this.getSelectionEnd(), value);
                    _this.setMirrorValue(value.substr(0, selectionStart) +
                        _this.selInfo[0].startMarker +
                        value.substr(selectionStart, selectionEnd - selectionStart) +
                        _this.selInfo[0].endMarker +
                        value.substr(selectionEnd));
                }
                _this.toWYSIWYG();
            }
        };
        _this.removeSelection = function () {
            if (!_this.selInfo.length) {
                return;
            }
            if (_this.j.getRealMode() === consts.MODE_WYSIWYG) {
                _this.__lock = true;
                _this.j.s.restore(_this.selInfo);
                _this.__lock = false;
                return;
            }
            var value = _this.getMirrorValue();
            var selectionStart = 0, selectionEnd = 0;
            try {
                if (_this.selInfo[0].startMarker) {
                    value = value.replace(/<span[^>]+data-jodit-selection_marker="start"[^>]*>[<>]*?<\/span>/gim, _this.tempMarkerStart);
                }
                if (_this.selInfo[0].endMarker) {
                    value = value.replace(/<span[^>]+data-jodit-selection_marker="end"[^>]*>[<>]*?<\/span>/gim, _this.tempMarkerEnd);
                }
                if (_this.j.o.beautifyHTML) {
                    var html = _this.j.e.fire('beautifyHTML', value);
                    if (helpers_1.isString(html)) {
                        value = html;
                    }
                }
                selectionStart = value.indexOf(_this.tempMarkerStart);
                selectionEnd = selectionStart;
                value = value.replace(_this.tempMarkerStartReg, '');
                if (!_this.selInfo[0].collapsed || selectionStart === -1) {
                    selectionEnd = value.indexOf(_this.tempMarkerEnd);
                    if (selectionStart === -1) {
                        selectionStart = selectionEnd;
                    }
                }
                value = value.replace(_this.tempMarkerEndReg, '');
            }
            finally {
                value = value
                    .replace(_this.tempMarkerEndReg, '')
                    .replace(_this.tempMarkerStartReg, '');
            }
            _this.setMirrorValue(value);
            _this.setMirrorSelectionRange(selectionStart, selectionEnd);
            _this.toWYSIWYG();
            _this.setFocusToMirror();
        };
        _this.setMirrorSelectionRange = function (start, end) {
            _this.sourceEditor.setSelectionRange(start, end);
        };
        _this.onReadonlyReact = function () {
            _this.sourceEditor.setReadOnly(_this.j.o.readonly);
        };
        return _this;
    }
    source.prototype.getMirrorValue = function () {
        return this.sourceEditor.getValue();
    };
    source.prototype.setMirrorValue = function (value) {
        this.sourceEditor.setValue(value);
    };
    source.prototype.setFocusToMirror = function () {
        this.sourceEditor.focus();
    };
    source.prototype.initSourceEditor = function (editor) {
        var _this = this;
        if (editor.o.sourceEditor !== 'area') {
            var sourceEditor_1 = factory_1.createSourceEditor(editor.o.sourceEditor, editor, this.mirrorContainer, this.toWYSIWYG, this.fromWYSIWYG);
            sourceEditor_1.onReadyAlways(function () {
                var _a, _b;
                (_a = _this.sourceEditor) === null || _a === void 0 ? void 0 : _a.destruct();
                _this.sourceEditor = sourceEditor_1;
                (_b = editor.events) === null || _b === void 0 ? void 0 : _b.fire('sourceEditorReady', editor);
            });
        }
        else {
            this.sourceEditor.onReadyAlways(function () {
                var _a;
                (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('sourceEditorReady', editor);
            });
        }
    };
    source.prototype.afterInit = function (editor) {
        var _this = this;
        this.mirrorContainer = editor.c.div('jodit-source');
        editor.workplace.appendChild(this.mirrorContainer);
        editor.e.on('afterAddPlace changePlace afterInit', function () {
            editor.workplace.appendChild(_this.mirrorContainer);
        });
        this.sourceEditor = factory_1.createSourceEditor('area', editor, this.mirrorContainer, this.toWYSIWYG, this.fromWYSIWYG);
        var addListeners = function () {
            editor.e
                .off('beforeSetMode.source afterSetMode.source')
                .on('beforeSetMode.source', _this.saveSelection)
                .on('afterSetMode.source', _this.removeSelection);
        };
        addListeners();
        this.onReadonlyReact();
        editor.e
            .on('insertHTML.source', function (html) {
            if (!editor.o.readonly && !_this.j.isEditorMode()) {
                _this.insertHTML(html);
                return false;
            }
        })
            .on('readonly.source', this.onReadonlyReact)
            .on('placeholder.source', function (text) {
            _this.sourceEditor.setPlaceHolder(text);
        })
            .on('beforeCommand.source', this.onSelectAll)
            .on('change.source', this.fromWYSIWYG);
        editor.e.on('beautifyHTML', function (html) { return html; });
        if (editor.o.beautifyHTML) {
            var addEventListener_1 = function () {
                var _a, _b;
                var html_beautify = editor.ow.html_beautify;
                if (html_beautify && !editor.isInDestruct) {
                    (_b = (_a = editor.events) === null || _a === void 0 ? void 0 : _a.off('beautifyHTML')) === null || _b === void 0 ? void 0 : _b.on('beautifyHTML', function (html) { return html_beautify(html); });
                    return true;
                }
                return false;
            };
            if (!addEventListener_1()) {
                helpers_1.loadNext(editor, editor.o.beautifyHTMLCDNUrlsJS).then(addEventListener_1);
            }
        }
        this.fromWYSIWYG();
        this.initSourceEditor(editor);
    };
    source.prototype.beforeDestruct = function (jodit) {
        if (this.sourceEditor) {
            this.sourceEditor.destruct();
            delete this.sourceEditor;
        }
        dom_1.Dom.safeRemove(this.mirrorContainer);
    };
    return source;
}(plugin_1.Plugin));
exports.source = source;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSourceEditor = void 0;
var engines_1 = __webpack_require__(278);
function createSourceEditor(type, editor, container, toWYSIWYG, fromWYSIWYG) {
    var sourceEditor;
    switch (type) {
        case 'ace':
            if (!editor.o.shadowRoot) {
                sourceEditor = new engines_1.AceEditor(editor, container, toWYSIWYG, fromWYSIWYG);
                break;
            }
        default:
            sourceEditor = new engines_1.TextAreaEditor(editor, container, toWYSIWYG, fromWYSIWYG);
    }
    sourceEditor.init(editor);
    sourceEditor.onReadyAlways(function () {
        sourceEditor.setReadOnly(editor.o.readonly);
    });
    return sourceEditor;
}
exports.createSourceEditor = createSourceEditor;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
tslib_1.__exportStar(__webpack_require__(279), exports);
tslib_1.__exportStar(__webpack_require__(280), exports);


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAreaEditor = void 0;
var tslib_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(1);
var modules_1 = __webpack_require__(9);
var sourceEditor_1 = __webpack_require__(68);
var TextAreaEditor = (function (_super) {
    tslib_1.__extends(TextAreaEditor, _super);
    function TextAreaEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.autosize = _this.j.async.debounce(function () {
            _this.instance.style.height = 'auto';
            _this.instance.style.height = _this.instance.scrollHeight + 'px';
        }, _this.j.defaultTimeout);
        return _this;
    }
    TextAreaEditor.prototype.init = function (editor) {
        var _this = this;
        this.instance = editor.c.element('textarea', {
            class: 'jodit-source__mirror'
        });
        this.container.appendChild(this.instance);
        editor.e
            .on(this.instance, 'mousedown keydown touchstart input', editor.async.debounce(this.toWYSIWYG, editor.defaultTimeout))
            .on('setMinHeight.source', function (minHeightD) {
            helpers_1.css(_this.instance, 'minHeight', minHeightD);
        })
            .on(this.instance, 'change keydown mousedown touchstart input', this.autosize)
            .on('afterSetMode.source', this.autosize)
            .on(this.instance, 'mousedown focus', function (e) {
            editor.e.fire(e.type, e);
        });
        this.autosize();
        this.onReady();
    };
    TextAreaEditor.prototype.destruct = function () {
        modules_1.Dom.safeRemove(this.instance);
    };
    TextAreaEditor.prototype.getValue = function () {
        return this.instance.value;
    };
    TextAreaEditor.prototype.setValue = function (raw) {
        this.instance.value = raw;
    };
    TextAreaEditor.prototype.insertRaw = function (raw) {
        var value = this.getValue();
        if (this.getSelectionStart() >= 0) {
            var startPos = this.getSelectionStart(), endPos = this.getSelectionEnd();
            this.setValue(value.substring(0, startPos) +
                raw +
                value.substring(endPos, value.length));
        }
        else {
            this.setValue(value + raw);
        }
    };
    TextAreaEditor.prototype.getSelectionStart = function () {
        return this.instance.selectionStart;
    };
    TextAreaEditor.prototype.getSelectionEnd = function () {
        return this.instance.selectionEnd;
    };
    TextAreaEditor.prototype.setSelectionRange = function (start, end) {
        if (end === void 0) { end = start; }
        this.instance.setSelectionRange(start, end);
    };
    TextAreaEditor.prototype.focus = function () {
        this.instance.focus();
    };
    TextAreaEditor.prototype.setPlaceHolder = function (title) {
        this.instance.setAttribute('placeholder', title);
    };
    TextAreaEditor.prototype.setReadOnly = function (isReadOnly) {
        if (isReadOnly) {
            this.instance.setAttribute('readonly', 'true');
        }
        else {
            this.instance.removeAttribute('readonly');
        }
    };
    TextAreaEditor.prototype.selectAll = function () {
        this.instance.select();
    };
    TextAreaEditor.prototype.replaceUndoManager = function () {
        var _this = this;
        var observer = this.jodit.observer;
        this.j.e.on(this.instance, 'keydown', function (e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'z') {
                if (e.shiftKey) {
                    observer.redo();
                }
                else {
                    observer.undo();
                }
                _this.setSelectionRange(_this.getValue().length);
                return false;
            }
        });
    };
    return TextAreaEditor;
}(sourceEditor_1.SourceEditor));
exports.TextAreaEditor = TextAreaEditor;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AceEditor = void 0;
var tslib_1 = __webpack_require__(0);
var constants = __webpack_require__(3);
var helpers_1 = __webpack_require__(1);
var sourceEditor_1 = __webpack_require__(68);
var AceEditor = (function (_super) {
    tslib_1.__extends(AceEditor, _super);
    function AceEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.className = 'jodit_ace_editor';
        _this.proxyOnFocus = function (e) {
            _this.j.e.fire('focus', e);
        };
        _this.proxyOnMouseDown = function (e) {
            _this.j.e.fire('mousedown', e);
        };
        return _this;
    }
    AceEditor.prototype.aceExists = function () {
        return this.j.ow.ace !== undefined;
    };
    AceEditor.prototype.getLastColumnIndex = function (row) {
        return this.instance.session.getLine(row).length;
    };
    AceEditor.prototype.getLastColumnIndices = function () {
        var rows = this.instance.session.getLength();
        var lastColumnIndices = [];
        var lastColIndex = 0;
        for (var i = 0; i < rows; i++) {
            lastColIndex += this.getLastColumnIndex(i);
            if (i > 0) {
                lastColIndex += 1;
            }
            lastColumnIndices[i] = lastColIndex;
        }
        return lastColumnIndices;
    };
    AceEditor.prototype.getRowColumnIndices = function (characterIndex) {
        var lastColumnIndices = this.getLastColumnIndices();
        if (characterIndex <= lastColumnIndices[0]) {
            return { row: 0, column: characterIndex };
        }
        var row = 1;
        for (var i = 1; i < lastColumnIndices.length; i++) {
            if (characterIndex > lastColumnIndices[i]) {
                row = i + 1;
            }
        }
        var column = characterIndex - lastColumnIndices[row - 1] - 1;
        return { row: row, column: column };
    };
    AceEditor.prototype.setSelectionRangeIndices = function (start, end) {
        var startRowColumn = this.getRowColumnIndices(start);
        var endRowColumn = this.getRowColumnIndices(end);
        this.instance.getSelection().setSelectionRange({
            start: startRowColumn,
            end: endRowColumn
        });
    };
    AceEditor.prototype.getIndexByRowColumn = function (row, column) {
        var lastColumnIndices = this.getLastColumnIndices();
        return lastColumnIndices[row] - this.getLastColumnIndex(row) + column;
    };
    AceEditor.prototype.init = function (editor) {
        var _this = this;
        var tryInitAceEditor = function () {
            if (_this.instance !== undefined || !_this.aceExists()) {
                return;
            }
            var fakeMirror = _this.j.c.div('jodit-source__mirror-fake');
            _this.container.appendChild(fakeMirror);
            var ace = editor.ow.ace;
            _this.instance = ace.edit(fakeMirror);
            _this.instance.setTheme(editor.o.sourceEditorNativeOptions.theme);
            _this.instance.renderer.setShowGutter(editor.o.sourceEditorNativeOptions.showGutter);
            _this.instance
                .getSession()
                .setMode(editor.o.sourceEditorNativeOptions.mode);
            _this.instance.setHighlightActiveLine(editor.o.sourceEditorNativeOptions.highlightActiveLine);
            _this.instance.getSession().setUseWrapMode(true);
            _this.instance.setOption('indentedSoftWrap', false);
            _this.instance.setOption('wrap', editor.o.sourceEditorNativeOptions.wrap);
            _this.instance.getSession().setUseWorker(false);
            _this.instance.$blockScrolling = Infinity;
            _this.instance.on('change', _this.toWYSIWYG);
            _this.instance.on('focus', _this.proxyOnFocus);
            _this.instance.on('mousedown', _this.proxyOnMouseDown);
            if (editor.getRealMode() !== constants.MODE_WYSIWYG) {
                _this.setValue(_this.getValue());
            }
            var onResize = _this.j.async.debounce(function () {
                if (editor.isInDestruct) {
                    return;
                }
                if (editor.o.height !== 'auto') {
                    _this.instance.setOption('maxLines', editor.workplace.offsetHeight /
                        _this.instance.renderer.lineHeight);
                }
                else {
                    _this.instance.setOption('maxLines', Infinity);
                }
                _this.instance.resize();
            }, _this.j.defaultTimeout * 2);
            editor.e.on('afterResize afterSetMode', onResize);
            onResize();
            _this.onReady();
        };
        editor.e.on('afterSetMode', function () {
            if (editor.getRealMode() !== constants.MODE_SOURCE &&
                editor.getMode() !== constants.MODE_SPLIT) {
                return;
            }
            _this.fromWYSIWYG();
            tryInitAceEditor();
        });
        tryInitAceEditor();
        if (!this.aceExists()) {
            helpers_1.loadNext(editor, editor.o.sourceEditorCDNUrlsJS).then(function () {
                if (!editor.isInDestruct) {
                    tryInitAceEditor();
                }
            });
        }
    };
    AceEditor.prototype.destruct = function () {
        var _a, _b;
        this.instance.off('change', this.toWYSIWYG);
        this.instance.off('focus', this.proxyOnFocus);
        this.instance.off('mousedown', this.proxyOnMouseDown);
        this.instance.destroy();
        (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.off('aceInited.source');
    };
    AceEditor.prototype.setValue = function (value) {
        if (this.j.o.beautifyHTML) {
            var html = this.j.e.fire('beautifyHTML', value);
            if (helpers_1.isString(html)) {
                value = html;
            }
        }
        this.instance.setValue(value);
        this.instance.clearSelection();
    };
    AceEditor.prototype.getValue = function () {
        return this.instance.getValue();
    };
    AceEditor.prototype.setReadOnly = function (isReadOnly) {
        this.instance.setReadOnly(isReadOnly);
    };
    AceEditor.prototype.focus = function () {
        this.instance.focus();
    };
    AceEditor.prototype.getSelectionStart = function () {
        var range = this.instance.selection.getRange();
        return this.getIndexByRowColumn(range.start.row, range.start.column);
    };
    AceEditor.prototype.getSelectionEnd = function () {
        var range = this.instance.selection.getRange();
        return this.getIndexByRowColumn(range.end.row, range.end.column);
    };
    AceEditor.prototype.selectAll = function () {
        this.instance.selection.selectAll();
    };
    AceEditor.prototype.insertRaw = function (html) {
        var start = this.instance.selection.getCursor(), end = this.instance.session.insert(start, html);
        this.instance.selection.setRange({
            start: start,
            end: end
        }, false);
    };
    AceEditor.prototype.setSelectionRange = function (start, end) {
        this.setSelectionRangeIndices(start, end);
    };
    AceEditor.prototype.setPlaceHolder = function (title) {
    };
    AceEditor.prototype.replaceUndoManager = function () {
        var observer = this.jodit.observer;
        this.instance.commands.addCommand({
            name: 'Undo',
            bindKey: { win: 'Ctrl-Z', mac: 'Command-Z' },
            exec: function () {
                observer.undo();
            }
        });
        this.instance.commands.addCommand({
            name: 'Redo',
            bindKey: { win: 'Ctrl-Shift-Z', mac: 'Command-Shift-Z' },
            exec: function () {
                observer.redo();
            }
        });
    };
    return AceEditor;
}(sourceEditor_1.SourceEditor));
exports.AceEditor = AceEditor;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stat = void 0;
var tslib_1 = __webpack_require__(0);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
config_1.Config.prototype.showCharsCounter = true;
config_1.Config.prototype.showWordsCounter = true;
var stat = (function (_super) {
    tslib_1.__extends(stat, _super);
    function stat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.reInit = function () {
            if (_this.j.o.showCharsCounter) {
                _this.j.statusbar.append(_this.charCounter, true);
            }
            if (_this.j.o.showWordsCounter) {
                _this.j.statusbar.append(_this.wordCounter, true);
            }
            _this.j.e.off('change keyup', _this.calc).on('change keyup', _this.calc);
            _this.calc();
        };
        _this.calc = _this.j.async.throttle(function () {
            var text = _this.j.text;
            if (_this.j.o.showCharsCounter) {
                _this.charCounter.textContent = _this.j.i18n('Chars: %d', text.replace(constants_1.SPACE_REG_EXP(), '').length);
            }
            if (_this.j.o.showWordsCounter) {
                _this.wordCounter.textContent = _this.j.i18n('Words: %d', text
                    .replace(constants_1.INVISIBLE_SPACE_REG_EXP(), '')
                    .split(constants_1.SPACE_REG_EXP())
                    .filter(function (e) { return e.length; }).length);
            }
        }, _this.j.defaultTimeout);
        return _this;
    }
    stat.prototype.afterInit = function () {
        this.charCounter = this.j.c.span();
        this.wordCounter = this.j.c.span();
        this.j.e.on('afterInit changePlace afterAddPlace', this.reInit);
        this.reInit();
    };
    stat.prototype.beforeDestruct = function () {
        dom_1.Dom.safeRemove(this.charCounter);
        dom_1.Dom.safeRemove(this.wordCounter);
        this.j.e.off('afterInit changePlace afterAddPlace', this.reInit);
        delete this.charCounter;
        delete this.wordCounter;
    };
    return stat;
}(plugin_1.Plugin));
exports.stat = stat;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sticky = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(283);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.toolbarSticky = true;
config_1.Config.prototype.toolbarDisableStickyForMobile = true;
config_1.Config.prototype.toolbarStickyOffset = 0;
var sticky = (function (_super) {
    tslib_1.__extends(sticky, _super);
    function sticky() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isToolbarSticked = false;
        _this.createDummy = function (toolbar) {
            if (constants_1.IS_IE && !_this.dummyBox) {
                _this.dummyBox = _this.j.c.div();
                _this.dummyBox.classList.add('jodit_sticky-dummy_toolbar');
                _this.j.container.insertBefore(_this.dummyBox, toolbar);
            }
        };
        _this.addSticky = function (toolbar) {
            if (!_this.isToolbarSticked) {
                _this.createDummy(toolbar);
                _this.j.container.classList.add('jodit_sticky');
                _this.isToolbarSticked = true;
            }
            helpers_1.css(toolbar, {
                top: _this.j.o.toolbarStickyOffset,
                width: _this.j.container.offsetWidth - 2
            });
            if (constants_1.IS_IE && _this.dummyBox) {
                helpers_1.css(_this.dummyBox, {
                    height: toolbar.offsetHeight
                });
            }
        };
        _this.removeSticky = function (toolbar) {
            if (_this.isToolbarSticked) {
                helpers_1.css(toolbar, {
                    width: '',
                    top: ''
                });
                _this.j.container.classList.remove('jodit_sticky');
                _this.isToolbarSticked = false;
            }
        };
        return _this;
    }
    sticky.prototype.isMobile = function () {
        return (this.j &&
            this.j.options &&
            this.j.container &&
            this.j.o.sizeSM >= this.j.container.offsetWidth);
    };
    sticky.prototype.afterInit = function (jodit) {
        var _this = this;
        jodit.e.on(jodit.ow, 'scroll wheel mousewheel resize', function () {
            var scrollWindowTop = jodit.ow.pageYOffset ||
                (jodit.od.documentElement &&
                    jodit.od.documentElement.scrollTop) ||
                0, offsetEditor = helpers_1.offset(jodit.container, jodit, jodit.od, true), doSticky = jodit.getMode() === constants_1.MODE_WYSIWYG &&
                scrollWindowTop + jodit.o.toolbarStickyOffset >
                    offsetEditor.top &&
                scrollWindowTop + jodit.o.toolbarStickyOffset <
                    offsetEditor.top + offsetEditor.height &&
                !(jodit.o.toolbarDisableStickyForMobile && _this.isMobile());
            if (jodit.o.toolbarSticky && jodit.o.toolbar === true) {
                var container = jodit.toolbarContainer;
                if (container) {
                    doSticky
                        ? _this.addSticky(container)
                        : _this.removeSticky(container);
                }
            }
            jodit.e.fire('toggleSticky', doSticky);
        });
    };
    sticky.prototype.beforeDestruct = function (jodit) {
        this.dummyBox && modules_1.Dom.safeRemove(this.dummyBox);
    };
    return sticky;
}(modules_1.Plugin));
exports.sticky = sticky;


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.symbols = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(285);
__webpack_require__(286);
var constants_1 = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var utils_1 = __webpack_require__(15);
var symbols = (function (_super) {
    tslib_1.__extends(symbols, _super);
    function symbols() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.countInRow = 17;
        return _this;
    }
    symbols.prototype.afterInit = function (jodit) {
        var _this = this;
        jodit.e.on('generateSpecialCharactersTable.symbols', function () {
            var container = jodit.c.fromHTML('<div class="jodit-symbols__container">' +
                '<div class="jodit-symbols__container_table"><table><tbody></tbody></table></div>' +
                '<div class="jodit-symbols__container_preview"><div class="jodit-symbols__preview"></div></div>' +
                '</div>'), preview = container.querySelector('.jodit-symbols__preview'), table = container.querySelector('table'), body = table.tBodies[0], chars = [];
            for (var i = 0; i < jodit.o.specialCharacters.length;) {
                var tr = jodit.c.element('tr');
                for (var j = 0; j < _this.countInRow && i < jodit.o.specialCharacters.length; j += 1, i += 1) {
                    var td = jodit.c.element('td'), a = jodit.c.fromHTML("<a\n\t\t\t\t\t\t\t\t\tdata-index=\"" + i + "\"\n\t\t\t\t\t\t\t\t\tdata-index-j=\"" + j + "\"\n\t\t\t\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\t\t\t\trole=\"option\"\n\t\t\t\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t\t>" + jodit.o.specialCharacters[i] + "</a>");
                    chars.push(a);
                    td.appendChild(a);
                    tr.appendChild(td);
                }
                body.appendChild(tr);
            }
            var self = _this;
            jodit.e
                .on(chars, 'focus', function () {
                preview.innerHTML = this.innerHTML;
            })
                .on(chars, 'mousedown', function (e) {
                if (modules_1.Dom.isTag(this, 'a')) {
                    jodit.s.focus();
                    jodit.s.insertHTML(this.innerHTML);
                    jodit.e.fire(this, 'close_dialog');
                    e && e.preventDefault();
                    e && e.stopImmediatePropagation();
                }
            })
                .on(chars, 'mouseenter', function () {
                if (modules_1.Dom.isTag(this, 'a')) {
                    this.focus();
                }
            })
                .on(chars, 'keydown', function (e) {
                var target = e.target;
                if (modules_1.Dom.isTag(target, 'a')) {
                    var index = parseInt(utils_1.attr(target, '-index') || '0', 10), jIndex = parseInt(utils_1.attr(target, 'data-index-j') || '0', 10);
                    var newIndex = void 0;
                    switch (e.key) {
                        case constants_1.KEY_UP:
                        case constants_1.KEY_DOWN:
                            newIndex =
                                e.key === constants_1.KEY_UP
                                    ? index - self.countInRow
                                    : index + self.countInRow;
                            if (chars[newIndex] === undefined) {
                                newIndex =
                                    e.key === constants_1.KEY_UP
                                        ? Math.floor(chars.length /
                                            self.countInRow) *
                                            self.countInRow +
                                            jIndex
                                        : jIndex;
                                if (newIndex > chars.length - 1) {
                                    newIndex -= self.countInRow;
                                }
                            }
                            chars[newIndex] && chars[newIndex].focus();
                            break;
                        case constants_1.KEY_RIGHT:
                        case constants_1.KEY_LEFT:
                            newIndex =
                                e.key === constants_1.KEY_LEFT ? index - 1 : index + 1;
                            if (chars[newIndex] === undefined) {
                                newIndex =
                                    e.key === constants_1.KEY_LEFT
                                        ? chars.length - 1
                                        : 0;
                            }
                            chars[newIndex] && chars[newIndex].focus();
                            break;
                        case constants_1.KEY_ENTER:
                            jodit.e.fire(target, 'mousedown');
                            e.stopImmediatePropagation();
                            e.preventDefault();
                            break;
                    }
                }
            });
            return container;
        });
    };
    symbols.prototype.beforeDestruct = function (jodit) {
        jodit.e.off('generateSpecialCharactersTable.symbols');
    };
    return symbols;
}(modules_1.Plugin));
exports.symbols = symbols;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
var dialog_1 = __webpack_require__(14);
config_1.Config.prototype.usePopupForSpecialCharacters = false;
config_1.Config.prototype.specialCharacters = [
    '!',
    '&quot;',
    '#',
    '$',
    '%',
    '&amp;',
    "'",
    '(',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    ':',
    ';',
    '&lt;',
    '=',
    '&gt;',
    '?',
    '@',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    '[',
    ']',
    '^',
    '_',
    '`',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    '{',
    '|',
    '}',
    '~',
    '&euro;',
    '&lsquo;',
    '&rsquo;',
    '&ldquo;',
    '&rdquo;',
    '&ndash;',
    '&mdash;',
    '&iexcl;',
    '&cent;',
    '&pound;',
    '&curren;',
    '&yen;',
    '&brvbar;',
    '&sect;',
    '&uml;',
    '&copy;',
    '&ordf;',
    '&laquo;',
    '&raquo;',
    '&not;',
    '&reg;',
    '&macr;',
    '&deg;',
    '&sup2;',
    '&sup3;',
    '&acute;',
    '&micro;',
    '&para;',
    '&middot;',
    '&cedil;',
    '&sup1;',
    '&ordm;',
    '&frac14;',
    '&frac12;',
    '&frac34;',
    '&iquest;',
    '&Agrave;',
    '&Aacute;',
    '&Acirc;',
    '&Atilde;',
    '&Auml;',
    '&Aring;',
    '&AElig;',
    '&Ccedil;',
    '&Egrave;',
    '&Eacute;',
    '&Ecirc;',
    '&Euml;',
    '&Igrave;',
    '&Iacute;',
    '&Icirc;',
    '&Iuml;',
    '&ETH;',
    '&Ntilde;',
    '&Ograve;',
    '&Oacute;',
    '&Ocirc;',
    '&Otilde;',
    '&Ouml;',
    '&times;',
    '&Oslash;',
    '&Ugrave;',
    '&Uacute;',
    '&Ucirc;',
    '&Uuml;',
    '&Yacute;',
    '&THORN;',
    '&szlig;',
    '&agrave;',
    '&aacute;',
    '&acirc;',
    '&atilde;',
    '&auml;',
    '&aring;',
    '&aelig;',
    '&ccedil;',
    '&egrave;',
    '&eacute;',
    '&ecirc;',
    '&euml;',
    '&igrave;',
    '&iacute;',
    '&icirc;',
    '&iuml;',
    '&eth;',
    '&ntilde;',
    '&ograve;',
    '&oacute;',
    '&ocirc;',
    '&otilde;',
    '&ouml;',
    '&divide;',
    '&oslash;',
    '&ugrave;',
    '&uacute;',
    '&ucirc;',
    '&uuml;',
    '&yacute;',
    '&thorn;',
    '&yuml;',
    '&OElig;',
    '&oelig;',
    '&#372;',
    '&#374',
    '&#373',
    '&#375;',
    '&sbquo;',
    '&#8219;',
    '&bdquo;',
    '&hellip;',
    '&trade;',
    '&#9658;',
    '&bull;',
    '&rarr;',
    '&rArr;',
    '&hArr;',
    '&diams;',
    '&asymp;'
];
config_1.Config.prototype.controls.symbol = {
    icon: 'omega',
    hotkeys: ['ctrl+shift+i', 'cmd+shift+i'],
    tooltip: 'Insert Special Character',
    popup: function (editor, current, control, close) {
        var container = editor.e.fire('generateSpecialCharactersTable.symbols');
        if (container) {
            if (editor.o.usePopupForSpecialCharacters) {
                var box_1 = editor.c.div();
                box_1.classList.add('jodit-symbols');
                box_1.appendChild(container);
                editor.e.on(container, 'close_dialog', close);
                return box_1;
            }
            else {
                dialog_1.Alert(container, editor.i18n('Select Special Character'), undefined, 'jodit-symbols').bindDestruct(editor);
                var a = container.querySelector('a');
                a && a.focus();
            }
        }
    }
};


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
__webpack_require__(288);
tslib_1.__exportStar(__webpack_require__(289), exports);
tslib_1.__exportStar(__webpack_require__(291), exports);
tslib_1.__exportStar(__webpack_require__(292), exports);


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(4);
var dom_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(15);
var helpers_1 = __webpack_require__(1);
config_1.Config.prototype.table = {
    allowCellSelection: true,
    selectionCellStyle: 'border: 1px double #1e88e5 !important;',
    allowCellResize: true,
    useExtraClassesOptions: false
};
config_1.Config.prototype.controls.table = {
    data: {
        cols: 10,
        rows: 10,
        classList: {
            'table table-bordered': 'Bootstrap Bordered',
            'table table-striped': 'Bootstrap Striped',
            'table table-dark': 'Bootstrap Dark'
        }
    },
    popup: function (editor, current, control, close, button) {
        var default_rows_count = control.data && control.data.rows ? control.data.rows : 10, default_cols_count = control.data && control.data.cols ? control.data.cols : 10;
        var generateExtraClasses = function () {
            if (!editor.o.table.useExtraClassesOptions) {
                return '';
            }
            var out = [];
            if (control.data) {
                var classList_1 = control.data.classList;
                Object.keys(classList_1).forEach(function (classes) {
                    out.push("<label class=\"jodit_vertical_middle\"><input class=\"jodit-checkbox\" value=\"" + classes + "\" type=\"checkbox\"/>" + classList_1[classes] + "</label>");
                });
            }
            return out.join('');
        };
        var form = editor.c.fromHTML('<form class="jodit-form jodit-form__inserter">' +
            '<div class="jodit-form__table-creator-box">' +
            '<div class="jodit-form__container"></div>' +
            '<div class="jodit-form__options">' +
            generateExtraClasses() +
            '</div>' +
            '</div>' +
            '<label class="jodit-form__center">' +
            '<span>1</span> &times; <span>1</span>' +
            '</label>' +
            '</form>'), rows = form.querySelectorAll('span')[0], cols = form.querySelectorAll('span')[1], blocksContainer = form.querySelector('.jodit-form__container'), options = form.querySelector('.jodit-form__options'), cells = [];
        var cnt = default_rows_count * default_cols_count;
        for (var i = 0; i < cnt; i += 1) {
            if (!cells[i]) {
                cells.push(editor.c.element('span', {
                    dataIndex: i
                }));
            }
        }
        var mouseenter = function (e, index) {
            var dv = e.target;
            if (!dom_1.Dom.isTag(dv, 'span')) {
                return;
            }
            var k = index === undefined || isNaN(index)
                ? parseInt(utils_1.attr(dv, '-index') || '0', 10)
                : index || 0;
            var rows_count = Math.ceil((k + 1) / default_cols_count), cols_count = (k % default_cols_count) + 1;
            for (var i = 0; i < cells.length; i += 1) {
                if (cols_count >= (i % default_cols_count) + 1 &&
                    rows_count >= Math.ceil((i + 1) / default_cols_count)) {
                    cells[i].className = 'jodit_hovered';
                }
                else {
                    cells[i].className = '';
                }
            }
            cols.textContent = cols_count.toString();
            rows.textContent = rows_count.toString();
        };
        editor.e
            .on(blocksContainer, 'mousemove', mouseenter)
            .on(blocksContainer, 'touchstart mousedown', function (e) {
            var dv = e.target;
            e.preventDefault();
            e.stopImmediatePropagation();
            if (!dom_1.Dom.isTag(dv, 'span')) {
                return;
            }
            var k = parseInt(utils_1.attr(dv, '-index') || '0', 10);
            var rows_count = Math.ceil((k + 1) / default_cols_count), cols_count = (k % default_cols_count) + 1;
            var crt = editor.createInside, tbody = crt.element('tbody'), table = crt.element('table');
            table.appendChild(tbody);
            table.style.width = '100%';
            var first_td = null, tr, td;
            for (var i = 1; i <= rows_count; i += 1) {
                tr = crt.element('tr');
                for (var j = 1; j <= cols_count; j += 1) {
                    td = crt.element('td');
                    if (!first_td) {
                        first_td = td;
                    }
                    td.appendChild(crt.element('br'));
                    tr.appendChild(crt.text('\n'));
                    tr.appendChild(crt.text('\t'));
                    tr.appendChild(td);
                }
                tbody.appendChild(crt.text('\n'));
                tbody.appendChild(tr);
            }
            var crnt = editor.s.current();
            if (crnt && editor.s.isCollapsed()) {
                var block = dom_1.Dom.closest(crnt, function (node) { return dom_1.Dom.isBlock(node, editor.ew); }, editor.editor);
                if (block &&
                    block !== editor.editor &&
                    !block.nodeName.match(/^TD|TH|TBODY|TABLE|THEADER|TFOOTER$/)) {
                    editor.s.setCursorAfter(block);
                }
            }
            helpers_1.$$('input[type=checkbox]:checked', options).forEach(function (input) {
                input.value
                    .split(/[\s]+/)
                    .forEach(function (className) {
                    table.classList.add(className);
                });
            });
            editor.s.insertNode(crt.text('\n'));
            editor.s.insertNode(table, false);
            if (first_td) {
                editor.s.setCursorIn(first_td);
                helpers_1.scrollIntoView(first_td, editor.editor, editor.ed);
            }
            close();
        });
        if (button && button.parentElement) {
            for (var i = 0; i < default_rows_count; i += 1) {
                var row = editor.c.div();
                for (var j = 0; j < default_cols_count; j += 1) {
                    row.appendChild(cells[i * default_cols_count + j]);
                }
                blocksContainer.appendChild(row);
            }
            if (cells[0]) {
                cells[0].className = 'hovered';
            }
        }
        return form;
    },
    tooltip: 'Insert table'
};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resizeCells = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(290);
var autobind_decorator_1 = __webpack_require__(10);
var consts = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var key = 'table_processor_observer-resize';
var resizeCells = (function (_super) {
    tslib_1.__extends(resizeCells, _super);
    function resizeCells() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectMode = false;
        _this.resizeDelta = 0;
        _this.createResizeHandle = function () {
            if (!_this.resizeHandler) {
                _this.resizeHandler = _this.j.c.div('jodit-table-resizer');
                _this.j.e
                    .on(_this.resizeHandler, 'mousedown.table touchstart.table', _this.onHandleMouseDown)
                    .on(_this.resizeHandler, 'mouseenter.table', function () {
                    _this.j.async.clearTimeout(_this.hideTimeout);
                });
            }
        };
        _this.hideTimeout = 0;
        _this.drag = false;
        _this.minX = 0;
        _this.maxX = 0;
        _this.startX = 0;
        return _this;
    }
    Object.defineProperty(resizeCells.prototype, "module", {
        get: function () {
            return this.j.getInstance('Table', this.j.o);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(resizeCells.prototype, "isRTL", {
        get: function () {
            return this.j.o.direction === 'rtl';
        },
        enumerable: false,
        configurable: true
    });
    resizeCells.prototype.showResizeHandle = function () {
        this.j.async.clearTimeout(this.hideTimeout);
        this.j.workplace.appendChild(this.resizeHandler);
    };
    resizeCells.prototype.hideResizeHandle = function () {
        var _this = this;
        this.hideTimeout = this.j.async.setTimeout(function () {
            modules_1.Dom.safeRemove(_this.resizeHandler);
        }, {
            timeout: this.j.defaultTimeout,
            label: 'hideResizer'
        });
    };
    resizeCells.prototype.onHandleMouseDown = function (event) {
        var _this = this;
        if (this.j.isLocked) {
            return;
        }
        this.drag = true;
        this.j.e.on(this.j.ew, 'mousemove.table touchmove.table', this.onMouseMove);
        this.startX = event.clientX;
        this.j.lock(key);
        this.resizeHandler.classList.add('jodit-table-resizer_moved');
        var box, tableBox = this.workTable.getBoundingClientRect();
        this.minX = 0;
        this.maxX = 1000000;
        if (this.wholeTable !== null) {
            tableBox = this.workTable
                .parentNode.getBoundingClientRect();
            this.minX = tableBox.left;
            this.maxX = this.minX + tableBox.width;
        }
        else {
            var coordinate_1 = modules_1.Table.formalCoordinate(this.workTable, this.workCell, true);
            modules_1.Table.formalMatrix(this.workTable, function (td, i, j) {
                if (coordinate_1[1] === j) {
                    box = td.getBoundingClientRect();
                    _this.minX = Math.max(box.left + consts.NEARBY / 2, _this.minX);
                }
                if (coordinate_1[1] + (_this.isRTL ? -1 : 1) === j) {
                    box = td.getBoundingClientRect();
                    _this.maxX = Math.min(box.left + box.width - consts.NEARBY / 2, _this.maxX);
                }
            });
        }
        return false;
    };
    resizeCells.prototype.onMouseMove = function (event) {
        if (!this.drag) {
            return;
        }
        this.j.e.fire('closeAllPopups');
        var x = event.clientX;
        var workplacePosition = helpers_1.offset((this.resizeHandler.parentNode ||
            this.j.od.documentElement), this.j, this.j.od, true);
        if (x < this.minX) {
            x = this.minX;
        }
        if (x > this.maxX) {
            x = this.maxX;
        }
        this.resizeDelta =
            x - this.startX + (!this.j.o.iframe ? 0 : workplacePosition.left);
        this.resizeHandler.style.left =
            x - (this.j.o.iframe ? 0 : workplacePosition.left) + 'px';
        var sel = this.j.s.sel;
        sel && sel.removeAllRanges();
        if (event.preventDefault) {
            event.preventDefault();
        }
    };
    resizeCells.prototype.onMouseUp = function (e) {
        if (this.selectMode || this.drag) {
            this.selectMode = false;
            this.j.unlock();
        }
        if (!this.resizeHandler || !this.drag) {
            return;
        }
        this.drag = false;
        this.j.e.off(this.j.ew, 'mousemove.table touchmove.table', this.onMouseMove);
        this.resizeHandler.classList.remove('jodit-table-resizer_moved');
        if (this.startX !== e.clientX) {
            if (this.wholeTable === null) {
                this.resizeColumns();
            }
            else {
                this.resizeTable();
            }
        }
        this.j.setEditorValue();
        this.j.s.focus();
    };
    resizeCells.prototype.resizeColumns = function () {
        var _this = this;
        var delta = this.resizeDelta;
        var marked = [];
        modules_1.Table.setColumnWidthByDelta(this.workTable, modules_1.Table.formalCoordinate(this.workTable, this.workCell, true)[1], delta, true, marked);
        var nextTD = helpers_1.call(this.isRTL ? modules_1.Dom.prev : modules_1.Dom.next, this.workCell, function (elm) { return modules_1.Dom.isCell(elm, _this.j.ew); }, this.workCell.parentNode);
        modules_1.Table.setColumnWidthByDelta(this.workTable, modules_1.Table.formalCoordinate(this.workTable, nextTD)[1], -delta, false, marked);
    };
    resizeCells.prototype.resizeTable = function () {
        var delta = this.resizeDelta * (this.isRTL ? -1 : 1);
        var width = this.workTable.offsetWidth, parentWidth = helpers_1.getContentWidth(this.workTable.parentNode, this.j.ew);
        var rightSide = !this.wholeTable;
        var needChangeWidth = this.isRTL ? !rightSide : rightSide;
        if (needChangeWidth) {
            this.workTable.style.width =
                ((width + delta) / parentWidth) * 100 + '%';
        }
        else {
            var side = this.isRTL ? 'marginRight' : 'marginLeft';
            var margin = parseInt(this.j.ew.getComputedStyle(this.workTable)[side] || '0', 10);
            this.workTable.style.width =
                ((width - delta) / parentWidth) * 100 + '%';
            this.workTable.style[side] =
                ((margin + delta) / parentWidth) * 100 + '%';
        }
    };
    resizeCells.prototype.setWorkCell = function (cell, wholeTable) {
        if (wholeTable === void 0) { wholeTable = null; }
        this.wholeTable = wholeTable;
        this.workCell = cell;
        this.workTable = modules_1.Dom.up(cell, function (elm) { return modules_1.Dom.isTag(elm, 'table'); }, this.j.editor);
    };
    resizeCells.prototype.calcHandlePosition = function (table, cell, offsetX, delta) {
        var _this = this;
        if (offsetX === void 0) { offsetX = 0; }
        if (delta === void 0) { delta = 0; }
        var box = helpers_1.offset(cell, this.j, this.j.ed);
        if (offsetX > consts.NEARBY && offsetX < box.width - consts.NEARBY) {
            this.hideResizeHandle();
            return;
        }
        var workplacePosition = helpers_1.offset(this.j.workplace, this.j, this.j.od, true), parentBox = helpers_1.offset(table, this.j, this.j.ed);
        this.resizeHandler.style.left =
            (offsetX <= consts.NEARBY ? box.left : box.left + box.width) -
                workplacePosition.left +
                delta +
                'px';
        Object.assign(this.resizeHandler.style, {
            height: parentBox.height + 'px',
            top: parentBox.top - workplacePosition.top + 'px'
        });
        this.showResizeHandle();
        if (offsetX <= consts.NEARBY) {
            var prevTD = helpers_1.call(this.isRTL ? modules_1.Dom.next : modules_1.Dom.prev, cell, function (elm) { return modules_1.Dom.isCell(elm, _this.j.ew); }, cell.parentNode);
            this.setWorkCell(prevTD || cell, prevTD ? null : true);
        }
        else {
            var nextTD = helpers_1.call(!this.isRTL ? modules_1.Dom.next : modules_1.Dom.prev, cell, function (elm) { return modules_1.Dom.isCell(elm, _this.j.ew); }, cell.parentNode);
            this.setWorkCell(cell, !nextTD ? false : null);
        }
    };
    resizeCells.prototype.afterInit = function (editor) {
        var _this = this;
        if (!editor.o.table.allowCellResize) {
            return;
        }
        editor.e
            .off(this.j.ow, '.resize-cells')
            .off('.resize-cells')
            .on('change.resize-cells afterCommand.resize-cells afterSetMode.resize-cells', function () {
            helpers_1.$$('table', editor.editor).forEach(_this.observe);
        })
            .on(this.j.ow, 'mouseup.resize-cells touchend.resize-cells', this.onMouseUp)
            .on(this.j.ow, 'scroll.resize-cells', function () {
            if (!_this.drag) {
                return;
            }
            var parent = modules_1.Dom.up(_this.workCell, function (elm) { return modules_1.Dom.isTag(elm, 'table'); }, editor.editor);
            if (parent) {
                var parentBox = parent.getBoundingClientRect();
                _this.resizeHandler.style.top = parentBox.top + 'px';
            }
        })
            .on('beforeSetMode.resize-cells', function () {
            _this.module.getAllSelectedCells().forEach(function (td) {
                _this.module.removeSelection(td);
                modules_1.Table.normalizeTable(modules_1.Dom.closest(td, 'table', editor.editor));
            });
        });
    };
    resizeCells.prototype.observe = function (table) {
        var _this = this;
        if (helpers_1.dataBind(table, key)) {
            return;
        }
        helpers_1.dataBind(table, key, true);
        this.j.e
            .on(table, 'mouseleave.resize-cells', function (e) {
            if (_this.resizeHandler &&
                _this.resizeHandler !== e.relatedTarget) {
                _this.hideResizeHandle();
            }
        })
            .on(table, 'mousemove.resize-cells touchmove.resize-cells', function (event) {
            if (_this.j.isLocked) {
                return;
            }
            var cell = modules_1.Dom.up(event.target, function (elm) { return modules_1.Dom.isCell(elm, _this.j.ew); }, table);
            if (!cell) {
                return;
            }
            _this.calcHandlePosition(table, cell, event.offsetX);
        });
        this.createResizeHandle();
    };
    resizeCells.prototype.beforeDestruct = function (jodit) {
        if (jodit.events) {
            jodit.e.off(this.j.ow, '.resize-cells');
            jodit.e.off('.resize-cells');
        }
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], resizeCells.prototype, "onHandleMouseDown", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], resizeCells.prototype, "onMouseMove", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], resizeCells.prototype, "onMouseUp", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], resizeCells.prototype, "observe", null);
    return resizeCells;
}(modules_1.Plugin));
exports.resizeCells = resizeCells;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectCells = void 0;
var tslib_1 = __webpack_require__(0);
var autobind_decorator_1 = __webpack_require__(10);
var plugin_1 = __webpack_require__(6);
var modules_1 = __webpack_require__(9);
var helpers_1 = __webpack_require__(1);
var justify_1 = __webpack_require__(67);
var constants_1 = __webpack_require__(3);
var key = 'table_processor_observer';
var selectCells = (function (_super) {
    tslib_1.__extends(selectCells, _super);
    function selectCells() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectedCell = null;
        return _this;
    }
    Object.defineProperty(selectCells.prototype, "module", {
        get: function () {
            return this.j.getInstance('Table', this.j.o);
        },
        enumerable: false,
        configurable: true
    });
    selectCells.prototype.afterInit = function (jodit) {
        var _this = this;
        if (!jodit.o.table.allowCellSelection) {
            return;
        }
        jodit.e
            .on(this.j.ow, 'click.select-cells', this.onRemoveSelection)
            .on('keydown.select-cells', function (event) {
            if (event.key === constants_1.KEY_TAB) {
                _this.unselectCells();
            }
        })
            .on('beforeCommand.select-cells', this.onExecCommand)
            .on('afterCommand.select-cells', this.onAfterCommand)
            .on('change afterCommand afterSetMode click'
            .split(' ')
            .map(function (e) { return e + '.select-cells'; })
            .join(' '), function () {
            helpers_1.$$('table', jodit.editor).forEach(_this.observe);
        });
    };
    selectCells.prototype.observe = function (table) {
        if (helpers_1.dataBind(table, key)) {
            return;
        }
        this.onRemoveSelection();
        helpers_1.dataBind(table, key, true);
        this.j.e
            .on(table, 'mousedown.select-cells touchstart.select-cells', this.onStartSelection.bind(this, table))
            .on(table, 'mouseup.select-cells touchend.select-cells', this.onStopSelection.bind(this, table));
    };
    selectCells.prototype.onStartSelection = function (table, e) {
        var _this = this;
        if (this.j.o.readonly) {
            return;
        }
        this.unselectCells();
        var cell = modules_1.Dom.closest(e.target, ['td', 'th'], table);
        if (!cell) {
            return;
        }
        if (!cell.firstChild) {
            cell.appendChild(this.j.createInside.element('br'));
        }
        this.selectedCell = cell;
        this.module.addSelection(cell);
        this.j.e.on(table, 'mousemove.select-cells touchmove.select-cells', this.onMove.bind(this, table));
        this.j.e.fire('showPopup', table, function () { return helpers_1.position(cell, _this.j); }, 'cells');
    };
    selectCells.prototype.onMove = function (table, e) {
        var _this = this;
        if (this.j.o.readonly) {
            return;
        }
        if (this.j.isLockedNotBy(key)) {
            return;
        }
        var node = this.j.ed.elementFromPoint(e.clientX, e.clientY);
        if (!node) {
            return;
        }
        var cell = modules_1.Dom.closest(node, ['td', 'th'], table);
        if (!cell || !this.selectedCell) {
            return;
        }
        if (cell !== this.selectedCell) {
            this.j.lock(key);
            if (e.preventDefault) {
                e.preventDefault();
            }
        }
        this.unselectCells(table);
        var bound = modules_1.Table.getSelectedBound(table, [cell, this.selectedCell]), box = modules_1.Table.formalMatrix(table);
        for (var i = bound[0][0]; i <= bound[1][0]; i += 1) {
            for (var j = bound[0][1]; j <= bound[1][1]; j += 1) {
                this.module.addSelection(box[i][j]);
            }
        }
        this.j.e.fire('hidePopup');
        e.stopPropagation();
        (function () {
            var n = _this.j.createInside.fromHTML('<div style="color:rgba(0,0,0,0.01);width:0;height:0">&nbsp;</div>');
            cell.appendChild(n);
            _this.j.async.setTimeout(function () {
                var _a;
                (_a = n.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(n);
            }, _this.j.defaultTimeout / 5);
        })();
    };
    selectCells.prototype.onRemoveSelection = function (e) {
        var _a;
        if (!((_a = e === null || e === void 0 ? void 0 : e.buffer) === null || _a === void 0 ? void 0 : _a.actionTrigger) &&
            !this.selectedCell &&
            this.module.getAllSelectedCells().length) {
            this.j.unlock();
            this.unselectCells();
            this.j.e.fire('hidePopup');
            return;
        }
        this.selectedCell = null;
    };
    selectCells.prototype.onStopSelection = function (table, e) {
        var _this = this;
        if (!this.selectedCell) {
            return;
        }
        this.j.unlock();
        var node = this.j.ed.elementFromPoint(e.clientX, e.clientY);
        if (!node) {
            return;
        }
        var cell = modules_1.Dom.closest(node, ['td', 'th'], table);
        if (!cell) {
            return;
        }
        var ownTable = modules_1.Dom.closest(cell, 'table', table);
        if (ownTable && ownTable !== table) {
            return;
        }
        var bound = modules_1.Table.getSelectedBound(table, [cell, this.selectedCell]), box = modules_1.Table.formalMatrix(table);
        var max = box[bound[1][0]][bound[1][1]], min = box[bound[0][0]][bound[0][1]];
        this.j.e.fire('showPopup', table, function () {
            var minOffset = helpers_1.position(min, _this.j), maxOffset = helpers_1.position(max, _this.j);
            return {
                left: minOffset.left,
                top: minOffset.top,
                width: maxOffset.left - minOffset.left + maxOffset.width,
                height: maxOffset.top - minOffset.top + maxOffset.height
            };
        }, 'cells');
        helpers_1.$$('table', this.j.editor).forEach(function (table) {
            _this.j.e.off(table, 'mousemove.select-cells touchmove.select-cells');
        });
    };
    selectCells.prototype.unselectCells = function (table, currentCell) {
        var module = this.module;
        var cells = module.getAllSelectedCells();
        if (cells.length) {
            cells.forEach(function (cell) {
                if (!currentCell || currentCell !== cell) {
                    module.removeSelection(cell);
                }
            });
        }
    };
    selectCells.prototype.onExecCommand = function (command) {
        if (/table(splitv|splitg|merge|empty|bin|binrow|bincolumn|addcolumn|addrow)/.test(command)) {
            command = command.replace('table', '');
            var cells = this.module.getAllSelectedCells();
            if (cells.length) {
                var cell = cells.shift();
                if (!cell) {
                    return;
                }
                var table = modules_1.Dom.closest(cell, 'table', this.j.editor);
                if (!table) {
                    return;
                }
                switch (command) {
                    case 'splitv':
                        modules_1.Table.splitVertical(table, this.j);
                        break;
                    case 'splitg':
                        modules_1.Table.splitHorizontal(table, this.j);
                        break;
                    case 'merge':
                        modules_1.Table.mergeSelected(table, this.j);
                        break;
                    case 'empty':
                        cells.forEach(function (td) { return (td.innerHTML = ''); });
                        break;
                    case 'bin':
                        modules_1.Dom.safeRemove(table);
                        break;
                    case 'binrow':
                        modules_1.Table.removeRow(table, cell.parentNode.rowIndex);
                        break;
                    case 'bincolumn':
                        modules_1.Table.removeColumn(table, cell.cellIndex);
                        break;
                    case 'addcolumnafter':
                    case 'addcolumnbefore':
                        modules_1.Table.appendColumn(table, cell.cellIndex, command === 'addcolumnafter', this.j.createInside);
                        break;
                    case 'addrowafter':
                    case 'addrowbefore':
                        modules_1.Table.appendRow(table, cell.parentNode, command === 'addrowafter', this.j.createInside);
                        break;
                }
            }
            return false;
        }
    };
    selectCells.prototype.onAfterCommand = function (command) {
        var _this = this;
        if (/^justify/.test(command)) {
            this.module
                .getAllSelectedCells()
                .forEach(function (elm) { return justify_1.alignElement(command, elm, _this.j); });
        }
    };
    selectCells.prototype.beforeDestruct = function (jodit) {
        this.onRemoveSelection();
        jodit.e.off('.select-cells');
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], selectCells.prototype, "observe", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], selectCells.prototype, "onRemoveSelection", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], selectCells.prototype, "onStopSelection", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], selectCells.prototype, "onExecCommand", null);
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], selectCells.prototype, "onAfterCommand", null);
    return selectCells;
}(plugin_1.Plugin));
exports.selectCells = selectCells;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.tableKeyboardNavigation = void 0;
var consts = __webpack_require__(3);
var dom_1 = __webpack_require__(2);
var modules_1 = __webpack_require__(9);
function tableKeyboardNavigation(editor) {
    editor.e
        .off('.tableKeyboardNavigation')
        .on('keydown.tableKeyboardNavigation', function (event) {
        var current, block;
        if (event.key === consts.KEY_TAB ||
            event.key === consts.KEY_LEFT ||
            event.key === consts.KEY_RIGHT ||
            event.key === consts.KEY_UP ||
            event.key === consts.KEY_DOWN) {
            current = editor.s.current();
            block = dom_1.Dom.up(current, function (elm) {
                return elm && elm.nodeName && /^td|th$/i.test(elm.nodeName);
            }, editor.editor);
            if (!block) {
                return;
            }
            var range = editor.s.range;
            if (event.key !== consts.KEY_TAB && current !== block) {
                if (((event.key === consts.KEY_LEFT ||
                    event.key === consts.KEY_UP) &&
                    (dom_1.Dom.prev(current, function (elm) {
                        return event.key === consts.KEY_UP
                            ? dom_1.Dom.isTag(elm, 'br')
                            : !!elm;
                    }, block) ||
                        (event.key !== consts.KEY_UP &&
                            dom_1.Dom.isText(current) &&
                            range.startOffset !== 0))) ||
                    ((event.key === consts.KEY_RIGHT ||
                        event.key === consts.KEY_DOWN) &&
                        (dom_1.Dom.next(current, function (elm) {
                            return event.key === consts.KEY_DOWN
                                ? dom_1.Dom.isTag(elm, 'br')
                                : !!elm;
                        }, block) ||
                            (event.key !== consts.KEY_DOWN &&
                                dom_1.Dom.isText(current) &&
                                current.nodeValue &&
                                range.startOffset !==
                                    current.nodeValue.length)))) {
                    return;
                }
            }
        }
        else {
            return;
        }
        var table = dom_1.Dom.up(block, function (elm) { return elm && /^table$/i.test(elm.nodeName); }, editor.editor);
        var next = null;
        switch (event.key) {
            case consts.KEY_TAB:
            case consts.KEY_LEFT:
                var sibling = event.key === consts.KEY_LEFT || event.shiftKey
                    ? 'prev'
                    : 'next';
                next = dom_1.Dom[sibling](block, function (elm) {
                    return elm &&
                        /^td|th$/i.test(elm.tagName);
                }, table);
                if (!next) {
                    modules_1.Table.appendRow(table, sibling === 'next'
                        ? false
                        : table.querySelector('tr'), sibling === 'next', editor.createInside);
                    next = dom_1.Dom[sibling](block, function (elm) {
                        return elm && dom_1.Dom.isCell(elm, editor.ew);
                    }, table);
                }
                break;
            case consts.KEY_UP:
            case consts.KEY_DOWN:
                {
                    var i_1 = 0, j_1 = 0;
                    var matrix = modules_1.Table.formalMatrix(table, function (elm, _i, _j) {
                        if (elm === block) {
                            i_1 = _i;
                            j_1 = _j;
                        }
                    });
                    if (event.key === consts.KEY_UP) {
                        if (matrix[i_1 - 1] !== undefined) {
                            next = matrix[i_1 - 1][j_1];
                        }
                    }
                    else {
                        if (matrix[i_1 + 1] !== undefined) {
                            next = matrix[i_1 + 1][j_1];
                        }
                    }
                }
                break;
        }
        if (next) {
            if (!next.firstChild) {
                var first = editor.createInside.element('br');
                next.appendChild(first);
                editor.s.setCursorBefore(first);
            }
            else {
                if (event.key === consts.KEY_TAB) {
                    editor.s.select(next, true);
                }
                else {
                    editor.s.setCursorIn(next, event.key === consts.KEY_RIGHT ||
                        event.key === consts.KEY_DOWN);
                }
            }
            return false;
        }
    });
}
exports.tableKeyboardNavigation = tableKeyboardNavigation;


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.tooltip = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(294);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var dom_1 = __webpack_require__(2);
var global_1 = __webpack_require__(12);
var autobind_decorator_1 = __webpack_require__(10);
var tooltip = (function (_super) {
    tslib_1.__extends(tooltip, _super);
    function tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isOpened = false;
        return _this;
    }
    tooltip.prototype.afterInit = function (jodit) {
        var _this = this;
        this.container = jodit.c.div('jodit-tooltip');
        global_1.getContainer(this.j, tooltip).appendChild(this.container);
        var timeout = 0;
        jodit.e
            .off('.tooltip')
            .on('showTooltip.tooltip', function (target, content) {
            jodit.async.clearTimeout(timeout);
            _this.open(target, content);
        })
            .on('escape.tooltip', this.close)
            .on('hideTooltip.tooltip change.tooltip updateToolbar.tooltip scroll.tooltip changePlace.tooltip hidePopup.tooltip closeAllPopups.tooltip', function () {
            timeout = jodit.async.setTimeout(function () { return _this.close(); }, _this.j.defaultTimeout);
        });
    };
    tooltip.prototype.beforeDestruct = function (jodit) {
        jodit === null || jodit === void 0 ? void 0 : jodit.e.off('.tooltip');
        this.close();
        dom_1.Dom.safeRemove(this.container);
    };
    tooltip.prototype.open = function (target, content) {
        if (!dom_1.Dom.up(target, function (elm) { return elm && elm.nodeName === 'BODY'; })) {
            return;
        }
        this.container.classList.add('jodit-tooltip_visible');
        this.container.innerHTML = content;
        this.isOpened = true;
        this.calcPosition(target);
    };
    tooltip.prototype.calcPosition = function (target) {
        var bound = helpers_1.offset(target, this.j, this.j.od, true);
        helpers_1.css(this.container, {
            left: bound.left - this.container.offsetWidth / 2 + bound.width / 2,
            top: bound.top + bound.height,
            position: null
        });
    };
    tooltip.prototype.close = function () {
        if (this.isOpened) {
            this.isOpened = false;
            this.container.classList.remove('jodit-tooltip_visible');
            helpers_1.css(this.container, {
                left: -5000,
                position: 'fixed'
            });
        }
    };
    tslib_1.__decorate([
        autobind_decorator_1.default
    ], tooltip.prototype, "close", null);
    return tooltip;
}(plugin_1.Plugin));
exports.tooltip = tooltip;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.xpath = void 0;
var tslib_1 = __webpack_require__(0);
__webpack_require__(296);
var config_1 = __webpack_require__(4);
var constants_1 = __webpack_require__(3);
var modules_1 = __webpack_require__(9);
var dom_1 = __webpack_require__(2);
var helpers_1 = __webpack_require__(1);
var plugin_1 = __webpack_require__(6);
var factory_1 = __webpack_require__(17);
config_1.Config.prototype.controls.selectall = {
    icon: 'select-all',
    command: 'selectall',
    tooltip: 'Select all'
};
config_1.Config.prototype.showXPathInStatusbar = true;
var xpath = (function (_super) {
    tslib_1.__extends(xpath, _super);
    function xpath() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onContext = function (bindElement, event) {
            if (!_this.menu) {
                _this.menu = new modules_1.ContextMenu(_this.j);
            }
            _this.menu.show(event.clientX, event.clientY, [
                {
                    icon: 'bin',
                    title: bindElement === _this.j.editor ? 'Clear' : 'Remove',
                    exec: function () {
                        if (bindElement !== _this.j.editor) {
                            dom_1.Dom.safeRemove(bindElement);
                        }
                        else {
                            _this.j.value = '';
                        }
                        _this.j.setEditorValue();
                    }
                },
                {
                    icon: 'select-all',
                    title: 'Select',
                    exec: function () {
                        _this.j.s.select(bindElement);
                    }
                }
            ]);
            return false;
        };
        _this.onSelectPath = function (bindElement, event) {
            _this.j.s.focus();
            var path = helpers_1.attr(event.target, '-path') || '/';
            if (path === '/') {
                _this.j.execCommand('selectall');
                return false;
            }
            try {
                var elm = _this.j.ed
                    .evaluate(path, _this.j.editor, null, XPathResult.ANY_TYPE, null)
                    .iterateNext();
                if (elm) {
                    _this.j.s.select(elm);
                    return false;
                }
            }
            catch (_a) { }
            _this.j.s.select(bindElement);
            return false;
        };
        _this.tpl = function (bindElement, path, name, title) {
            var item = _this.j.c.fromHTML("<span class=\"jodit-xpath__item\"><a role=\"button\" data-path=\"" + path + "\" href=\"javascript:void(0)\" title=\"" + title + "\" tabindex=\"-1\"'>" + helpers_1.trim(name) + "</a></span>");
            var a = item.firstChild;
            _this.j.e
                .on(a, 'click', _this.onSelectPath.bind(_this, bindElement))
                .on(a, 'contextmenu', _this.onContext.bind(_this, bindElement));
            return item;
        };
        _this.removeSelectAll = function () {
            if (_this.selectAllButton) {
                _this.selectAllButton.destruct();
                delete _this.selectAllButton;
            }
        };
        _this.appendSelectAll = function () {
            _this.removeSelectAll();
            _this.selectAllButton = factory_1.makeButton(_this.j, tslib_1.__assign({ name: 'selectall' }, _this.j.o.controls.selectall));
            _this.selectAllButton.state.size = 'tiny';
            _this.container &&
                _this.container.insertBefore(_this.selectAllButton.container, _this.container.firstChild);
        };
        _this.calcPathImd = function () {
            if (_this.isDestructed) {
                return;
            }
            var current = _this.j.s.current();
            if (_this.container) {
                _this.container.innerHTML = constants_1.INVISIBLE_SPACE;
            }
            if (current) {
                var name_1, xpth_1, li_1;
                dom_1.Dom.up(current, function (elm) {
                    if (elm && _this.j.editor !== elm && !dom_1.Dom.isText(elm)) {
                        name_1 = elm.nodeName.toLowerCase();
                        xpth_1 = helpers_1.getXPathByElement(elm, _this.j.editor).replace(/^\//, '');
                        li_1 = _this.tpl(elm, xpth_1, name_1, _this.j.i18n('Select %s', name_1));
                        _this.container &&
                            _this.container.insertBefore(li_1, _this.container.firstChild);
                    }
                }, _this.j.editor);
            }
            _this.appendSelectAll();
        };
        _this.calcPath = _this.j.async.debounce(_this.calcPathImd, _this.j.defaultTimeout * 2);
        _this.menu = null;
        return _this;
    }
    xpath.prototype.afterInit = function () {
        var _this = this;
        if (this.j.o.showXPathInStatusbar) {
            this.container = this.j.c.div('jodit-xpath');
            this.j.e
                .off('.xpath')
                .on('mouseup.xpath change.xpath keydown.xpath changeSelection.xpath', this.calcPath)
                .on('afterSetMode.xpath afterInit.xpath changePlace.xpath', function () {
                if (!_this.j.o.showXPathInStatusbar) {
                    return;
                }
                _this.j.statusbar.append(_this.container);
                if (_this.j.getRealMode() === constants_1.MODE_WYSIWYG) {
                    _this.calcPath();
                }
                else {
                    if (_this.container) {
                        _this.container.innerHTML = constants_1.INVISIBLE_SPACE;
                    }
                    _this.appendSelectAll();
                }
            });
            this.calcPath();
        }
    };
    xpath.prototype.beforeDestruct = function () {
        if (this.j && this.j.events) {
            this.j.e.off('.xpath');
        }
        this.removeSelectAll();
        this.menu && this.menu.destruct();
        dom_1.Dom.safeRemove(this.container);
        delete this.menu;
        delete this.container;
    };
    return xpath;
}(plugin_1.Plugin));
exports.xpath = xpath;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.video = exports.valign = exports.upload = exports.update = exports.unlock = exports.unlink = exports.undo = exports.underline = exports.ul = exports.th_list = exports.th = exports.table = exports.superscript = exports.subscript = exports.strikethrough = exports.splitv = exports.splitg = exports.source = exports.shrink = exports.select_all = exports.save = exports.right = exports.resizer = exports.resize = exports.redo = exports.print = exports.plus = exports.pencil = exports.paste = exports.paragraph = exports.palette = exports.outdent = exports.omega = exports.ol = exports.ok = exports.merge = exports.menu = exports.lock = exports.link = exports.left = exports.justify = exports.italic = exports.info_circle = exports.indent = exports.image = exports.hr = exports.fullsize = exports.fontsize = exports.font = exports.folder = exports.file = exports.eye = exports.eraser = exports.enter = exports.chevron = exports.dots = exports.dedent = exports.cut = exports.crop = exports.copy = exports.copyformat = exports.check_square = exports.check = exports.chain_broken = exports.center = exports.cancel = exports.brush = exports.bold = exports.bin = exports.attachment = exports.arrows_h = exports.arrows_alt = exports.angle_up = exports.angle_right = exports.angle_left = exports.angle_down = exports.addrow = exports.addcolumn = exports.about = void 0;
var about = __webpack_require__(298);
exports.about = about;
var addcolumn = __webpack_require__(299);
exports.addcolumn = addcolumn;
var addrow = __webpack_require__(300);
exports.addrow = addrow;
var angle_down = __webpack_require__(301);
exports.angle_down = angle_down;
var angle_left = __webpack_require__(302);
exports.angle_left = angle_left;
var angle_right = __webpack_require__(303);
exports.angle_right = angle_right;
var angle_up = __webpack_require__(304);
exports.angle_up = angle_up;
var arrows_alt = __webpack_require__(305);
exports.arrows_alt = arrows_alt;
var arrows_h = __webpack_require__(306);
exports.arrows_h = arrows_h;
var attachment = __webpack_require__(307);
exports.attachment = attachment;
var bin = __webpack_require__(308);
exports.bin = bin;
var bold = __webpack_require__(309);
exports.bold = bold;
var brush = __webpack_require__(310);
exports.brush = brush;
var cancel = __webpack_require__(311);
exports.cancel = cancel;
var center = __webpack_require__(312);
exports.center = center;
var chain_broken = __webpack_require__(313);
exports.chain_broken = chain_broken;
var check = __webpack_require__(314);
exports.check = check;
var check_square = __webpack_require__(315);
exports.check_square = check_square;
var chevron = __webpack_require__(316);
exports.chevron = chevron;
var copyformat = __webpack_require__(317);
exports.copyformat = copyformat;
var crop = __webpack_require__(318);
exports.crop = crop;
var copy = __webpack_require__(319);
exports.copy = copy;
var cut = __webpack_require__(320);
exports.cut = cut;
var dedent = __webpack_require__(321);
exports.dedent = dedent;
var dots = __webpack_require__(322);
exports.dots = dots;
var enter = __webpack_require__(323);
exports.enter = enter;
var eraser = __webpack_require__(324);
exports.eraser = eraser;
var eye = __webpack_require__(325);
exports.eye = eye;
var file = __webpack_require__(326);
exports.file = file;
var folder = __webpack_require__(327);
exports.folder = folder;
var font = __webpack_require__(328);
exports.font = font;
var fontsize = __webpack_require__(329);
exports.fontsize = fontsize;
var fullsize = __webpack_require__(330);
exports.fullsize = fullsize;
var hr = __webpack_require__(331);
exports.hr = hr;
var image = __webpack_require__(332);
exports.image = image;
var indent = __webpack_require__(333);
exports.indent = indent;
var info_circle = __webpack_require__(334);
exports.info_circle = info_circle;
var italic = __webpack_require__(335);
exports.italic = italic;
var justify = __webpack_require__(336);
exports.justify = justify;
var left = __webpack_require__(337);
exports.left = left;
var link = __webpack_require__(338);
exports.link = link;
var lock = __webpack_require__(339);
exports.lock = lock;
var menu = __webpack_require__(340);
exports.menu = menu;
var merge = __webpack_require__(341);
exports.merge = merge;
var ok = __webpack_require__(342);
exports.ok = ok;
var ol = __webpack_require__(343);
exports.ol = ol;
var omega = __webpack_require__(344);
exports.omega = omega;
var outdent = __webpack_require__(345);
exports.outdent = outdent;
var palette = __webpack_require__(346);
exports.palette = palette;
var paragraph = __webpack_require__(347);
exports.paragraph = paragraph;
var paste = __webpack_require__(348);
exports.paste = paste;
var pencil = __webpack_require__(349);
exports.pencil = pencil;
var plus = __webpack_require__(350);
exports.plus = plus;
var print = __webpack_require__(351);
exports.print = print;
var redo = __webpack_require__(352);
exports.redo = redo;
var resize = __webpack_require__(353);
exports.resize = resize;
var resizer = __webpack_require__(354);
exports.resizer = resizer;
var right = __webpack_require__(355);
exports.right = right;
var save = __webpack_require__(356);
exports.save = save;
var select_all = __webpack_require__(357);
exports.select_all = select_all;
var shrink = __webpack_require__(358);
exports.shrink = shrink;
var source = __webpack_require__(359);
exports.source = source;
var splitg = __webpack_require__(360);
exports.splitg = splitg;
var splitv = __webpack_require__(361);
exports.splitv = splitv;
var strikethrough = __webpack_require__(362);
exports.strikethrough = strikethrough;
var subscript = __webpack_require__(363);
exports.subscript = subscript;
var superscript = __webpack_require__(364);
exports.superscript = superscript;
var table = __webpack_require__(365);
exports.table = table;
var th = __webpack_require__(366);
exports.th = th;
var th_list = __webpack_require__(367);
exports.th_list = th_list;
var ul = __webpack_require__(368);
exports.ul = ul;
var underline = __webpack_require__(369);
exports.underline = underline;
var undo = __webpack_require__(370);
exports.undo = undo;
var unlink = __webpack_require__(371);
exports.unlink = unlink;
var unlock = __webpack_require__(372);
exports.unlock = unlock;
var update = __webpack_require__(373);
exports.update = update;
var upload = __webpack_require__(374);
exports.upload = upload;
var valign = __webpack_require__(375);
exports.valign = valign;
var video = __webpack_require__(376);
exports.video = video;


/***/ }),
/* 298 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1088 1256v240q0 16-12 28t-28 12h-240q-16 0-28-12t-12-28v-240q0-16 12-28t28-12h240q16 0 28 12t12 28zm316-600q0 54-15.5 101t-35 76.5-55 59.5-57.5 43.5-61 35.5q-41 23-68.5 65t-27.5 67q0 17-12 32.5t-28 15.5h-240q-15 0-25.5-18.5t-10.5-37.5v-45q0-83 65-156.5t143-108.5q59-27 84-56t25-76q0-42-46.5-74t-107.5-32q-65 0-108 29-35 25-107 115-13 16-31 16-12 0-25-8l-164-125q-13-10-15.5-25t5.5-28q160-266 464-266 80 0 161 31t146 83 106 127.5 41 158.5z\"/> </svg> "

/***/ }),
/* 299 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 18.151 18.151\" xmlns=\"http://www.w3.org/2000/svg\"> <g> <g> <path d=\"M6.237,16.546H3.649V1.604h5.916v5.728c0.474-0.122,0.968-0.194,1.479-0.194 c0.042,0,0.083,0.006,0.125,0.006V0H2.044v18.15h5.934C7.295,17.736,6.704,17.19,6.237,16.546z\"/> <path d=\"M11.169,8.275c-2.723,0-4.938,2.215-4.938,4.938s2.215,4.938,4.938,4.938s4.938-2.215,4.938-4.938 S13.892,8.275,11.169,8.275z M11.169,16.81c-1.983,0-3.598-1.612-3.598-3.598c0-1.983,1.614-3.597,3.598-3.597 s3.597,1.613,3.597,3.597C14.766,15.198,13.153,16.81,11.169,16.81z\"/> <polygon points=\"11.792,11.073 10.502,11.073 10.502,12.578 9.03,12.578 9.03,13.868 10.502,13.868 10.502,15.352 11.792,15.352 11.792,13.868 13.309,13.868 13.309,12.578 11.792,12.578 \"/> </g> </g> </svg> "

/***/ }),
/* 300 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 432 432\"> <g> <g> <polygon points=\"203.688,96 0,96 0,144 155.688,144 \"/> <polygon points=\"155.719,288 0,288 0,336 203.719,336 \"/> <rect x=\"252\" y=\"96\"/> <rect/> <rect x=\"252\" y=\"288\"/> <rect y=\"384\"/> <path d=\"M97.844,230.125c-3.701-3.703-5.856-8.906-5.856-14.141s2.154-10.438,5.856-14.141l9.844-9.844H0v48h107.719 L97.844,230.125z\"/> <polygon points=\"232,176 232,96 112,216 232,336 232,256 432,256 432,176 \"/> </g> </g> </svg> "

/***/ }),
/* 301 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1395 736q0 13-10 23l-466 466q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l393 393 393-393q10-10 23-10t23 10l50 50q10 10 10 23z\"/> </svg> "

/***/ }),
/* 302 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50 50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l50 50q10 10 10 23z\"/> </svg> "

/***/ }),
/* 303 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z\"/> </svg> "

/***/ }),
/* 304 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1395 1184q0 13-10 23l-50 50q-10 10-23 10t-23-10l-393-393-393 393q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l466 466q10 10 10 23z\"/> </svg> "

/***/ }),
/* 305 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17 39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355 355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59 39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12 0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144 144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19 45v448q0 42-39 59-13 5-25 5-26 0-45-19z\"/> </svg> "

/***/ }),
/* 306 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1792 896q0 26-19 45l-256 256q-19 19-45 19t-45-19-19-45v-128h-1024v128q0 26-19 45t-45 19-45-19l-256-256q-19-19-19-45t19-45l256-256q19-19 45-19t45 19 19 45v128h1024v-128q0-26 19-45t45-19 45 19l256 256q19 19 19 45z\"/></svg> "

/***/ }),
/* 307 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1596 1385q0 117-79 196t-196 79q-135 0-235-100l-777-776q-113-115-113-271 0-159 110-270t269-111q158 0 273 113l605 606q10 10 10 22 0 16-30.5 46.5t-46.5 30.5q-13 0-23-10l-606-607q-79-77-181-77-106 0-179 75t-73 181q0 105 76 181l776 777q63 63 145 63 64 0 106-42t42-106q0-82-63-145l-581-581q-26-24-60-24-29 0-48 19t-19 48q0 32 25 59l410 410q10 10 10 22 0 16-31 47t-47 31q-12 0-22-10l-410-410q-63-61-63-149 0-82 57-139t139-57q88 0 149 63l581 581q100 98 100 235z\"/></svg> "

/***/ }),
/* 308 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M704 1376v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm-544-992h448l-48-117q-7-9-17-11h-317q-10 2-17 11zm928 32v64q0 14-9 23t-23 9h-96v948q0 83-47 143.5t-113 60.5h-832q-66 0-113-58.5t-47-141.5v-952h-96q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h309l70-167q15-37 54-63t79-26h320q40 0 79 26t54 63l70 167h309q14 0 23 9t9 23z\"/> </svg> "

/***/ }),
/* 309 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M747 1521q74 32 140 32 376 0 376-335 0-114-41-180-27-44-61.5-74t-67.5-46.5-80.5-25-84-10.5-94.5-2q-73 0-101 10 0 53-.5 159t-.5 158q0 8-1 67.5t-.5 96.5 4.5 83.5 12 66.5zm-14-746q42 7 109 7 82 0 143-13t110-44.5 74.5-89.5 25.5-142q0-70-29-122.5t-79-82-108-43.5-124-14q-50 0-130 13 0 50 4 151t4 152q0 27-.5 80t-.5 79q0 46 1 69zm-541 889l2-94q15-4 85-16t106-27q7-12 12.5-27t8.5-33.5 5.5-32.5 3-37.5.5-34v-65.5q0-982-22-1025-4-8-22-14.5t-44.5-11-49.5-7-48.5-4.5-30.5-3l-4-83q98-2 340-11.5t373-9.5q23 0 68.5.5t67.5.5q70 0 136.5 13t128.5 42 108 71 74 104.5 28 137.5q0 52-16.5 95.5t-39 72-64.5 57.5-73 45-84 40q154 35 256.5 134t102.5 248q0 100-35 179.5t-93.5 130.5-138 85.5-163.5 48.5-176 14q-44 0-132-3t-132-3q-106 0-307 11t-231 12z\"/></svg> "

/***/ }),
/* 310 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M896 1152q0-36-20-69-1-1-15.5-22.5t-25.5-38-25-44-21-50.5q-4-16-21-16t-21 16q-7 23-21 50.5t-25 44-25.5 38-15.5 22.5q-20 33-20 69 0 53 37.5 90.5t90.5 37.5 90.5-37.5 37.5-90.5zm512-128q0 212-150 362t-362 150-362-150-150-362q0-145 81-275 6-9 62.5-90.5t101-151 99.5-178 83-201.5q9-30 34-47t51-17 51.5 17 33.5 47q28 93 83 201.5t99.5 178 101 151 62.5 90.5q81 127 81 275z\"/></svg> "

/***/ }),
/* 311 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 14 14\" xmlns=\"http://www.w3.org/2000/svg\"> <g stroke=\"none\" stroke-width=\"1\"> <path d=\"M14,1.4 L12.6,0 L7,5.6 L1.4,0 L0,1.4 L5.6,7 L0,12.6 L1.4,14 L7,8.4 L12.6,14 L14,12.6 L8.4,7 L14,1.4 Z\"/> </g> </svg> "

/***/ }),
/* 312 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1792 1344v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm-384-384v128q0 26-19 45t-45 19h-896q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h896q26 0 45 19t19 45zm256-384v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm-384-384v128q0 26-19 45t-45 19h-640q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h640q26 0 45 19t19 45z\"/></svg> "

/***/ }),
/* 313 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M503 1271l-256 256q-10 9-23 9-12 0-23-9-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23zm169 41v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm-224-224q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm1264 128q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-334-335q-21-21-42-56l239-18 273 274q27 27 68 27.5t68-26.5l147-146q28-28 28-67 0-40-28-68l-274-275 18-239q35 21 56 42l336 336q84 86 84 204zm-617-724l-239 18-273-274q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l274 274-18 240q-35-21-56-42l-336-336q-84-86-84-204 0-120 85-203l147-146q83-83 203-83 121 0 204 85l334 335q21 21 42 56zm633 84q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm-544-544v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm407 151l-256 256q-11 9-23 9t-23-9q-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23z\"/></svg> "

/***/ }),
/* 314 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1472 930v318q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q63 0 117 25 15 7 18 23 3 17-9 29l-49 49q-10 10-23 10-3 0-9-2-23-6-45-6h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-254q0-13 9-22l64-64q10-10 23-10 6 0 12 3 20 8 20 29zm231-489l-814 814q-24 24-57 24t-57-24l-430-430q-24-24-24-57t24-57l110-110q24-24 57-24t57 24l263 263 647-647q24-24 57-24t57 24l110 110q24 24 24 57t-24 57z\"/></svg> "

/***/ }),
/* 315 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M813 1299l614-614q19-19 19-45t-19-45l-102-102q-19-19-45-19t-45 19l-467 467-211-211q-19-19-45-19t-45 19l-102 102q-19 19-19 45t19 45l358 358q19 19 45 19t45-19zm851-883v960q0 119-84.5 203.5t-203.5 84.5h-960q-119 0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5 84.5t84.5 203.5z\"/></svg> "

/***/ }),
/* 316 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 10 10\"> <path d=\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\"/> </svg> "

/***/ }),
/* 317 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 16 16\"> <path d=\"M16 9v-6h-3v-1c0-0.55-0.45-1-1-1h-11c-0.55 0-1 0.45-1 1v3c0 0.55 0.45 1 1 1h11c0.55 0 1-0.45 1-1v-1h2v4h-9v2h-0.5c-0.276 0-0.5 0.224-0.5 0.5v5c0 0.276 0.224 0.5 0.5 0.5h2c0.276 0 0.5-0.224 0.5-0.5v-5c0-0.276-0.224-0.5-0.5-0.5h-0.5v-1h9zM12 3h-11v-1h11v1z\"/> </svg> "

/***/ }),
/* 318 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M621 1280h595v-595zm-45-45l595-595h-595v595zm1152 77v192q0 14-9 23t-23 9h-224v224q0 14-9 23t-23 9h-192q-14 0-23-9t-9-23v-224h-864q-14 0-23-9t-9-23v-864h-224q-14 0-23-9t-9-23v-192q0-14 9-23t23-9h224v-224q0-14 9-23t23-9h192q14 0 23 9t9 23v224h851l246-247q10-9 23-9t23 9q9 10 9 23t-9 23l-247 246v851h224q14 0 23 9t9 23z\"/> </svg> "

/***/ }),
/* 319 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M24.89,6.61H22.31V4.47A2.47,2.47,0,0,0,19.84,2H6.78A2.47,2.47,0,0,0,4.31,4.47V22.92a2.47,2.47,0,0,0,2.47,2.47H9.69V27.2a2.8,2.8,0,0,0,2.8,2.8h12.4a2.8,2.8,0,0,0,2.8-2.8V9.41A2.8,2.8,0,0,0,24.89,6.61ZM6.78,23.52a.61.61,0,0,1-.61-.6V4.47a.61.61,0,0,1,.61-.6H19.84a.61.61,0,0,1,.61.6V6.61h-8a2.8,2.8,0,0,0-2.8,2.8V23.52Zm19,3.68a.94.94,0,0,1-.94.93H12.49a.94.94,0,0,1-.94-.93V9.41a.94.94,0,0,1,.94-.93h12.4a.94.94,0,0,1,.94.93Z\"/> <path d=\"M23.49,13.53h-9.6a.94.94,0,1,0,0,1.87h9.6a.94.94,0,1,0,0-1.87Z\"/> <path d=\"M23.49,17.37h-9.6a.94.94,0,1,0,0,1.87h9.6a.94.94,0,1,0,0-1.87Z\"/> <path d=\"M23.49,21.22h-9.6a.93.93,0,1,0,0,1.86h9.6a.93.93,0,1,0,0-1.86Z\"/> </svg> "

/***/ }),
/* 320 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M960 896q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zm300 64l507 398q28 20 25 56-5 35-35 51l-128 64q-13 7-29 7-17 0-31-8l-690-387-110 66q-8 4-12 5 14 49 10 97-7 77-56 147.5t-132 123.5q-132 84-277 84-136 0-222-78-90-84-79-207 7-76 56-147t131-124q132-84 278-84 83 0 151 31 9-13 22-22l122-73-122-73q-13-9-22-22-68 31-151 31-146 0-278-84-82-53-131-124t-56-147q-5-59 15.5-113t63.5-93q85-79 222-79 145 0 277 84 83 52 132 123t56 148q4 48-10 97 4 1 12 5l110 66 690-387q14-8 31-8 16 0 29 7l128 64q30 16 35 51 3 36-25 56zm-681-260q46-42 21-108t-106-117q-92-59-192-59-74 0-113 36-46 42-21 108t106 117q92 59 192 59 74 0 113-36zm-85 745q81-51 106-117t-21-108q-39-36-113-36-100 0-192 59-81 51-106 117t21 108q39 36 113 36 100 0 192-59zm178-613l96 58v-11q0-36 33-56l14-8-79-47-26 26q-3 3-10 11t-12 12q-2 2-4 3.5t-3 2.5zm224 224l96 32 736-576-128-64-768 431v113l-160 96 9 8q2 2 7 6 4 4 11 12t11 12l26 26zm704 416l128-64-520-408-177 138q-2 3-13 7z\"/> </svg> "

/***/ }),
/* 321 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M384 544v576q0 13-9.5 22.5t-22.5 9.5q-14 0-23-9l-288-288q-9-9-9-23t9-23l288-288q9-9 23-9 13 0 22.5 9.5t9.5 22.5zm1408 768v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5z\"/> </svg> "

/***/ }),
/* 322 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\" > <circle cx=\"12\" cy=\"12\" r=\"2.2\"/> <circle cx=\"12\" cy=\"5\" r=\"2.2\"/> <circle cx=\"12\" cy=\"19\" r=\"2.2\"/> </svg> "

/***/ }),
/* 323 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 128 128\" xml:space=\"preserve\"> <g> <polygon points=\"112.4560547,23.3203125 112.4560547,75.8154297 31.4853516,75.8154297 31.4853516,61.953125 16.0131836,72.6357422 0.5410156,83.3164063 16.0131836,93.9990234 31.4853516,104.6796875 31.4853516,90.8183594 112.4560547,90.8183594 112.4560547,90.8339844 127.4589844,90.8339844 127.4589844,23.3203125 \"/> </g> </svg> "

/***/ }),
/* 324 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M832 1408l336-384h-768l-336 384h768zm1013-1077q15 34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38 0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38 0 69.5 20.5t47.5 54.5z\"/> </svg> "

/***/ }),
/* 325 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1664 960q-152-236-381-353 61 104 61 225 0 185-131.5 316.5t-316.5 131.5-316.5-131.5-131.5-316.5q0-121 61-225-229 117-381 353 133 205 333.5 326.5t434.5 121.5 434.5-121.5 333.5-326.5zm-720-384q0-20-14-34t-34-14q-125 0-214.5 89.5t-89.5 214.5q0 20 14 34t34 14 34-14 14-34q0-86 61-147t147-61q20 0 34-14t14-34zm848 384q0 34-20 69-140 230-376.5 368.5t-499.5 138.5-499.5-139-376.5-368q-20-35-20-69t20-69q140-229 376.5-368t499.5-139 499.5 139 376.5 368q20 35 20 69z\"/></svg> "

/***/ }),
/* 326 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1152 512v-472q22 14 36 28l408 408q14 14 28 36h-472zm-128 32q0 40 28 68t68 28h544v1056q0 40-28 68t-68 28h-1344q-40 0-68-28t-28-68v-1600q0-40 28-68t68-28h800v544z\"/> </svg> "

/***/ }),
/* 327 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1728 608v704q0 92-66 158t-158 66h-1216q-92 0-158-66t-66-158v-960q0-92 66-158t158-66h320q92 0 158 66t66 158v32h672q92 0 158 66t66 158z\"/> </svg> "

/***/ }),
/* 328 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0 57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29 31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15 34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 4-.5 13t-.5 13q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0 12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11 2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0 22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58 0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\"/></svg> "

/***/ }),
/* 329 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1744 1408q33 0 42 18.5t-11 44.5l-126 162q-20 26-49 26t-49-26l-126-162q-20-26-11-44.5t42-18.5h80v-1024h-80q-33 0-42-18.5t11-44.5l126-162q20-26 49-26t49 26l126 162q20 26 11 44.5t-42 18.5h-80v1024h80zm-1663-1279l54 27q12 5 211 5 44 0 132-2t132-2q36 0 107.5.5t107.5.5h293q6 0 21 .5t20.5 0 16-3 17.5-9 15-17.5l42-1q4 0 14 .5t14 .5q2 112 2 336 0 80-5 109-39 14-68 18-25-44-54-128-3-9-11-48t-14.5-73.5-7.5-35.5q-6-8-12-12.5t-15.5-6-13-2.5-18-.5-16.5.5q-17 0-66.5-.5t-74.5-.5-64 2-71 6q-9 81-8 136 0 94 2 388t2 455q0 16-2.5 71.5t0 91.5 12.5 69q40 21 124 42.5t120 37.5q5 40 5 50 0 14-3 29l-34 1q-76 2-218-8t-207-10q-50 0-151 9t-152 9q-3-51-3-52v-9q17-27 61.5-43t98.5-29 78-27q19-42 19-383 0-101-3-303t-3-303v-117q0-2 .5-15.5t.5-25-1-25.5-3-24-5-14q-11-12-162-12-33 0-93 12t-80 26q-19 13-34 72.5t-31.5 111-42.5 53.5q-42-26-56-44v-383z\"/></svg> "

/***/ }),
/* 330 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\" > <path d=\"M22,20.6L3.4,2H8V0H0v8h2V3.4L20.6,22H16v2h8v-8h-2V20.6z M16,0v2h4.7l-6.3,6.3l1.4,1.4L22,3.5V8h2V0H16z M8.3,14.3L2,20.6V16H0v8h8v-2H3.5l6.3-6.3L8.3,14.3z\"/> </svg> "

/***/ }),
/* 331 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1600 736v192q0 40-28 68t-68 28h-1216q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h1216q40 0 68 28t28 68z\"/></svg> "

/***/ }),
/* 332 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M576 576q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm1024 384v448h-1408v-192l320-320 160 160 512-512zm96-704h-1600q-13 0-22.5 9.5t-9.5 22.5v1216q0 13 9.5 22.5t22.5 9.5h1600q13 0 22.5-9.5t9.5-22.5v-1216q0-13-9.5-22.5t-22.5-9.5zm160 32v1216q0 66-47 113t-113 47h-1600q-66 0-113-47t-47-113v-1216q0-66 47-113t113-47h1600q66 0 113 47t47 113z\"/></svg> "

/***/ }),
/* 333 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M352 832q0 14-9 23l-288 288q-9 9-23 9-13 0-22.5-9.5t-9.5-22.5v-576q0-13 9.5-22.5t22.5-9.5q14 0 23 9l288 288q9 9 9 23zm1440 480v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5z\"/> </svg> "

/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1152 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z\"/></svg> "

/***/ }),
/* 335 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M384 1662l17-85q6-2 81.5-21.5t111.5-37.5q28-35 41-101 1-7 62-289t114-543.5 52-296.5v-25q-24-13-54.5-18.5t-69.5-8-58-5.5l19-103q33 2 120 6.5t149.5 7 120.5 2.5q48 0 98.5-2.5t121-7 98.5-6.5q-5 39-19 89-30 10-101.5 28.5t-108.5 33.5q-8 19-14 42.5t-9 40-7.5 45.5-6.5 42q-27 148-87.5 419.5t-77.5 355.5q-2 9-13 58t-20 90-16 83.5-6 57.5l1 18q17 4 185 31-3 44-16 99-11 0-32.5 1.5t-32.5 1.5q-29 0-87-10t-86-10q-138-2-206-2-51 0-143 9t-121 11z\"/></svg> "

/***/ }),
/* 336 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1792 1344v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45z\"/></svg> "

/***/ }),
/* 337 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1792 1344v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm-384-384v128q0 26-19 45t-45 19h-1280q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1280q26 0 45 19t19 45zm256-384v128q0 26-19 45t-45 19h-1536q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1536q26 0 45 19t19 45zm-384-384v128q0 26-19 45t-45 19h-1152q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1152q26 0 45 19t19 45z\"/></svg> "

/***/ }),
/* 338 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1520 1216q0-40-28-68l-208-208q-28-28-68-28-42 0-72 32 3 3 19 18.5t21.5 21.5 15 19 13 25.5 3.5 27.5q0 40-28 68t-68 28q-15 0-27.5-3.5t-25.5-13-19-15-21.5-21.5-18.5-19q-33 31-33 73 0 40 28 68l206 207q27 27 68 27 40 0 68-26l147-146q28-28 28-67zm-703-705q0-40-28-68l-206-207q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l208 208q27 27 68 27 42 0 72-31-3-3-19-18.5t-21.5-21.5-15-19-13-25.5-3.5-27.5q0-40 28-68t68-28q15 0 27.5 3.5t25.5 13 19 15 21.5 21.5 18.5 19q33-31 33-73zm895 705q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-206-207q-83-83-83-203 0-123 88-209l-88-88q-86 88-208 88-120 0-204-84l-208-208q-84-84-84-204t85-203l147-146q83-83 203-83 121 0 204 85l206 207q83 83 83 203 0 123-88 209l88 88q86-88 208-88 120 0 204 84l208 208q84 84 84 204z\"/></svg> "

/***/ }),
/* 339 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"/></svg> "

/***/ }),
/* 340 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1664 1344v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45zm0-512v128q0 26-19 45t-45 19h-1408q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1408q26 0 45 19t19 45z\"/></svg> "

/***/ }),
/* 341 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 312 312\"> <g transform=\"translate(0.000000,312.000000) scale(0.100000,-0.100000)\" stroke=\"none\"> <path d=\"M50 3109 c0 -7 -11 -22 -25 -35 l-25 -23 0 -961 0 -961 32 -29 32 -30 501 -2 500 -3 3 -502 2 -502 31 -30 31 -31 958 0 958 0 23 25 c13 13 30 25 37 25 9 0 12 199 12 960 0 686 -3 960 -11 960 -6 0 -24 12 -40 28 l-29 27 -503 5 -502 5 -5 502 -5 503 -28 29 c-15 16 -27 34 -27 40 0 8 -274 11 -960 11 -710 0 -960 -3 -960 -11z m1738 -698 l2 -453 -40 -40 c-22 -22 -40 -43 -40 -47 0 -4 36 -42 79 -85 88 -87 82 -87 141 -23 l26 27 455 -2 454 -3 0 -775 0 -775 -775 0 -775 0 -3 450 -2 449 47 48 47 48 -82 80 c-44 44 -84 80 -87 80 -3 0 -25 -18 -48 -40 l-41 -40 -456 2 -455 3 -3 765 c-1 421 0 771 3 778 3 10 164 12 777 10 l773 -3 3 -454z\"/> <path d=\"M607 2492 c-42 -42 -77 -82 -77 -87 0 -6 86 -96 190 -200 105 -104 190 -197 190 -205 0 -8 -41 -56 -92 -107 -65 -65 -87 -94 -77 -98 8 -3 138 -4 289 -3 l275 3 3 275 c1 151 0 281 -3 289 -4 10 -35 -14 -103 -82 -54 -53 -103 -97 -109 -97 -7 0 -99 88 -206 195 -107 107 -196 195 -198 195 -3 0 -39 -35 -82 -78z\"/> <path d=\"M1470 1639 c-47 -49 -87 -91 -89 -94 -5 -6 149 -165 160 -165 9 0 189 179 189 188 0 12 -154 162 -165 161 -6 0 -48 -41 -95 -90z\"/> <path d=\"M1797 1303 c-9 -8 -9 -568 0 -576 4 -4 50 36 103 88 54 52 101 95 106 95 5 0 95 -85 199 -190 104 -104 194 -190 200 -190 6 0 46 36 90 80 l79 79 -197 196 c-108 108 -197 199 -197 203 0 4 45 52 99 106 55 55 98 103 95 108 -6 10 -568 11 -577 1z\"/> </g> </svg> "

/***/ }),
/* 342 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 32 32\"> <path d=\"M27 4l-15 15-7-7-5 5 12 12 20-20z\"/> </svg> "

/***/ }),
/* 343 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M381 1620q0 80-54.5 126t-135.5 46q-106 0-172-66l57-88q49 45 106 45 29 0 50.5-14.5t21.5-42.5q0-64-105-56l-26-56q8-10 32.5-43.5t42.5-54 37-38.5v-1q-16 0-48.5 1t-48.5 1v53h-106v-152h333v88l-95 115q51 12 81 49t30 88zm2-627v159h-362q-6-36-6-54 0-51 23.5-93t56.5-68 66-47.5 56.5-43.5 23.5-45q0-25-14.5-38.5t-39.5-13.5q-46 0-81 58l-85-59q24-51 71.5-79.5t105.5-28.5q73 0 123 41.5t50 112.5q0 50-34 91.5t-75 64.5-75.5 50.5-35.5 52.5h127v-60h105zm1409 319v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-14 9-23t23-9h1216q13 0 22.5 9.5t9.5 22.5zm-1408-899v99h-335v-99h107q0-41 .5-122t.5-121v-12h-2q-8 17-50 54l-71-76 136-127h106v404h108zm1408 387v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-14 9-23t23-9h1216q13 0 22.5 9.5t9.5 22.5zm0-512v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1216q13 0 22.5 9.5t9.5 22.5z\"/> </svg> "

/***/ }),
/* 344 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 270 270\"> <path d=\"m240.443652,220.45085l-47.410809,0l0,-10.342138c13.89973,-8.43655 25.752896,-19.844464 34.686646,-33.469923c11.445525,-17.455846 17.496072,-37.709239 17.496072,-58.570077c0,-59.589197 -49.208516,-108.068714 -109.693558,-108.068714s-109.69263,48.479517 -109.69263,108.069628c0,20.860839 6.050547,41.113316 17.497001,58.570077c8.93375,13.625459 20.787845,25.032458 34.686646,33.469008l0,10.342138l-47.412666,0c-10.256959,0 -18.571354,8.191376 -18.571354,18.296574c0,10.105198 8.314395,18.296574 18.571354,18.296574l65.98402,0c10.256959,0 18.571354,-8.191376 18.571354,-18.296574l0,-39.496814c0,-7.073455 -4.137698,-13.51202 -10.626529,-16.537358c-25.24497,-11.772016 -41.557118,-37.145704 -41.557118,-64.643625c0,-39.411735 32.545369,-71.476481 72.549922,-71.476481c40.004553,0 72.550851,32.064746 72.550851,71.476481c0,27.497006 -16.312149,52.87161 -41.557118,64.643625c-6.487902,3.026253 -10.6256,9.464818 -10.6256,16.537358l0,39.496814c0,10.105198 8.314395,18.296574 18.571354,18.296574l65.982163,0c10.256959,0 18.571354,-8.191376 18.571354,-18.296574c0,-10.105198 -8.314395,-18.296574 -18.571354,-18.296574z\"/> </svg> "

/***/ }),
/* 345 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M384 544v576q0 13-9.5 22.5t-22.5 9.5q-14 0-23-9l-288-288q-9-9-9-23t9-23l288-288q9-9 23-9 13 0 22.5 9.5t9.5 22.5zm1408 768v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5z\"/> </svg> "

/***/ }),
/* 346 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' x=\"0px\" y=\"0px\" viewBox=\"0 0 459 459\"> <g> <g> <path d=\"M229.5,0C102,0,0,102,0,229.5S102,459,229.5,459c20.4,0,38.25-17.85,38.25-38.25c0-10.2-2.55-17.85-10.2-25.5 c-5.1-7.65-10.2-15.3-10.2-25.5c0-20.4,17.851-38.25,38.25-38.25h45.9c71.4,0,127.5-56.1,127.5-127.5C459,91.8,357,0,229.5,0z M89.25,229.5c-20.4,0-38.25-17.85-38.25-38.25S68.85,153,89.25,153s38.25,17.85,38.25,38.25S109.65,229.5,89.25,229.5z M165.75,127.5c-20.4,0-38.25-17.85-38.25-38.25S145.35,51,165.75,51S204,68.85,204,89.25S186.15,127.5,165.75,127.5z M293.25,127.5c-20.4,0-38.25-17.85-38.25-38.25S272.85,51,293.25,51s38.25,17.85,38.25,38.25S313.65,127.5,293.25,127.5z M369.75,229.5c-20.4,0-38.25-17.85-38.25-38.25S349.35,153,369.75,153S408,170.85,408,191.25S390.15,229.5,369.75,229.5z\" /> </g> </g> </svg> "

/***/ }),
/* 347 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1534 189v73q0 29-18.5 61t-42.5 32q-50 0-54 1-26 6-32 31-3 11-3 64v1152q0 25-18 43t-43 18h-108q-25 0-43-18t-18-43v-1218h-143v1218q0 25-17.5 43t-43.5 18h-108q-26 0-43.5-18t-17.5-43v-496q-147-12-245-59-126-58-192-179-64-117-64-259 0-166 88-286 88-118 209-159 111-37 417-37h479q25 0 43 18t18 43z\"/></svg> "

/***/ }),
/* 348 */
/***/ (function(module, exports) {

module.exports = "<svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M10.5 20H2a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h1V3l2.03-.4a3 3 0 0 1 5.94 0L13 3v1h1a2 2 0 0 1 2 2v1h-2V6h-1v1H3V6H2v12h5v2h3.5zM8 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2 4h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2zm0 2v8h8v-8h-8z\"/> </svg> "

/***/ }),
/* 349 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z\"/></svg> "

/***/ }),
/* 350 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"/></svg> "

/***/ }),
/* 351 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M448 1536h896v-256h-896v256zm0-640h896v-384h-160q-40 0-68-28t-28-68v-160h-640v640zm1152 64q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm128 0v416q0 13-9.5 22.5t-22.5 9.5h-224v160q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-160h-224q-13 0-22.5-9.5t-9.5-22.5v-416q0-79 56.5-135.5t135.5-56.5h64v-544q0-40 28-68t68-28h672q40 0 88 20t76 48l152 152q28 28 48 76t20 88v256h64q79 0 135.5 56.5t56.5 135.5z\"/> </svg> "

/***/ }),
/* 352 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5 163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0 225-52t179-147q7-10 23-12 14 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109 132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298 164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14 39 17 39 59z\"/> </svg> "

/***/ }),
/* 353 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\" > <g> <g transform=\"translate(-251.000000, -443.000000)\"> <g transform=\"translate(215.000000, 119.000000)\"/> <path d=\"M252,448 L256,448 L256,444 L252,444 L252,448 Z M257,448 L269,448 L269,446 L257,446 L257,448 Z M257,464 L269,464 L269,462 L257,462 L257,464 Z M270,444 L270,448 L274,448 L274,444 L270,444 Z M252,462 L252,466 L256,466 L256,462 L252,462 Z M270,462 L270,466 L274,466 L274,462 L270,462 Z M254,461 L256,461 L256,449 L254,449 L254,461 Z M270,461 L272,461 L272,449 L270,449 L270,461 Z\"/> </g> </g> </svg> "

/***/ }),
/* 354 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M844 472q0 60-19 113.5t-63 92.5-105 39q-76 0-138-57.5t-92-135.5-30-151q0-60 19-113.5t63-92.5 105-39q77 0 138.5 57.5t91.5 135 30 151.5zm-342 483q0 80-42 139t-119 59q-76 0-141.5-55.5t-100.5-133.5-35-152q0-80 42-139.5t119-59.5q76 0 141.5 55.5t100.5 134 35 152.5zm394-27q118 0 255 97.5t229 237 92 254.5q0 46-17 76.5t-48.5 45-64.5 20-76 5.5q-68 0-187.5-45t-182.5-45q-66 0-192.5 44.5t-200.5 44.5q-183 0-183-146 0-86 56-191.5t139.5-192.5 187.5-146 193-59zm239-211q-61 0-105-39t-63-92.5-19-113.5q0-74 30-151.5t91.5-135 138.5-57.5q61 0 105 39t63 92.5 19 113.5q0 73-30 151t-92 135.5-138 57.5zm432-104q77 0 119 59.5t42 139.5q0 74-35 152t-100.5 133.5-141.5 55.5q-77 0-119-59t-42-139q0-74 35-152.5t100.5-134 141.5-55.5z\"/> </svg> "

/***/ }),
/* 355 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1792 1344v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1280q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1280q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1536q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1536q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1152q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1152q26 0 45 19t19 45z\"/> </svg> "

/***/ }),
/* 356 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1536h768v-384h-768v384zm896 0h128v-896q0-14-10-38.5t-20-34.5l-281-281q-10-10-34-20t-39-10v416q0 40-28 68t-68 28h-576q-40 0-68-28t-28-68v-416h-128v1280h128v-416q0-40 28-68t68-28h832q40 0 68 28t28 68v416zm-384-928v-320q0-13-9.5-22.5t-22.5-9.5h-192q-13 0-22.5 9.5t-9.5 22.5v320q0 13 9.5 22.5t22.5 9.5h192q13 0 22.5-9.5t9.5-22.5zm640 32v928q0 40-28 68t-68 28h-1344q-40 0-68-28t-28-68v-1344q0-40 28-68t68-28h928q40 0 88 20t76 48l280 280q28 28 48 76t20 88z\"/> </svg> "

/***/ }),
/* 357 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 18 18\"> <g fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\"> <g transform=\"translate(-381.000000, -381.000000)\"> <g transform=\"translate(381.000000, 381.000000)\"> <path d=\"M0,2 L2,2 L2,0 C0.9,0 0,0.9 0,2 L0,2 Z M0,10 L2,10 L2,8 L0,8 L0,10 L0,10 Z M4,18 L6,18 L6,16 L4,16 L4,18 L4,18 Z M0,6 L2,6 L2,4 L0,4 L0,6 L0,6 Z M10,0 L8,0 L8,2 L10,2 L10,0 L10,0 Z M16,0 L16,2 L18,2 C18,0.9 17.1,0 16,0 L16,0 Z M2,18 L2,16 L0,16 C0,17.1 0.9,18 2,18 L2,18 Z M0,14 L2,14 L2,12 L0,12 L0,14 L0,14 Z M6,0 L4,0 L4,2 L6,2 L6,0 L6,0 Z M8,18 L10,18 L10,16 L8,16 L8,18 L8,18 Z M16,10 L18,10 L18,8 L16,8 L16,10 L16,10 Z M16,18 C17.1,18 18,17.1 18,16 L16,16 L16,18 L16,18 Z M16,6 L18,6 L18,4 L16,4 L16,6 L16,6 Z M16,14 L18,14 L18,12 L16,12 L16,14 L16,14 Z M12,18 L14,18 L14,16 L12,16 L12,18 L12,18 Z M12,2 L14,2 L14,0 L12,0 L12,2 L12,2 Z M4,14 L14,14 L14,4 L4,4 L4,14 L4,14 Z M6,6 L12,6 L12,12 L6,12 L6,6 L6,6 Z\"/> </g> </g> </g> </svg> "

/***/ }),
/* 358 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M896 960v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45zm755-672q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23z\"/> </svg> "

/***/ }),
/* 359 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M553 1399l-50 50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l50 50q10 10 10 23t-10 23l-393 393 393 393q10 10 10 23t-10 23zm591-1067l-373 1291q-4 13-15.5 19.5t-23.5 2.5l-62-17q-13-4-19.5-15.5t-2.5-24.5l373-1291q4-13 15.5-19.5t23.5-2.5l62 17q13 4 19.5 15.5t2.5 24.5zm657 651l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23t-10 23z\"/> </svg> "

/***/ }),
/* 360 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 48 48\"> <path d=\"M6 42h4v-4h-4v4zm4-28h-4v4h4v-4zm-4 20h4v-4h-4v4zm8 8h4v-4h-4v4zm-4-36h-4v4h4v-4zm8 0h-4v4h4v-4zm16 0h-4v4h4v-4zm-8 8h-4v4h4v-4zm0-8h-4v4h4v-4zm12 28h4v-4h-4v4zm-16 8h4v-4h-4v4zm-16-16h36v-4h-36v4zm32-20v4h4v-4h-4zm0 12h4v-4h-4v4zm-16 16h4v-4h-4v4zm8 8h4v-4h-4v4zm8 0h4v-4h-4v4z\"/><path d=\"M0 0h48v48h-48z\" fill=\"none\"/> </svg> "

/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 48 48\"> <path d=\"M6 18h4v-4h-4v4zm0-8h4v-4h-4v4zm8 32h4v-4h-4v4zm0-16h4v-4h-4v4zm-8 0h4v-4h-4v4zm0 16h4v-4h-4v4zm0-8h4v-4h-4v4zm8-24h4v-4h-4v4zm24 24h4v-4h-4v4zm-16 8h4v-36h-4v36zm16 0h4v-4h-4v4zm0-16h4v-4h-4v4zm0-20v4h4v-4h-4zm0 12h4v-4h-4v4zm-8-8h4v-4h-4v4zm0 32h4v-4h-4v4zm0-16h4v-4h-4v4z\"/> <path d=\"M0 0h48v48h-48z\" fill=\"none\"/> </svg> "

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1760 896q14 0 23 9t9 23v64q0 14-9 23t-23 9h-1728q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h1728zm-1277-64q-28-35-51-80-48-97-48-188 0-181 134-309 133-127 393-127 50 0 167 19 66 12 177 48 10 38 21 118 14 123 14 183 0 18-5 45l-12 3-84-6-14-2q-50-149-103-205-88-91-210-91-114 0-182 59-67 58-67 146 0 73 66 140t279 129q69 20 173 66 58 28 95 52h-743zm507 256h411q7 39 7 92 0 111-41 212-23 55-71 104-37 35-109 81-80 48-153 66-80 21-203 21-114 0-195-23l-140-40q-57-16-72-28-8-8-8-22v-13q0-108-2-156-1-30 0-68l2-37v-44l102-2q15 34 30 71t22.5 56 12.5 27q35 57 80 94 43 36 105 57 59 22 132 22 64 0 139-27 77-26 122-86 47-61 47-129 0-84-81-157-34-29-137-71z\"/> </svg> "

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1025 1369v167h-248l-159-252-24-42q-8-9-11-21h-3l-9 21q-10 20-25 44l-155 250h-258v-167h128l197-291-185-272h-137v-168h276l139 228q2 4 23 42 8 9 11 21h3q3-9 11-21l25-42 140-228h257v168h-125l-184 267 204 296h109zm639 217v206h-514l-4-27q-3-45-3-46 0-64 26-117t65-86.5 84-65 84-54.5 65-54 26-64q0-38-29.5-62.5t-70.5-24.5q-51 0-97 39-14 11-36 38l-105-92q26-37 63-66 80-65 188-65 110 0 178 59.5t68 158.5q0 66-34.5 118.5t-84 86-99.5 62.5-87 63-41 73h232v-80h126z\"/> </svg> "

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1025 1369v167h-248l-159-252-24-42q-8-9-11-21h-3l-9 21q-10 20-25 44l-155 250h-258v-167h128l197-291-185-272h-137v-168h276l139 228q2 4 23 42 8 9 11 21h3q3-9 11-21l25-42 140-228h257v168h-125l-184 267 204 296h109zm637-679v206h-514l-3-27q-4-28-4-46 0-64 26-117t65-86.5 84-65 84-54.5 65-54 26-64q0-38-29.5-62.5t-70.5-24.5q-51 0-97 39-14 11-36 38l-105-92q26-37 63-66 83-65 188-65 110 0 178 59.5t68 158.5q0 56-24.5 103t-62 76.5-81.5 58.5-82 50.5-65.5 51.5-30.5 63h232v-80h126z\"/> </svg> "

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M576 1376v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm0-384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm512 384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm-512-768v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm512 384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm512 384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm-512-768v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm512 384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm0-384v-192q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v192q0 14 9 23t23 9h320q14 0 23-9t9-23zm128-320v1088q0 66-47 113t-113 47h-1344q-66 0-113-47t-47-113v-1088q0-66 47-113t113-47h1344q66 0 113 47t47 113z\"/> </svg> "

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1248v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68z\"/> </svg> "

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1248v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68zm-1280-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68z\"/> </svg> "

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M384 1408q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm0-512q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm1408 416v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1216q13 0 22.5 9.5t9.5 22.5zm-1408-928q0 80-56 136t-136 56-136-56-56-136 56-136 136-56 136 56 56 136zm1408 416v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1216q13 0 22.5 9.5t9.5 22.5zm0-512v192q0 13-9.5 22.5t-22.5 9.5h-1216q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1216q13 0 22.5 9.5t9.5 22.5z\"/> </svg> "

/***/ }),
/* 369 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M176 223q-37-2-45-4l-3-88q13-1 40-1 60 0 112 4 132 7 166 7 86 0 168-3 116-4 146-5 56 0 86-2l-1 14 2 64v9q-60 9-124 9-60 0-79 25-13 14-13 132 0 13 .5 32.5t.5 25.5l1 229 14 280q6 124 51 202 35 59 96 92 88 47 177 47 104 0 191-28 56-18 99-51 48-36 65-64 36-56 53-114 21-73 21-229 0-79-3.5-128t-11-122.5-13.5-159.5l-4-59q-5-67-24-88-34-35-77-34l-100 2-14-3 2-86h84l205 10q76 3 196-10l18 2q6 38 6 51 0 7-4 31-45 12-84 13-73 11-79 17-15 15-15 41 0 7 1.5 27t1.5 31q8 19 22 396 6 195-15 304-15 76-41 122-38 65-112 123-75 57-182 89-109 33-255 33-167 0-284-46-119-47-179-122-61-76-83-195-16-80-16-237v-333q0-188-17-213-25-36-147-39zm1488 1409v-64q0-14-9-23t-23-9h-1472q-14 0-23 9t-9 23v64q0 14 9 23t23 9h1472q14 0 23-9t9-23z\"/> </svg> "

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1664 896q0 156-61 298t-164 245-245 164-298 61q-172 0-327-72.5t-264-204.5q-7-10-6.5-22.5t8.5-20.5l137-138q10-9 25-9 16 2 23 12 73 95 179 147t225 52q104 0 198.5-40.5t163.5-109.5 109.5-163.5 40.5-198.5-40.5-198.5-109.5-163.5-163.5-109.5-198.5-40.5q-98 0-188 35.5t-160 101.5l137 138q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59 39-17 69 14l130 129q107-101 244.5-156.5t284.5-55.5q156 0 298 61t245 164 164 245 61 298z\"/> </svg> "

/***/ }),
/* 371 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M503 1271l-256 256q-10 9-23 9-12 0-23-9-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23zm169 41v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm-224-224q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm1264 128q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-334-335q-21-21-42-56l239-18 273 274q27 27 68 27.5t68-26.5l147-146q28-28 28-67 0-40-28-68l-274-275 18-239q35 21 56 42l336 336q84 86 84 204zm-617-724l-239 18-273-274q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l274 274-18 240q-35-21-56-42l-336-336q-84-86-84-204 0-120 85-203l147-146q83-83 203-83 121 0 204 85l334 335q21 21 42 56zm633 84q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm-544-544v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm407 151l-256 256q-11 9-23 9t-23-9q-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23z\"/> </svg> "

/***/ }),
/* 372 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"/> </svg> "

/***/ }),
/* 373 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1639 1056q0 5-1 7-64 268-268 434.5t-478 166.5q-146 0-282.5-55t-243.5-157l-129 129q-19 19-45 19t-45-19-19-45v-448q0-26 19-45t45-19h448q26 0 45 19t19 45-19 45l-137 137q71 66 161 102t187 36q134 0 250-65t186-179q11-17 53-117 8-23 30-23h192q13 0 22.5 9.5t9.5 22.5zm25-800v448q0 26-19 45t-45 19h-448q-26 0-45-19t-19-45 19-45l138-138q-148-137-349-137-134 0-250 65t-186 179q-11 17-53 117-8 23-30 23h-199q-13 0-22.5-9.5t-9.5-22.5v-7q65-268 270-434.5t480-166.5q146 0 284 55.5t245 156.5l130-129q19-19 45-19t45 19 19 45z\"/> </svg> "

/***/ }),
/* 374 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1344 1472q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm256 0q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm128-224v320q0 40-28 68t-68 28h-1472q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h427q21 56 70.5 92t110.5 36h256q61 0 110.5-36t70.5-92h427q40 0 68 28t28 68zm-325-648q-17 40-59 40h-256v448q0 26-19 45t-45 19h-256q-26 0-45-19t-19-45v-448h-256q-42 0-59-40-17-39 14-69l448-448q18-19 45-19t45 19l448 448q31 30 14 69z\"/> </svg> "

/***/ }),
/* 375 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1216 320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19 19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26 0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\"/> </svg> "

/***/ }),
/* 376 */
/***/ (function(module, exports) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1792 352v1088q0 42-39 59-13 5-25 5-27 0-45-19l-403-403v166q0 119-84.5 203.5t-203.5 84.5h-704q-119 0-203.5-84.5t-84.5-203.5v-704q0-119 84.5-203.5t203.5-84.5h704q119 0 203.5 84.5t84.5 203.5v165l403-402q18-19 45-19 12 0 25 5 39 17 39 59z\"/> </svg> "

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2020 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.keepModuleNames = void 0;
var utils_1 = __webpack_require__(15);
function keepModuleNames(modules) {
    utils_1.keepNames.set(modules.UIButton, 'UIButton');
    utils_1.keepNames.set(modules.UIElement, 'UIElement');
    utils_1.keepNames.set(modules.UISeparator, 'UISeparator');
    utils_1.keepNames.set(modules.UIList, 'UIList');
    utils_1.keepNames.set(modules.UIGroup, 'UIGroup');
    utils_1.keepNames.set(modules.Popup, 'Popup');
    utils_1.keepNames.set(modules.ToolbarButton, 'ToolbarButton');
    utils_1.keepNames.set(modules.ToolbarContent, 'ToolbarContent');
    utils_1.keepNames.set(modules.ToolbarCollection, 'ToolbarCollection');
    utils_1.keepNames.set(modules.ToolbarEditorCollection, 'ToolbarEditorCollection');
    utils_1.keepNames.set(modules.Component, 'Component');
    utils_1.keepNames.set(modules.Table, 'Table');
    utils_1.keepNames.set(modules.Uploader, 'Uploader');
    utils_1.keepNames.set(modules.FileBrowser, 'FileBrowser');
}
exports.keepModuleNames = keepModuleNames;


/***/ })
/******/ ]);
});